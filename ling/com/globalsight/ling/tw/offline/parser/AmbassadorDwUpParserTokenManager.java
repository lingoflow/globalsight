/* Generated By:JavaCC: Do not edit this line. AmbassadorDwUpParserTokenManager.java */
package com.globalsight.ling.tw.offline.parser;

/** Token Manager. */
public class AmbassadorDwUpParserTokenManager implements AmbassadorDwUpParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1fffe00000L) != 0L)
            return 35;
         return -1;
      case 1:
         if ((active0 & 0x1fffe00000L) != 0L)
            return 34;
         return -1;
      case 2:
         if ((active0 & 0x400000000L) != 0L)
            return 48;
         if ((active0 & 0x800000000L) != 0L)
            return 33;
         return -1;
      case 3:
         if ((active0 & 0x400000000L) != 0L)
            return 47;
         if ((active0 & 0x800000000L) != 0L)
            return 32;
         return -1;
      case 4:
         if ((active0 & 0x800000000L) != 0L)
            return 31;
         return -1;
      case 5:
         if ((active0 & 0x800000000L) != 0L)
            return 30;
         return -1;
      case 6:
         if ((active0 & 0x800000000L) != 0L)
            return 29;
         return -1;
      case 7:
         if ((active0 & 0x800000000L) != 0L)
            return 28;
         return -1;
      case 8:
         if ((active0 & 0x800000000L) != 0L)
            return 27;
         return -1;
      case 9:
         if ((active0 & 0x800000000L) != 0L)
            return 26;
         return -1;
      case 10:
         if ((active0 & 0x800000000L) != 0L)
            return 25;
         return -1;
      case 11:
         if ((active0 & 0x800000000L) != 0L)
            return 24;
         return -1;
      case 12:
         if ((active0 & 0x800000000L) != 0L)
            return 23;
         return -1;
      case 13:
         if ((active0 & 0x800000000L) != 0L)
            return 22;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_0(0x1fffe00000L);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa2_0(active0, 0x1fffe00000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x1100200000L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      case 74:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x30800000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x82000000L);
      case 87:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0xb2000000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x800800000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x44d400000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x100800000L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x600000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x30000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x42000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0xc000000L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x100800000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x30000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 107:
         return jjMoveStringLiteralDfa6_0(active0, 0xc0000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x10b0000000L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0xc00000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x2800000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L);
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x300000000L);
      case 68:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0xa0000000L);
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x1008000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x1400000L);
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x840000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x402000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0x3000000L);
      case 58:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      case 68:
         return jjMoveStringLiteralDfa9_0(active0, 0xa0000000L);
      case 77:
         return jjMoveStringLiteralDfa9_0(active0, 0x300000000L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x600000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x40800000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(9, 26);
         break;
      case 58:
         return jjMoveStringLiteralDfa10_0(active0, 0xa0000000L);
      case 76:
         return jjMoveStringLiteralDfa10_0(active0, 0x3000000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x300000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L);
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000800000L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L);
      case 119:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(10, 29);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(10, 31);
         return jjMoveStringLiteralDfa11_0(active0, 0x440400000L);
      case 58:
         return jjMoveStringLiteralDfa11_0(active0, 0x1008200000L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000L);
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x3000000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x300000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(11, 21);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(11, 27);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(11, 36);
         break;
      case 58:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000L);
      case 70:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000L);
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x303000000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000L);
      case 104:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000L);
      case 119:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(12, 28);
         break;
      case 68:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x3000000L);
      case 104:
         return jjMoveStringLiteralDfa13_0(active0, 0x300000000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x400400000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa14_0(active0, 0xb00800000L);
      case 58:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x3000000L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x400400000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(14, 30);
         break;
      case 70:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000L);
      case 73:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000L);
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000L);
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0x3000000L);
      case 109:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000L);
      case 119:
         return jjMoveStringLiteralDfa15_0(active0, 0x300000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000L);
      case 58:
         return jjMoveStringLiteralDfa16_0(active0, 0x3000000L);
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x300800000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(16, 24);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(16, 25);
         break;
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000000L);
      case 114:
         return jjMoveStringLiteralDfa17_0(active0, 0x300800000L);
      case 115:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa18_0(active0, 0x400000L);
      case 100:
         return jjMoveStringLiteralDfa18_0(active0, 0x300000000L);
      case 109:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000L);
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x400000000L);
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(18, 22);
         return jjMoveStringLiteralDfa19_0(active0, 0x300000000L);
      case 97:
         return jjMoveStringLiteralDfa19_0(active0, 0x800800000L);
      case 117:
         return jjMoveStringLiteralDfa19_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa20_0(active0, 0x300000000L);
      case 110:
         return jjMoveStringLiteralDfa20_0(active0, 0xc00000000L);
      case 116:
         return jjMoveStringLiteralDfa20_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa21_0(active0, 0x800000L);
      case 99:
         return jjMoveStringLiteralDfa21_0(active0, 0x800000000L);
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0x300000000L);
      case 116:
         return jjMoveStringLiteralDfa21_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(21, 23);
         break;
      case 58:
         return jjMoveStringLiteralDfa22_0(active0, 0x400000000L);
      case 101:
         return jjMoveStringLiteralDfa22_0(active0, 0x800000000L);
      case 117:
         return jjMoveStringLiteralDfa22_0(active0, 0x300000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(22, 34);
         return jjMoveStringLiteralDfa23_0(active0, 0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa23_0(active0, 0x300000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa24_0(active0, 0x800000000L);
      case 116:
         return jjMoveStringLiteralDfa24_0(active0, 0x300000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa25_0(active0, 0x300000000L);
      case 68:
         return jjMoveStringLiteralDfa25_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0);
      return 25;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(25, 32);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(25, 33);
         break;
      case 58:
         return jjMoveStringLiteralDfa26_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0);
}
private int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0);
      return 26;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(26, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(25, active0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x0L, 0x8000000000000000L
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x0L, 0x4000000000000000L
};
static final long[] jjbitVec2 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 51;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fff30100000000L & l) != 0L)
                  {
                     if (kind > 4)
                        kind = 4;
                     jjCheckNAdd(4);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                  }
                  else if (curChar == 35)
                     jjAddStates(0, 2);
                  if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 3)
                        kind = 3;
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 35:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 49;
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 41;
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 0:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 3:
                  if ((0x100000200L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 4:
                  if ((0x7fff30100000000L & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(4);
                  break;
               case 6:
                  if (curChar == 35)
                     jjAddStates(0, 2);
                  break;
               case 8:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 9:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x2400L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 14:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 23:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 36:
                  if (curChar != 58)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(37);
                  break;
               case 42:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar != 58)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(44);
                  break;
               case 50:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 4:
                  if ((0x7fffffebffffffeL & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(4);
                  break;
               case 34:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 48;
                  else if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 7:
                  if (curChar == 101)
                     jjAddStates(3, 4);
                  break;
               case 11:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 12:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 15:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 24:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 37:
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 38:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 39:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 44:
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 45:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 46:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 5)
                     kind = 5;
                  break;
               case 37:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 44:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 44;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 51 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(4, 0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjCheckNAdd(3);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar != 10)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  kind = 20;
                  jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 3:
                  kind = 20;
                  jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 3:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20000L) != 0L)
            return 1;
         return -1;
      case 1:
         if ((active0 & 0x20000L) != 0L)
            return 29;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_1(0x20000L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa2_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa3_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa4_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa5_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 71:
         return jjMoveStringLiteralDfa7_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa8_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(6, active0);
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa9_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0);
}
private int jjMoveStringLiteralDfa9_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa10_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0);
}
private int jjMoveStringLiteralDfa10_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa11_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(9, active0);
}
private int jjMoveStringLiteralDfa11_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa12_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(10, active0);
}
private int jjMoveStringLiteralDfa12_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa13_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(11, active0);
}
private int jjMoveStringLiteralDfa13_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa14_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(12, active0);
}
private int jjMoveStringLiteralDfa14_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa15_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(13, active0);
}
private int jjMoveStringLiteralDfa15_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa16_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(14, active0);
}
private int jjMoveStringLiteralDfa16_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa17_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(15, active0);
}
private int jjMoveStringLiteralDfa17_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa18_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(16, active0);
}
private int jjMoveStringLiteralDfa18_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa19_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(17, active0);
}
private int jjMoveStringLiteralDfa19_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa20_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(18, active0);
}
private int jjMoveStringLiteralDfa20_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 119:
         return jjMoveStringLiteralDfa21_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(19, active0);
}
private int jjMoveStringLiteralDfa21_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa22_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(20, active0);
}
private int jjMoveStringLiteralDfa22_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa23_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(21, active0);
}
private int jjMoveStringLiteralDfa23_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(21, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa24_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(22, active0);
}
private int jjMoveStringLiteralDfa24_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(22, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa25_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(23, active0);
}
private int jjMoveStringLiteralDfa25_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(23, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(24, active0);
      return 25;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa26_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(24, active0);
}
private int jjMoveStringLiteralDfa26_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(24, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(25, active0);
      return 26;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa27_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(25, active0);
}
private int jjMoveStringLiteralDfa27_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(25, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(26, active0);
      return 27;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa28_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(26, active0);
}
private int jjMoveStringLiteralDfa28_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(26, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(27, active0);
      return 28;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa29_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(27, active0);
}
private int jjMoveStringLiteralDfa29_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(27, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(28, active0);
      return 29;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa30_1(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_1(28, active0);
}
private int jjMoveStringLiteralDfa30_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(28, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(29, active0);
      return 30;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(30, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_1(29, active0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 118;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 1:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 116;
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 108;
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 100;
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 85;
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 67;
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 50;
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 29;
                  if (curChar == 32)
                     jjCheckNAdd(7);
                  if (curChar == 32)
                     jjCheckNAdd(2);
                  break;
               case 0:
                  if (curChar == 35)
                     jjAddStates(8, 16);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 3:
                  if (curChar == 10 && kind > 8)
                     kind = 8;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x2400L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 6:
                  if (curChar == 32)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 58)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x7fff30100000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 58)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 12:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 13:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0x2400L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 15:
                  if (curChar == 32)
                     jjCheckNAddStates(20, 22);
                  break;
               case 16:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 17:
                  if (curChar == 10 && kind > 10)
                     kind = 10;
                  break;
               case 18:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x2400L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 20:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 25:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 30:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 32)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x7fff30100000000L & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 33:
                  if (curChar == 10 && kind > 11)
                     kind = 11;
                  break;
               case 34:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x2400L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 36:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 43:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 51:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 32)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x7fff30100000000L & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 54:
                  if (curChar == 10 && kind > 12)
                     kind = 12;
                  break;
               case 55:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if ((0x2400L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 57:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 62:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 68:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 32)
                     jjCheckNAdd(70);
                  break;
               case 70:
                  if ((0x7fff30100000000L & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 71:
                  if (curChar == 10 && kind > 13)
                     kind = 13;
                  break;
               case 72:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x2400L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 74:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 80:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 86:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 58)
                     jjCheckNAddStates(32, 34);
                  break;
               case 88:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(32, 34);
                  break;
               case 89:
                  if (curChar == 10 && kind > 14)
                     kind = 14;
                  break;
               case 90:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if ((0x2400L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 101:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 58)
                     jjAddStates(35, 36);
                  break;
               case 103:
                  if (curChar == 10 && kind > 15)
                     kind = 15;
                  break;
               case 104:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if ((0x2400L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 109:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 58)
                     jjAddStates(37, 38);
                  break;
               case 111:
                  if (curChar == 10 && kind > 16)
                     kind = 16;
                  break;
               case 112:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if ((0x2400L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 117:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 29:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 115;
                  else if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 107;
                  else if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 99;
                  else if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 84;
                  else if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 28;
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 66;
                  else if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 9:
                  if ((0x7fffffebffffffeL & l) != 0L)
                     jjAddStates(3, 4);
                  break;
               case 16:
                  jjAddStates(20, 22);
                  break;
               case 21:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 26:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 32:
                  if ((0x7fffffebffffffeL & l) != 0L)
                     jjAddStates(23, 25);
                  break;
               case 37:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 44:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 53:
                  if ((0x7fffffebffffffeL & l) != 0L)
                     jjAddStates(26, 28);
                  break;
               case 58:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 63:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 70:
                  if ((0x7fffffebffffffeL & l) != 0L)
                     jjAddStates(29, 31);
                  break;
               case 75:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 81:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 88:
                  jjAddStates(32, 34);
                  break;
               case 92:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 93:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 106:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 107:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 114:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 115:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(20, 22);
                  break;
               case 88:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(32, 34);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 118 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   35, 42, 50, 9, 10, 2, 4, 5, 1, 6, 30, 51, 68, 86, 101, 109, 
   117, 11, 13, 14, 16, 18, 19, 32, 34, 35, 53, 55, 56, 70, 72, 73, 
   88, 90, 91, 104, 105, 112, 113, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 254:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec1[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      default :
         if ((jjbitVec2[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, 
"\43\40\105\116\104\40\107\154\157\142\141\154\123\151\147\150\164\40\104\157\167\156\154\157\141\144\40\106\151\154\145", null, null, null, "\43\40\105\156\143\157\144\151\156\147\72\40", 
"\43\40\104\157\143\165\155\145\156\164\40\106\157\162\155\141\164\72\40", 
"\43\40\120\154\141\143\145\150\157\154\144\145\162\40\106\157\162\155\141\164\72\40", "\43\40\123\157\165\162\143\145\40\114\157\143\141\154\145\72\40", 
"\43\40\124\141\162\147\145\164\40\114\157\143\141\154\145\72\40", "\43\40\112\157\142\40\111\104\72\40", 
"\43\40\112\157\142\40\116\141\155\145\72\40", "\43\40\120\141\147\145\40\116\141\155\145\72\40", 
"\43\40\120\141\147\145\40\111\104\72\40", "\43\40\127\157\162\153\146\154\157\167\40\111\104\72\40", 
"\43\40\124\141\163\153\40\111\104\72\40", 
"\43\40\105\170\141\143\164\40\115\141\164\143\150\40\167\157\162\144\40\143\157\165\156\164\72\40", 
"\43\40\106\165\172\172\171\40\115\141\164\143\150\40\167\157\162\144\40\143\157\165\156\164\72\40", 
"\43\40\116\157\40\115\141\164\143\150\40\167\157\162\144\40\143\157\165\156\164\72\40", 
"\43\40\107\154\157\142\141\154\123\151\147\150\164\40\111\156\163\164\141\156\143\145\40\111\104\72\40", "\43\40\105\144\151\164\40\141\154\154\72\40", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "START_LINE",
   "SEGMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 0, 2, 1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1ffffbffffL, 
};
static final long[] jjtoMore = {
   0x40000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[118];
private final int[] jjstateSet = new int[236];
protected char curChar;
/** Constructor. */
public AmbassadorDwUpParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public AmbassadorDwUpParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 118; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 18)
         {
            jjmatchedKind = 18;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
