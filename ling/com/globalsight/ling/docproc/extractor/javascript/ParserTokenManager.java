/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package com.globalsight.ling.docproc.extractor.javascript;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x40000000L) != 0L)
            return 12;
         if ((active1 & 0x4002000102000000L) != 0L)
            return 91;
         if ((active0 & 0x7c0fffff83fffc00L) != 0L || (active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 76;
            return 123;
         }
         if ((active0 & 0x7c000000L) != 0L)
         {
            jjmatchedKind = 76;
            return 59;
         }
         if ((active1 & 0x200100000000000L) != 0L)
            return 115;
         if ((active1 & 0x80050000000000L) != 0L)
            return 5;
         if ((active0 & 0x3f0000000000000L) != 0L)
         {
            jjmatchedKind = 76;
            return 55;
         }
         return -1;
      case 1:
         if ((active0 & 0x180000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 1;
            }
            return 54;
         }
         if ((active0 & 0x7900c00000L) != 0L)
            return 123;
         if ((active1 & 0x10000000000L) != 0L)
            return 124;
         if ((active0 & 0x7e7fff86ff3ffc00L) != 0L || (active1 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 1;
            }
            return 123;
         }
         return -1;
      case 2:
         if ((active0 & 0x500026020000000L) != 0L)
            return 123;
         if ((active0 & 0x7afffd96dfbffc00L) != 0L || (active1 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 2;
            }
            return 123;
         }
         return -1;
      case 3:
         if ((active0 & 0x32effd565ebe9c00L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
            return 123;
         }
         if ((active0 & 0x4810008081016000L) != 0L || (active1 & 0x100L) != 0L)
            return 123;
         return -1;
      case 4:
         if ((active0 & 0x206280001c069000L) != 0L)
            return 123;
         if ((active0 & 0x128d7d5642b80c00L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 4;
            }
            return 123;
         }
         return -1;
      case 5:
         if ((active0 & 0x245610400a00000L) != 0L)
            return 123;
         if ((active0 & 0x10881c524a180c00L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 5;
            return 123;
         }
         return -1;
      case 6:
         if ((active0 & 0x1088105240080400L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 6;
            return 123;
         }
         if ((active0 & 0xc000a100800L) != 0L)
            return 123;
         return -1;
      case 7:
         if ((active0 & 0x1000000040080400L) != 0L)
            return 123;
         if ((active0 & 0x88105200000000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 7;
            return 123;
         }
         return -1;
      case 8:
         if ((active0 & 0x80104000000000L) != 0L)
            return 123;
         if ((active0 & 0x8001200000000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 8;
            return 123;
         }
         return -1;
      case 9:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 9;
            return 123;
         }
         if ((active0 & 0x1200000000L) != 0L)
            return 123;
         return -1;
      case 10:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 10;
            return 123;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x1400000000L, 0x0L);
      case 37:
         jjmatchedKind = 112;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x2000000000000000L, 0x0L);
      case 38:
         jjmatchedKind = 109;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x420004000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 79);
      case 41:
         return jjStopAtPos(0, 80);
      case 42:
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x100000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x40008000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 86);
      case 45:
         jjmatchedKind = 106;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x80010000000000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_1(0, 94, 12);
      case 47:
         jjmatchedKind = 108;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x200000000000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 93);
      case 59:
         return jjStopAtPos(0, 85);
      case 60:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x4002000100000000L, 0x0L);
      case 61:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x880000000L, 0x0L);
      case 62:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x800c000200000000L, 0x1L);
      case 63:
         return jjStopAtPos(0, 92);
      case 91:
         return jjStopAtPos(0, 83);
      case 93:
         return jjStopAtPos(0, 84);
      case 94:
         jjmatchedKind = 111;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x1000000000000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_1(0x400L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_1(0x3800L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0xfc000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0xf00000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x3000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x7c000000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_1(0x80000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x7f00000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x8000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x30000000000L, 0x100L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_1(0x3c0000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x400000000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0xf800000000000L, 0x0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x3f0000000000000L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_1(0x1c00000000000000L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x6000000000000000L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 81);
      case 124:
         jjmatchedKind = 110;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x810002000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 82);
      case 126:
         return jjStopAtPos(0, 91);
      default :
         return jjMoveNfa_1(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 43:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         break;
      case 45:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 104, 124);
         break;
      case 60:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 61:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 123);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 124);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 125);
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x1800000000L, active2, 0L);
      case 62:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x8008000000000000L, active2, 0x1L);
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x40005000000c000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_1(active0, 0x400L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x420000300000L, active1, 0L, active2, 0L);
      case 102:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(1, 32, 123);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0x2070800000010000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x400000000c000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x11020000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0x600000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x7000000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x18000080a08c0800L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0x180180000001000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x2200040000000L, active1, 0x100L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_1(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_1(active0, 0x208000000002000L, active1, 0L, active2, 0L);
      case 124:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(2, 99);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 100);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(2, 116);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(2, 117);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(2, 126);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(2, 127);
         break;
      case 62:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0x1L);
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x81000000030000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_1(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_1(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x1000L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_1(active0, 0x100000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x2814080000000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x1000000000200000L, active1, 0x100L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x800804c0c0000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x900010000800L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0x202000600000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(2, 29, 123);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 58, 123);
         return jjMoveStringLiteralDfa3_1(active0, 0x60000000000000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x1001004400L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x400041408200a000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x800000L, active1, 0L, active2, 0L);
      case 119:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 41, 123);
         break;
      case 121:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 56, 123);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(3, 128);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x100000001c101000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_1(active0, 0x800000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000040008000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 59, 123);
         break;
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(3, 13, 123);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_1(3, 14, 123);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_1(3, 24, 123);
         return jjMoveStringLiteralDfa4_1(active0, 0x202004002200000L, active1, 0L, active2, 0L);
      case 103:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 39, 123);
         break;
      case 104:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 62, 123);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_1(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(3, 72, 123);
         return jjMoveStringLiteralDfa4_1(active0, 0x2000200200000800L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_1(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(3, 31, 123);
         return jjMoveStringLiteralDfa4_1(active0, 0x60000400000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(3, 16, 123);
         return jjMoveStringLiteralDfa4_1(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 52, 123);
         return jjMoveStringLiteralDfa4_1(active0, 0x60000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0x5101000080400L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_1(active0, 0x80000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, 0L, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0xc1000000000L);
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0x4000000000000L);
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 61, 123);
         return jjMoveStringLiteralDfa5_1(active0, 0x100200000800L);
      case 104:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(4, 15, 123);
         return jjMoveStringLiteralDfa5_1(active0, 0x8000000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x1200000080000L);
      case 107:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(4, 12, 123);
         break;
      case 108:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x8800000L);
      case 110:
         return jjMoveStringLiteralDfa5_1(active0, 0x2000000L);
      case 111:
         return jjMoveStringLiteralDfa5_1(active0, 0x200000000000000L);
      case 114:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 49, 123);
         return jjMoveStringLiteralDfa5_1(active0, 0x404400000400L);
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(4, 17, 123);
         return jjMoveStringLiteralDfa5_1(active0, 0x80000000000000L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(4, 18, 123);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(4, 28, 123);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 47, 123);
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000040200000L);
      case 117:
         return jjMoveStringLiteralDfa5_1(active0, 0x100000L);
      case 118:
         return jjMoveStringLiteralDfa5_1(active0, 0x10000000000L);
      case 119:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, 0L, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0xc00L);
      case 99:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 45, 123);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 48, 123);
         return jjMoveStringLiteralDfa6_1(active0, 0x100000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_1(active0, 0x2000000L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(5, 21, 123);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(5, 23, 123);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 40, 123);
         break;
      case 102:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 57, 123);
         return jjMoveStringLiteralDfa6_1(active0, 0x4000000000L);
      case 103:
         return jjMoveStringLiteralDfa6_1(active0, 0x40000000000L);
      case 104:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 50, 123);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0x1080000040000000L);
      case 108:
         return jjMoveStringLiteralDfa6_1(active0, 0x8100000L);
      case 109:
         return jjMoveStringLiteralDfa6_1(active0, 0x200000000L);
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 46, 123);
         return jjMoveStringLiteralDfa6_1(active0, 0x1000080000L);
      case 114:
         return jjMoveStringLiteralDfa6_1(active0, 0x8000000000000L);
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 54, 123);
         break;
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(5, 34, 123);
         return jjMoveStringLiteralDfa6_1(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, 0L, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_1(active0, 0x4000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_1(active0, 0x1000000400L);
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 42, 123);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 43, 123);
         return jjMoveStringLiteralDfa7_1(active0, 0x80000200000000L);
      case 108:
         return jjMoveStringLiteralDfa7_1(active0, 0x1000000000000000L);
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(6, 11, 123);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_1(active0, 0x8000040000000L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(6, 25, 123);
         break;
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(6, 20, 123);
         return jjMoveStringLiteralDfa7_1(active0, 0x100000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_1(active0, 0x80000L);
      case 121:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(6, 27, 123);
         break;
      default :
         break;
   }
   return jjStartNfa_1(5, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, 0L, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_1(active0, 0x4000000000L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(7, 19, 123);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_1(7, 60, 123);
         return jjMoveStringLiteralDfa8_1(active0, 0x101000000000L);
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(7, 30, 123);
         return jjMoveStringLiteralDfa8_1(active0, 0x88000200000000L);
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(7, 10, 123);
         break;
      default :
         break;
   }
   return jjStartNfa_1(6, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(6, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 44, 123);
         break;
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 38, 123);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_1(active0, 0x8000000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_1(active0, 0x1000000000L);
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 55, 123);
         return jjMoveStringLiteralDfa9_1(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa9_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(7, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(9, 36, 123);
         break;
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(9, 33, 123);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_1(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa10_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_1(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(9, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa11_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_1(11, 51, 123);
         break;
      default :
         break;
   }
   return jjStartNfa_1(10, active0, 0L, 0L);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x100000000L, 0x0L
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x0L, 0x8000000000000000L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0x4000000000000000L
};
static final long[] jjbitVec3 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 123;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 54:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddTwoStates(65, 70);
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 59:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddTwoStates(65, 70);
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 123:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddTwoStates(65, 70);
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 124:
                  if (curChar == 62)
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 91:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 110;
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 103;
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 106;
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 98;
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddStates(0, 3);
                  }
                  else if ((0x104001200L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAddTwoStates(1, 3);
                  }
                  else if (curChar == 47)
                     jjAddStates(4, 6);
                  else if (curChar == 60)
                     jjAddStates(7, 11);
                  else if (curChar == 36)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddTwoStates(65, 70);
                  }
                  else if (curChar == 35)
                     jjCheckNAdd(62);
                  else if (curChar == 39)
                     jjCheckNAddStates(12, 14);
                  else if (curChar == 34)
                     jjCheckNAddStates(15, 18);
                  else if (curChar == 46)
                     jjCheckNAdd(12);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAdd(10);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(84, 86);
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 55:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddTwoStates(65, 70);
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 115:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(118, 119);
                  else if (curChar == 47)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(102);
                  }
                  if (curChar == 47)
                     jjCheckNAddStates(19, 21);
                  break;
               case 0:
                  if ((0x104001200L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddTwoStates(1, 3);
                  break;
               case 2:
                  if (curChar != 10)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddTwoStates(1, 3);
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 62 && kind > 5)
                     kind = 5;
                  break;
               case 8:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 9:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(10);
                  break;
               case 11:
                  if (curChar == 46)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 14:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(15);
                  break;
               case 16:
                  if (curChar == 34)
                     jjCheckNAddStates(15, 18);
                  break;
               case 17:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 19:
                  if ((0xfc00ffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 20:
                  if (curChar == 37)
                     jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(21, 25);
                  break;
               case 22:
                  if (curChar == 62)
                     jjCheckNAddStates(15, 18);
                  break;
               case 23:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 24:
                  if (curChar == 34 && kind > 69)
                     kind = 69;
                  break;
               case 25:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 26);
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 28:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               case 31:
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 37:
                  if (curChar == 39)
                     jjCheckNAddStates(12, 14);
                  break;
               case 38:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 40:
                  if ((0xfc00ffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 41:
                  if (curChar == 39 && kind > 69)
                     kind = 69;
                  break;
               case 42:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(27, 30);
                  break;
               case 43:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 44:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(43);
                  break;
               case 47:
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 61:
                  if (curChar == 35)
                     jjCheckNAdd(62);
                  break;
               case 62:
                  if ((0xfffffff7ffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 63:
                  if (curChar == 35 && kind > 73)
                     kind = 73;
                  break;
               case 64:
                  if (curChar != 36)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(65, 70);
                  break;
               case 65:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(65, 70);
                  break;
               case 66:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(67, 71);
                  break;
               case 67:
                  if ((0xbfffffdfffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(67, 71);
                  break;
               case 68:
                  if (curChar != 62)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(65, 70);
                  break;
               case 69:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 70:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
               case 112:
                  if (curChar == 37)
                     jjCheckNAdd(68);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddStates(0, 3);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(73, 74);
                  break;
               case 74:
                  if (curChar != 46)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(75, 76);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(75, 76);
                  break;
               case 77:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(78);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(78);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(79, 80);
                  break;
               case 81:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(82);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(82);
                  break;
               case 83:
                  if (curChar != 48)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(84, 86);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 86:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(86);
                  break;
               case 87:
                  if (curChar == 60)
                     jjAddStates(7, 11);
                  break;
               case 88:
               case 89:
                  if (curChar != 45)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(89);
                  break;
               case 90:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 92:
               case 93:
                  if (curChar == 45)
                     jjCheckNAddStates(31, 34);
                  break;
               case 94:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 95:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 96:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 97:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 99:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
               case 101:
                  if (curChar != 45)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(101, 102);
                  break;
               case 102:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(102);
                  break;
               case 103:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 104:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 106:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(107, 109);
                  break;
               case 107:
                  if ((0xffffffdfffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(107, 109);
                  break;
               case 108:
                  if (curChar == 62 && kind > 9)
                     kind = 9;
                  break;
               case 109:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(111, 112);
                  break;
               case 111:
                  if ((0xbfffffdfffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(111, 112);
                  break;
               case 113:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 114:
                  if (curChar == 47)
                     jjAddStates(4, 6);
                  break;
               case 116:
                  if (curChar != 47)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(102);
                  break;
               case 117:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(118, 119);
                  break;
               case 118:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(118, 119);
                  break;
               case 119:
                  if (curChar == 42)
                     jjCheckNAddStates(35, 37);
                  break;
               case 120:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(121, 119);
                  break;
               case 121:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(121, 119);
                  break;
               case 122:
                  if (curChar == 47 && kind > 8)
                     kind = 8;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 54:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddTwoStates(65, 70);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(53);
                  break;
               case 59:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddTwoStates(65, 70);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 123:
               case 65:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(65, 70);
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddTwoStates(65, 70);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 59;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddTwoStates(65, 70);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 13:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 17:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 18:
                  if (curChar == 92)
                     jjAddStates(40, 44);
                  break;
               case 19:
                  if ((0xfedfffffffffffffL & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 21:
                  jjAddStates(45, 46);
                  break;
               case 30:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
               case 36:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 33:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 39:
                  if (curChar == 92)
                     jjAddStates(47, 51);
                  break;
               case 40:
                  if ((0xfedfffffffffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 46:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
               case 52:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 49:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 53:
                  if (curChar == 101 && kind > 71)
                     kind = 71;
                  break;
               case 56:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 115)
                     jjCheckNAdd(53);
                  break;
               case 58:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 60:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 62:
                  jjAddStates(52, 53);
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(65, 70);
                  break;
               case 67:
                  jjAddStates(54, 55);
                  break;
               case 76:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               case 80:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(58, 59);
                  break;
               case 84:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(85);
                  break;
               case 85:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(85);
                  break;
               case 94:
                  jjAddStates(19, 21);
                  break;
               case 102:
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 106:
               case 107:
                  jjCheckNAddTwoStates(107, 109);
                  break;
               case 111:
                  jjAddStates(60, 61);
                  break;
               case 118:
                  jjCheckNAddTwoStates(118, 119);
                  break;
               case 120:
               case 121:
                  jjCheckNAddTwoStates(121, 119);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 54:
               case 65:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(65, 70);
                  break;
               case 59:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(65, 70);
                  break;
               case 123:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(65, 70);
                  break;
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 3)
                        kind = 3;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddTwoStates(65, 70);
                  }
                  break;
               case 55:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(65, 70);
                  break;
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 17:
               case 19:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(15, 18);
                  break;
               case 21:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(45, 46);
                  break;
               case 38:
               case 40:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(12, 14);
                  break;
               case 62:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(52, 53);
                  break;
               case 64:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(65, 70);
                  break;
               case 67:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(54, 55);
                  break;
               case 94:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(19, 21);
                  break;
               case 102:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 106:
               case 107:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(107, 109);
                  break;
               case 111:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(60, 61);
                  break;
               case 118:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(118, 119);
                  break;
               case 120:
               case 121:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(121, 119);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 123 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x40000000L) != 0L)
            return 12;
         if ((active1 & 0x4002000102000000L) != 0L)
            return 97;
         if ((active1 & 0x200100000000000L) != 0L)
            return 121;
         if ((active0 & 0x3f0000000000000L) != 0L)
         {
            jjmatchedKind = 76;
            return 55;
         }
         if ((active1 & 0x80050000000000L) != 0L)
            return 5;
         if ((active0 & 0x7c0fffff83fffc00L) != 0L || (active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 76;
            return 129;
         }
         if ((active0 & 0x7c000000L) != 0L)
         {
            jjmatchedKind = 76;
            return 59;
         }
         return -1;
      case 1:
         if ((active0 & 0x7e7fff86ff3ffc00L) != 0L || (active1 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 1;
            }
            return 129;
         }
         if ((active1 & 0x10000000000L) != 0L)
            return 130;
         if ((active1 & 0x200000000000000L) != 0L)
            return 131;
         if ((active0 & 0x7900c00000L) != 0L)
            return 129;
         if ((active0 & 0x180000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 1;
            }
            return 54;
         }
         return -1;
      case 2:
         if ((active0 & 0x7afffd96dfbffc00L) != 0L || (active1 & 0x100L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 2;
            }
            return 129;
         }
         if ((active0 & 0x500026020000000L) != 0L)
            return 129;
         return -1;
      case 3:
         if ((active0 & 0x32effd565ebe9c00L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
            return 129;
         }
         if ((active0 & 0x4810008081016000L) != 0L || (active1 & 0x100L) != 0L)
            return 129;
         return -1;
      case 4:
         if ((active0 & 0x128d7d5642b80c00L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 76;
               jjmatchedPos = 4;
            }
            return 129;
         }
         if ((active0 & 0x206280001c069000L) != 0L)
            return 129;
         return -1;
      case 5:
         if ((active0 & 0x10881c524a180c00L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 5;
            return 129;
         }
         if ((active0 & 0x245610400a00000L) != 0L)
            return 129;
         return -1;
      case 6:
         if ((active0 & 0x1088105240080400L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 6;
            return 129;
         }
         if ((active0 & 0xc000a100800L) != 0L)
            return 129;
         return -1;
      case 7:
         if ((active0 & 0x88105200000000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 7;
            return 129;
         }
         if ((active0 & 0x1000000040080400L) != 0L)
            return 129;
         return -1;
      case 8:
         if ((active0 & 0x8001200000000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 8;
            return 129;
         }
         if ((active0 & 0x80104000000000L) != 0L)
            return 129;
         return -1;
      case 9:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 9;
            return 129;
         }
         if ((active0 & 0x1200000000L) != 0L)
            return 129;
         return -1;
      case 10:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 10;
            return 129;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1400000000L, 0x0L);
      case 37:
         jjmatchedKind = 112;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000000L, 0x0L);
      case 38:
         jjmatchedKind = 109;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x420004000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 79);
      case 41:
         return jjStopAtPos(0, 80);
      case 42:
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000000L, 0x0L);
      case 43:
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40008000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 86);
      case 45:
         jjmatchedKind = 106;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80010000000000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 94, 12);
      case 47:
         jjmatchedKind = 108;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 93);
      case 59:
         return jjStopAtPos(0, 85);
      case 60:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4002000100000000L, 0x0L);
      case 61:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x880000000L, 0x0L);
      case 62:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800c000200000000L, 0x1L);
      case 63:
         return jjStopAtPos(0, 92);
      case 91:
         return jjStopAtPos(0, 83);
      case 93:
         return jjStopAtPos(0, 84);
      case 94:
         jjmatchedKind = 111;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x3800L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xfc000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xf00000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x3000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x7c000000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x7f00000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x30000000000L, 0x100L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x3c0000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xf800000000000L, 0x0L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x3f0000000000000L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1c00000000000000L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x6000000000000000L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 81);
      case 124:
         jjmatchedKind = 110;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x810002000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 82);
      case 126:
         return jjStopAtPos(0, 91);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 43:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         break;
      case 45:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 104, 130);
         break;
      case 60:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 61:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 121, 131);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 123);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 124);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 125);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1800000000L, active2, 0L);
      case 62:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8008000000000000L, active2, 0x1L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40005000000c000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x420000300000L, active1, 0L, active2, 0L);
      case 102:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 32, 129);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2070800000010000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000c000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x11020000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x7000000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x18000080a08c0800L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x180180000001000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2200040000000L, active1, 0x100L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x208000000002000L, active1, 0L, active2, 0L);
      case 124:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(2, 99);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 100);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(2, 116);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(2, 117);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(2, 126);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(2, 127);
         break;
      case 62:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x81000000030000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2814080000000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000200000L, active1, 0x100L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800804c0c0000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x900010000800L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x202000600000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 129);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 58, 129);
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000000000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1001004400L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x400041408200a000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L, active2, 0L);
      case 119:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 129);
         break;
      case 121:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 56, 129);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(3, 128);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000001c101000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000040008000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 129);
         break;
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 129);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 129);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 129);
         return jjMoveStringLiteralDfa4_0(active0, 0x202004002200000L, active1, 0L, active2, 0L);
      case 103:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 129);
         break;
      case 104:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 129);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 129);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000200200000800L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 129);
         return jjMoveStringLiteralDfa4_0(active0, 0x60000400000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 129);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 129);
         return jjMoveStringLiteralDfa4_0(active0, 0x60000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x5101000080400L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xc1000000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L);
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 129);
         return jjMoveStringLiteralDfa5_0(active0, 0x100200000800L);
      case 104:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 129);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1200000080000L);
      case 107:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 129);
         break;
      case 108:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8800000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L);
      case 114:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 129);
         return jjMoveStringLiteralDfa5_0(active0, 0x404400000400L);
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 129);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 129);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 129);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 129);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000040200000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 119:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0xc00L);
      case 99:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 129);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 129);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 129);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 129);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 129);
         break;
      case 102:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 129);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L);
      case 104:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 129);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1080000040000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x8100000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 129);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000080000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L);
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 129);
         break;
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 129);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000400L);
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 129);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 129);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000200000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L);
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 129);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000040000000L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 129);
         break;
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 129);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 121:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 129);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 129);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 129);
         return jjMoveStringLiteralDfa8_0(active0, 0x101000000000L);
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 30, 129);
         return jjMoveStringLiteralDfa8_0(active0, 0x88000200000000L);
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 10, 129);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 44, 129);
         break;
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 129);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 55, 129);
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 36, 129);
         break;
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(9, 33, 129);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 51, 129);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 129;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 131:
                  if ((0xffff7fffffffdbffL & l) != 0L)
                     jjCheckNAddStates(62, 64);
                  else if (curChar == 47)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjstateSet[jjnewStateCnt++] = 69;
                  }
                  break;
               case 54:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddTwoStates(71, 76);
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 129:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddTwoStates(71, 76);
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddStates(65, 68);
                  }
                  else if ((0x104001200L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAddTwoStates(1, 3);
                  }
                  else if (curChar == 47)
                     jjAddStates(69, 71);
                  else if (curChar == 60)
                     jjAddStates(72, 76);
                  else if (curChar == 36)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddTwoStates(71, 76);
                  }
                  else if (curChar == 35)
                     jjCheckNAdd(62);
                  else if (curChar == 39)
                     jjCheckNAddStates(12, 14);
                  else if (curChar == 34)
                     jjCheckNAddStates(15, 18);
                  else if (curChar == 46)
                     jjCheckNAdd(12);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAdd(10);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(90, 92);
                  }
                  else if (curChar == 47)
                     jjCheckNAddTwoStates(65, 67);
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 121:
                  if ((0xffff7fffffffdbffL & l) != 0L)
                     jjCheckNAddStates(62, 64);
                  else if (curChar == 47)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(108);
                  }
                  if (curChar == 42)
                     jjCheckNAddTwoStates(124, 125);
                  else if (curChar == 47)
                     jjCheckNAddStates(77, 79);
                  break;
               case 59:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddTwoStates(71, 76);
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 55:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddTwoStates(71, 76);
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 130:
                  if (curChar == 62)
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 97:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 116;
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 109;
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 112;
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 104;
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 0:
                  if ((0x104001200L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddTwoStates(1, 3);
                  break;
               case 2:
                  if (curChar != 10)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddTwoStates(1, 3);
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 62 && kind > 5)
                     kind = 5;
                  break;
               case 8:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 9:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(10);
                  break;
               case 11:
                  if (curChar == 46)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 14:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(15);
                  break;
               case 16:
                  if (curChar == 34)
                     jjCheckNAddStates(15, 18);
                  break;
               case 17:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 19:
                  if ((0xfc00ffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 20:
                  if (curChar == 37)
                     jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(21, 25);
                  break;
               case 22:
                  if (curChar == 62)
                     jjCheckNAddStates(15, 18);
                  break;
               case 23:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 24:
                  if (curChar == 34 && kind > 69)
                     kind = 69;
                  break;
               case 25:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 26);
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 28:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               case 31:
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 37:
                  if (curChar == 39)
                     jjCheckNAddStates(12, 14);
                  break;
               case 38:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 40:
                  if ((0xfc00ffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 41:
                  if (curChar == 39 && kind > 69)
                     kind = 69;
                  break;
               case 42:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(27, 30);
                  break;
               case 43:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 44:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(43);
                  break;
               case 47:
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 61:
                  if (curChar == 35)
                     jjCheckNAdd(62);
                  break;
               case 62:
                  if ((0xfffffff7ffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 63:
                  if (curChar == 35 && kind > 73)
                     kind = 73;
                  break;
               case 64:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(65, 67);
                  break;
               case 65:
                  if ((0xffff7fffffffdbffL & l) != 0L)
                     jjCheckNAddStates(62, 64);
                  break;
               case 66:
                  if (curChar == 47)
                     jjCheckNAddStates(62, 64);
                  break;
               case 68:
                  if (curChar != 47)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 70:
                  if (curChar != 36)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(71, 76);
                  break;
               case 71:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(71, 76);
                  break;
               case 72:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(73, 77);
                  break;
               case 73:
                  if ((0xbfffffdfffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(73, 77);
                  break;
               case 74:
                  if (curChar != 62)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(71, 76);
                  break;
               case 75:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 76:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
               case 118:
                  if (curChar == 37)
                     jjCheckNAdd(74);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddStates(65, 68);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(79, 80);
                  break;
               case 80:
                  if (curChar != 46)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(81, 82);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(81, 82);
                  break;
               case 83:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(84);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(84);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(85, 86);
                  break;
               case 87:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(88);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(88);
                  break;
               case 89:
                  if (curChar != 48)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(90, 92);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 92:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(92);
                  break;
               case 93:
                  if (curChar == 60)
                     jjAddStates(72, 76);
                  break;
               case 94:
               case 95:
                  if (curChar != 45)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(95);
                  break;
               case 96:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 98:
               case 99:
                  if (curChar == 45)
                     jjCheckNAddStates(80, 83);
                  break;
               case 100:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(77, 79);
                  break;
               case 101:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 102:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 103:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 105:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
               case 107:
                  if (curChar != 45)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(107, 108);
                  break;
               case 108:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(108);
                  break;
               case 109:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 110:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(113, 115);
                  break;
               case 113:
                  if ((0xffffffdfffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(113, 115);
                  break;
               case 114:
                  if (curChar == 62 && kind > 9)
                     kind = 9;
                  break;
               case 115:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(117, 118);
                  break;
               case 117:
                  if ((0xbfffffdfffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(117, 118);
                  break;
               case 119:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 120:
                  if (curChar == 47)
                     jjAddStates(69, 71);
                  break;
               case 122:
                  if (curChar != 47)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(108);
                  break;
               case 123:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(124, 125);
                  break;
               case 124:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(124, 125);
                  break;
               case 125:
                  if (curChar == 42)
                     jjCheckNAddStates(84, 86);
                  break;
               case 126:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(127, 125);
                  break;
               case 127:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(127, 125);
                  break;
               case 128:
                  if (curChar == 47 && kind > 8)
                     kind = 8;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 131:
                  jjCheckNAddStates(62, 64);
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 54:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddTwoStates(71, 76);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(53);
                  break;
               case 129:
               case 71:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(71, 76);
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddTwoStates(71, 76);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 59;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 121:
                  jjCheckNAddStates(62, 64);
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 59:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddTwoStates(71, 76);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 55:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddTwoStates(71, 76);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 13:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 17:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 18:
                  if (curChar == 92)
                     jjAddStates(40, 44);
                  break;
               case 19:
                  if ((0xfedfffffffffffffL & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 21:
                  jjAddStates(45, 46);
                  break;
               case 30:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
               case 36:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 33:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 39:
                  if (curChar == 92)
                     jjAddStates(47, 51);
                  break;
               case 40:
                  if ((0xfedfffffffffffffL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 46:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
               case 52:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 49:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 53:
                  if (curChar == 101 && kind > 71)
                     kind = 71;
                  break;
               case 56:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 115)
                     jjCheckNAdd(53);
                  break;
               case 58:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 60:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 62:
                  jjAddStates(52, 53);
                  break;
               case 65:
                  jjCheckNAddStates(62, 64);
                  break;
               case 67:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 69:
                  if ((0x8228000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(71, 76);
                  break;
               case 73:
                  jjAddStates(87, 88);
                  break;
               case 82:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(89, 90);
                  break;
               case 86:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(91, 92);
                  break;
               case 90:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(91);
                  break;
               case 91:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(91);
                  break;
               case 100:
                  jjAddStates(77, 79);
                  break;
               case 108:
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 112:
               case 113:
                  jjCheckNAddTwoStates(113, 115);
                  break;
               case 117:
                  jjAddStates(93, 94);
                  break;
               case 124:
                  jjCheckNAddTwoStates(124, 125);
                  break;
               case 126:
               case 127:
                  jjCheckNAddTwoStates(127, 125);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 131:
               case 65:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(62, 64);
                  break;
               case 54:
               case 71:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(71, 76);
                  break;
               case 129:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(71, 76);
                  break;
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 3)
                        kind = 3;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 76)
                        kind = 76;
                     jjCheckNAddTwoStates(71, 76);
                  }
                  break;
               case 121:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(62, 64);
                  break;
               case 59:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(71, 76);
                  break;
               case 55:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(71, 76);
                  break;
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 17:
               case 19:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(15, 18);
                  break;
               case 21:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(45, 46);
                  break;
               case 38:
               case 40:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(12, 14);
                  break;
               case 62:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(52, 53);
                  break;
               case 70:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAddTwoStates(71, 76);
                  break;
               case 73:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(87, 88);
                  break;
               case 100:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(77, 79);
                  break;
               case 108:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 112:
               case 113:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(113, 115);
                  break;
               case 117:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(93, 94);
                  break;
               case 124:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(124, 125);
                  break;
               case 126:
               case 127:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(127, 125);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 129 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   73, 74, 79, 80, 115, 116, 117, 91, 99, 104, 105, 113, 38, 39, 41, 17, 
   18, 23, 24, 94, 95, 97, 17, 18, 27, 23, 24, 38, 39, 43, 41, 93, 
   94, 95, 97, 119, 120, 122, 14, 15, 19, 26, 28, 30, 33, 21, 25, 40, 
   42, 44, 46, 49, 62, 63, 67, 71, 77, 78, 81, 82, 111, 112, 65, 67, 
   68, 79, 80, 85, 86, 121, 122, 123, 97, 105, 110, 111, 119, 100, 101, 103, 
   99, 100, 101, 103, 125, 126, 128, 73, 77, 83, 84, 87, 88, 117, 118, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 254:
         return ((jjbitVec1[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec5[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec6[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, 
"\141\142\163\164\162\141\143\164", "\142\157\157\154\145\141\156", "\142\162\145\141\153", "\142\171\164\145", 
"\143\141\163\145", "\143\141\164\143\150", "\143\150\141\162", "\143\154\141\163\163", 
"\143\157\156\163\164", "\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", 
"\144\145\154\145\164\145", "\144\157", "\144\157\165\142\154\145", "\145\154\163\145", 
"\145\170\164\145\156\144\163", "\146\151\156\141\154", "\146\151\156\141\154\154\171", 
"\146\154\157\141\164", "\146\157\162", "\146\165\156\143\164\151\157\156", "\147\157\164\157", 
"\151\146", "\151\155\160\154\145\155\145\156\164\163", "\151\155\160\157\162\164", 
"\151\156", "\151\156\163\164\141\156\143\145\157\146", "\151\156\164", 
"\151\156\164\145\162\146\141\143\145", "\154\157\156\147", "\156\141\164\151\166\145", "\156\145\167", 
"\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", 
"\160\165\142\154\151\143", "\162\145\164\165\162\156", "\163\150\157\162\164", 
"\163\164\141\164\151\143", "\163\165\160\145\162", "\163\167\151\164\143\150", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\141\156\163\151\145\156\164", "\164\162\171", "\164\171\160\145\157\146", "\166\141\162", 
"\166\157\151\144", "\166\157\154\141\164\151\154\145", "\167\150\151\154\145", 
"\167\151\164\150", null, null, null, null, null, null, null, null, null, "\156\165\154\154", null, 
null, null, null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", 
"\54", "\75", "\76", "\74", "\41", "\176", "\77", "\72", "\56", "\75\75", "\74\75", 
"\76\75", "\41\75", "\75\75\75", "\41\75\75", "\174\174", "\46\46", "\53\53", "\55\55", 
"\53", "\55", "\52", "\57", "\46", "\174", "\136", "\45", "\74\74", "\76\76", 
"\76\76\76", "\174\174\75", "\46\46\75", "\53\75", "\55\75", "\52\75", "\57\75", "\46\75", 
"\174\75", "\136\75", "\45\75", "\74\74\75", "\76\76\75", "\76\76\76\75", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "RE",
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 
   1, 1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[129];
private final int[] jjstateSet = new int[258];
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 129; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 1;
int defaultLexState = 1;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
