/* Generated By:JavaCC: Do not edit this line. Parser.java */
package com.globalsight.ling.docproc.extractor.javascript;

/**
 * <p>A JavaScript Parser automatically generated by JavaCC.</p>
 * <p>Fires {@link
 * com.globalsight.ling.docproc.extractor.javascript.IParseEvents
 * IParseEvents}.</p>
 */
public class Parser implements ParserConstants {
    private IParseEvents m_handler = null;

    public void setHandler(IParseEvents handler)
    {
        m_handler = handler;
    }

    private void appendToken(Token t1, String s, Token t2)
    {
        t1.image = t1.image + ((s != null) ? s : "") + t2.image;
        t1.endLine = t2.endLine;
        t1.endColumn = t2.endColumn;
        t1.next = t2.next;
    }

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/**
 * Main entry point of the parser.  This rule parses an entire
 * JavaScript program.
 */
  final public void parse() throws ParseException {
    Token t;
                         m_handler.handleStart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNICODE_BOM:
      jj_consume_token(UNICODE_BOM);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      W();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case CONTINUE:
      case DELETE:
      case DO:
      case FOR:
      case FUNCTION:
      case IF:
      case NEW:
      case RETURN:
      case SWITCH:
      case THIS:
      case THROW:
      case TRY:
      case TYPEOF:
      case VAR:
      case VOID:
      case WHILE:
      case WITH:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case CF_VARIABLE:
      case REGEXP_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case MINUS:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      Element();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CDC:
    case CRIPPLED_SINGLE_LINE_COMMENT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CDC:
        t = jj_consume_token(CDC);
                         m_handler.handleCDC(t.image);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
          case JAVA_CODE:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_3;
          }
          W();
        }
        break;
      case CRIPPLED_SINGLE_LINE_COMMENT:
        t = jj_consume_token(CRIPPLED_SINGLE_LINE_COMMENT);
                         m_handler.handleComment(t.image,
                          m_handler.CRIPPLED_SINGLE_LINE_COMMENT);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(0);
                         m_handler.handleFinish();
  }

  final public void W() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S:
      t = jj_consume_token(S);
                         m_handler.handleWhite    (t.image);
      break;
    case L:
      t = jj_consume_token(L);
                         m_handler.handleEndOfLine(t.image);
      break;
    case SINGLE_LINE_COMMENT:
      t = jj_consume_token(SINGLE_LINE_COMMENT);
                         m_handler.handleComment(t.image,
                          m_handler.SINGLE_LINE_COMMENT);
      break;
    case MULTI_LINE_COMMENT:
      t = jj_consume_token(MULTI_LINE_COMMENT);
                         m_handler.handleComment(t.image,
                          m_handler.MULTI_LINE_COMMENT);
      break;
    case JAVA_CODE:
      jj_consume_token(JAVA_CODE);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Element() throws ParseException {
    Token t, t1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
      Function();
      break;
    case BREAK:
    case CONTINUE:
    case DELETE:
    case DO:
    case FOR:
    case IF:
    case NEW:
    case RETURN:
    case SWITCH:
    case THIS:
    case THROW:
    case TRY:
    case TYPEOF:
    case VAR:
    case VOID:
    case WHILE:
    case WITH:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case BOOLEAN_LITERAL:
    case NULL_LITERAL:
    case CF_VARIABLE:
    case REGEXP_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case SEMICOLON:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case MINUS:
      Statement();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Function() throws ParseException {
    Token t;
    // CvdL: JScript can have "function document.onReadStateChange() {}"
          t = jj_consume_token(FUNCTION);
                         m_handler.handleKeyword(t.image);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      W();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                             m_handler.handleLiteral(t.image);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_5;
        }
        W();
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_6;
        }
        t = jj_consume_token(DOT);
                               m_handler.handleOperator(t.image);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
          case JAVA_CODE:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_7;
          }
          W();
        }
        t = jj_consume_token(IDENTIFIER);
                               m_handler.handleLiteral(t.image);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
          case JAVA_CODE:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_8;
          }
          W();
        }
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    t = jj_consume_token(LPAREN);
                         m_handler.handleOperator(t.image);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_9;
      }
      W();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      ParameterList();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    t = jj_consume_token(RPAREN);
                         m_handler.handleOperator(t.image);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_10;
      }
      W();
    }
    CompoundStatement();
  }

  final public void ParameterList() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
                         m_handler.handleLiteral(t.image);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_11;
      }
      W();
    }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_12;
      }
      t = jj_consume_token(COMMA);
                         m_handler.handleOperator(t.image);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_13;
        }
        W();
      }
      t = jj_consume_token(IDENTIFIER);
                         m_handler.handleLiteral(t.image);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_14;
        }
        W();
      }
    }
  }

  final public void CompoundStatement() throws ParseException {
    Token t;
    t = jj_consume_token(LBRACE);
                         m_handler.handleOperator(t.image);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_15;
      }
      W();
    }
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case CONTINUE:
      case DELETE:
      case DO:
      case FOR:
      case FUNCTION:
      case IF:
      case NEW:
      case RETURN:
      case SWITCH:
      case THIS:
      case THROW:
      case TRY:
      case TYPEOF:
      case VAR:
      case VOID:
      case WHILE:
      case WITH:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case CF_VARIABLE:
      case REGEXP_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case MINUS:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_16;
      }
      Element();
    }
    t = jj_consume_token(RBRACE);
                         m_handler.handleOperator(t.image);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_17;
      }
      W();
    }
  }

  final public void Statement() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      /* empty statement */
            t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_18;
        }
        W();
      }
      break;
    default:
      jj_la1[83] = jj_gen;
      if (jj_2_1(2147483647)) {
        t = jj_consume_token(IDENTIFIER);
                         m_handler.handleLiteral (t.image);
        label_19:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
          case JAVA_CODE:
            ;
            break;
          default:
            jj_la1[25] = jj_gen;
            break label_19;
          }
          W();
        }
        t = jj_consume_token(COLON);
                         m_handler.handleOperator(t.image);
        label_20:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
          case JAVA_CODE:
            ;
            break;
          default:
            jj_la1[26] = jj_gen;
            break label_20;
          }
          W();
        }
        Statement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          t = jj_consume_token(IF);
                         m_handler.handleKeyword(t.image);
          label_21:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case S:
            case L:
            case SINGLE_LINE_COMMENT:
            case MULTI_LINE_COMMENT:
            case JAVA_CODE:
              ;
              break;
            default:
              jj_la1[27] = jj_gen;
              break label_21;
            }
            W();
          }
          Condition();
          Statement();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ELSE:
            t = jj_consume_token(ELSE);
                         m_handler.handleKeyword(t.image);
            label_22:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
              case JAVA_CODE:
                ;
                break;
              default:
                jj_la1[28] = jj_gen;
                break label_22;
              }
              W();
            }
            Statement();
            break;
          default:
            jj_la1[29] = jj_gen;
            ;
          }
          break;
        case WHILE:
          t = jj_consume_token(WHILE);
                         m_handler.handleKeyword(t.image);
          label_23:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case S:
            case L:
            case SINGLE_LINE_COMMENT:
            case MULTI_LINE_COMMENT:
            case JAVA_CODE:
              ;
              break;
            default:
              jj_la1[30] = jj_gen;
              break label_23;
            }
            W();
          }
          Condition();
          Statement();
          break;
        case DO:
          t = jj_consume_token(DO);
                         m_handler.handleKeyword(t.image);
          label_24:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case S:
            case L:
            case SINGLE_LINE_COMMENT:
            case MULTI_LINE_COMMENT:
            case JAVA_CODE:
              ;
              break;
            default:
              jj_la1[31] = jj_gen;
              break label_24;
            }
            W();
          }
          Statement();
          t = jj_consume_token(WHILE);
                         m_handler.handleKeyword(t.image);
          label_25:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case S:
            case L:
            case SINGLE_LINE_COMMENT:
            case MULTI_LINE_COMMENT:
            case JAVA_CODE:
              ;
              break;
            default:
              jj_la1[32] = jj_gen;
              break label_25;
            }
            W();
          }
          Condition();
          break;
        default:
          jj_la1[84] = jj_gen;
          if (jj_2_2(2147483647)) {
            t = jj_consume_token(FOR);
                         m_handler.handleKeyword(t.image);
            label_26:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
              case JAVA_CODE:
                ;
                break;
              default:
                jj_la1[33] = jj_gen;
                break label_26;
              }
              W();
            }
            t = jj_consume_token(LPAREN);
                         m_handler.handleOperator(t.image);
            label_27:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
              case JAVA_CODE:
                ;
                break;
              default:
                jj_la1[34] = jj_gen;
                break label_27;
              }
              W();
            }
            t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
            label_28:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
              case JAVA_CODE:
                ;
                break;
              default:
                jj_la1[35] = jj_gen;
                break label_28;
              }
              W();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DELETE:
            case FUNCTION:
            case NEW:
            case THIS:
            case TYPEOF:
            case VOID:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case STRING_LITERAL:
            case BOOLEAN_LITERAL:
            case NULL_LITERAL:
            case CF_VARIABLE:
            case REGEXP_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case LBRACE:
            case LBRACKET:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case MINUS:
              Expression();
              break;
            default:
              jj_la1[36] = jj_gen;
              ;
            }
            t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
            label_29:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
              case JAVA_CODE:
                ;
                break;
              default:
                jj_la1[37] = jj_gen;
                break label_29;
              }
              W();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DELETE:
            case FUNCTION:
            case NEW:
            case THIS:
            case TYPEOF:
            case VOID:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case STRING_LITERAL:
            case BOOLEAN_LITERAL:
            case NULL_LITERAL:
            case CF_VARIABLE:
            case REGEXP_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case LBRACE:
            case LBRACKET:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case MINUS:
              Expression();
              break;
            default:
              jj_la1[38] = jj_gen;
              ;
            }
            t = jj_consume_token(RPAREN);
                         m_handler.handleOperator(t.image);
            label_30:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
              case JAVA_CODE:
                ;
                break;
              default:
                jj_la1[39] = jj_gen;
                break label_30;
              }
              W();
            }
            Statement();
          } else if (jj_2_3(2147483647)) {
            t = jj_consume_token(FOR);
                         m_handler.handleKeyword(t.image);
            label_31:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
              case JAVA_CODE:
                ;
                break;
              default:
                jj_la1[40] = jj_gen;
                break label_31;
              }
              W();
            }
            t = jj_consume_token(LPAREN);
                         m_handler.handleOperator(t.image);
            label_32:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
              case JAVA_CODE:
                ;
                break;
              default:
                jj_la1[41] = jj_gen;
                break label_32;
              }
              W();
            }
            VariablesOrExpression();
            t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
            label_33:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
              case JAVA_CODE:
                ;
                break;
              default:
                jj_la1[42] = jj_gen;
                break label_33;
              }
              W();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DELETE:
            case FUNCTION:
            case NEW:
            case THIS:
            case TYPEOF:
            case VOID:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case STRING_LITERAL:
            case BOOLEAN_LITERAL:
            case NULL_LITERAL:
            case CF_VARIABLE:
            case REGEXP_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case LBRACE:
            case LBRACKET:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case MINUS:
              Expression();
              break;
            default:
              jj_la1[43] = jj_gen;
              ;
            }
            t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
            label_34:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
              case JAVA_CODE:
                ;
                break;
              default:
                jj_la1[44] = jj_gen;
                break label_34;
              }
              W();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DELETE:
            case FUNCTION:
            case NEW:
            case THIS:
            case TYPEOF:
            case VOID:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case STRING_LITERAL:
            case BOOLEAN_LITERAL:
            case NULL_LITERAL:
            case CF_VARIABLE:
            case REGEXP_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case LBRACE:
            case LBRACKET:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case MINUS:
              Expression();
              break;
            default:
              jj_la1[45] = jj_gen;
              ;
            }
            t = jj_consume_token(RPAREN);
                         m_handler.handleOperator(t.image);
            label_35:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
              case JAVA_CODE:
                ;
                break;
              default:
                jj_la1[46] = jj_gen;
                break label_35;
              }
              W();
            }
            Statement();
          } else if (jj_2_4(2147483647)) {
            t = jj_consume_token(FOR);
                         m_handler.handleKeyword(t.image);
            label_36:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
              case JAVA_CODE:
                ;
                break;
              default:
                jj_la1[47] = jj_gen;
                break label_36;
              }
              W();
            }
            t = jj_consume_token(LPAREN);
                         m_handler.handleOperator(t.image);
            label_37:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
              case JAVA_CODE:
                ;
                break;
              default:
                jj_la1[48] = jj_gen;
                break label_37;
              }
              W();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case VAR:
              t = jj_consume_token(VAR);
                         m_handler.handleKeyword(t.image);
              label_38:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                case JAVA_CODE:
                  ;
                  break;
                default:
                  jj_la1[49] = jj_gen;
                  break label_38;
                }
                W();
              }
              break;
            default:
              jj_la1[50] = jj_gen;
              ;
            }
            t = jj_consume_token(IDENTIFIER);
                         m_handler.handleLiteral(t.image);
            label_39:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
              case JAVA_CODE:
                ;
                break;
              default:
                jj_la1[51] = jj_gen;
                break label_39;
              }
              W();
            }
            t = jj_consume_token(IN);
                         m_handler.handleKeyword(t.image);
            label_40:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
              case JAVA_CODE:
                ;
                break;
              default:
                jj_la1[52] = jj_gen;
                break label_40;
              }
              W();
            }
            Expression();
            t = jj_consume_token(RPAREN);
                         m_handler.handleOperator(t.image);
            label_41:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
              case JAVA_CODE:
                ;
                break;
              default:
                jj_la1[53] = jj_gen;
                break label_41;
              }
              W();
            }
            Statement();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case WITH:
              t = jj_consume_token(WITH);
                         m_handler.handleKeyword(t.image);
              label_42:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                case JAVA_CODE:
                  ;
                  break;
                default:
                  jj_la1[54] = jj_gen;
                  break label_42;
                }
                W();
              }
              t = jj_consume_token(LPAREN);
                         m_handler.handleOperator(t.image);
              label_43:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                case JAVA_CODE:
                  ;
                  break;
                default:
                  jj_la1[55] = jj_gen;
                  break label_43;
                }
                W();
              }
              Expression();
              t = jj_consume_token(RPAREN);
                         m_handler.handleOperator(t.image);
              label_44:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                case JAVA_CODE:
                  ;
                  break;
                default:
                  jj_la1[56] = jj_gen;
                  break label_44;
                }
                W();
              }
              Statement();
              break;
            case TRY:
              t = jj_consume_token(TRY);
                         m_handler.handleKeyword(t.image);
              label_45:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                case JAVA_CODE:
                  ;
                  break;
                default:
                  jj_la1[57] = jj_gen;
                  break label_45;
                }
                W();
              }
              CompoundStatement();
              t = jj_consume_token(CATCH);
                         m_handler.handleKeyword(t.image);
              label_46:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                case JAVA_CODE:
                  ;
                  break;
                default:
                  jj_la1[58] = jj_gen;
                  break label_46;
                }
                W();
              }
              t = jj_consume_token(LPAREN);
                         m_handler.handleOperator(t.image);
              label_47:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                case JAVA_CODE:
                  ;
                  break;
                default:
                  jj_la1[59] = jj_gen;
                  break label_47;
                }
                W();
              }
              t = jj_consume_token(IDENTIFIER);
                         m_handler.handleLiteral(t.image);
              label_48:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                case JAVA_CODE:
                  ;
                  break;
                default:
                  jj_la1[60] = jj_gen;
                  break label_48;
                }
                W();
              }
              t = jj_consume_token(RPAREN);
                         m_handler.handleOperator(t.image);
              label_49:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                case JAVA_CODE:
                  ;
                  break;
                default:
                  jj_la1[61] = jj_gen;
                  break label_49;
                }
                W();
              }
              CompoundStatement();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case FINALLY:
                t = jj_consume_token(FINALLY);
                         m_handler.handleKeyword(t.image);
                label_50:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case S:
                  case L:
                  case SINGLE_LINE_COMMENT:
                  case MULTI_LINE_COMMENT:
                  case JAVA_CODE:
                    ;
                    break;
                  default:
                    jj_la1[62] = jj_gen;
                    break label_50;
                  }
                  W();
                }
                CompoundStatement();
                break;
              default:
                jj_la1[63] = jj_gen;
                ;
              }
              break;
            case THROW:
              t = jj_consume_token(THROW);
                         m_handler.handleOperator(t.image);
              label_51:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                case JAVA_CODE:
                  ;
                  break;
                default:
                  jj_la1[64] = jj_gen;
                  break label_51;
                }
                W();
              }
              Expression();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
                t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
                label_52:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case S:
                  case L:
                  case SINGLE_LINE_COMMENT:
                  case MULTI_LINE_COMMENT:
                  case JAVA_CODE:
                    ;
                    break;
                  default:
                    jj_la1[65] = jj_gen;
                    break label_52;
                  }
                  W();
                }
                break;
              default:
                jj_la1[66] = jj_gen;
                ;
              }
              break;
            case BREAK:
              t = jj_consume_token(BREAK);
                         m_handler.handleKeyword(t.image);
              label_53:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                case JAVA_CODE:
                  ;
                  break;
                default:
                  jj_la1[67] = jj_gen;
                  break label_53;
                }
                W();
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case IDENTIFIER:
                t = jj_consume_token(IDENTIFIER);
                         m_handler.handleLiteral(t.image);
                label_54:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case S:
                  case L:
                  case SINGLE_LINE_COMMENT:
                  case MULTI_LINE_COMMENT:
                  case JAVA_CODE:
                    ;
                    break;
                  default:
                    jj_la1[68] = jj_gen;
                    break label_54;
                  }
                  W();
                }
                break;
              default:
                jj_la1[69] = jj_gen;
                ;
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
                t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
                label_55:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case S:
                  case L:
                  case SINGLE_LINE_COMMENT:
                  case MULTI_LINE_COMMENT:
                  case JAVA_CODE:
                    ;
                    break;
                  default:
                    jj_la1[70] = jj_gen;
                    break label_55;
                  }
                  W();
                }
                break;
              default:
                jj_la1[71] = jj_gen;
                ;
              }
              break;
            case CONTINUE:
              t = jj_consume_token(CONTINUE);
                         m_handler.handleKeyword(t.image);
              label_56:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                case JAVA_CODE:
                  ;
                  break;
                default:
                  jj_la1[72] = jj_gen;
                  break label_56;
                }
                W();
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case IDENTIFIER:
                t = jj_consume_token(IDENTIFIER);
                         m_handler.handleLiteral(t.image);
                label_57:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case S:
                  case L:
                  case SINGLE_LINE_COMMENT:
                  case MULTI_LINE_COMMENT:
                  case JAVA_CODE:
                    ;
                    break;
                  default:
                    jj_la1[73] = jj_gen;
                    break label_57;
                  }
                  W();
                }
                break;
              default:
                jj_la1[74] = jj_gen;
                ;
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
                t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
                label_58:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case S:
                  case L:
                  case SINGLE_LINE_COMMENT:
                  case MULTI_LINE_COMMENT:
                  case JAVA_CODE:
                    ;
                    break;
                  default:
                    jj_la1[75] = jj_gen;
                    break label_58;
                  }
                  W();
                }
                break;
              default:
                jj_la1[76] = jj_gen;
                ;
              }
              break;
            case RETURN:
              t = jj_consume_token(RETURN);
                         m_handler.handleKeyword(t.image);
              label_59:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                case JAVA_CODE:
                  ;
                  break;
                default:
                  jj_la1[77] = jj_gen;
                  break label_59;
                }
                W();
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case DELETE:
              case FUNCTION:
              case NEW:
              case THIS:
              case TYPEOF:
              case VOID:
              case INTEGER_LITERAL:
              case FLOATING_POINT_LITERAL:
              case STRING_LITERAL:
              case BOOLEAN_LITERAL:
              case NULL_LITERAL:
              case CF_VARIABLE:
              case REGEXP_LITERAL:
              case IDENTIFIER:
              case LPAREN:
              case LBRACE:
              case LBRACKET:
              case BANG:
              case TILDE:
              case INCR:
              case DECR:
              case MINUS:
                Expression();
                break;
              default:
                jj_la1[78] = jj_gen;
                ;
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
                t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
                label_60:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case S:
                  case L:
                  case SINGLE_LINE_COMMENT:
                  case MULTI_LINE_COMMENT:
                  case JAVA_CODE:
                    ;
                    break;
                  default:
                    jj_la1[79] = jj_gen;
                    break label_60;
                  }
                  W();
                }
                break;
              default:
                jj_la1[80] = jj_gen;
                ;
              }
              break;
            case SWITCH:
              SwitchStatement();
              break;
            case LBRACE:
              CompoundStatement();
              break;
            case DELETE:
            case FUNCTION:
            case NEW:
            case THIS:
            case TYPEOF:
            case VAR:
            case VOID:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case STRING_LITERAL:
            case BOOLEAN_LITERAL:
            case NULL_LITERAL:
            case CF_VARIABLE:
            case REGEXP_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case LBRACKET:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case MINUS:
              VariablesOrExpression();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
                t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
                label_61:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case S:
                  case L:
                  case SINGLE_LINE_COMMENT:
                  case MULTI_LINE_COMMENT:
                  case JAVA_CODE:
                    ;
                    break;
                  default:
                    jj_la1[81] = jj_gen;
                    break label_61;
                  }
                  W();
                }
                break;
              default:
                jj_la1[82] = jj_gen;
                ;
              }
              break;
            default:
              jj_la1[85] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
  }

  final public void SwitchStatement() throws ParseException {
    Token t;
    t = jj_consume_token(SWITCH);
                         m_handler.handleKeyword(t.image);
    label_62:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[86] = jj_gen;
        break label_62;
      }
      W();
    }
    t = jj_consume_token(LPAREN);
                         m_handler.handleOperator(t.image);
    label_63:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[87] = jj_gen;
        break label_63;
      }
      W();
    }
    Expression();
    t = jj_consume_token(RPAREN);
                         m_handler.handleOperator(t.image);
    label_64:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[88] = jj_gen;
        break label_64;
      }
      W();
    }
    t = jj_consume_token(LBRACE);
                         m_handler.handleOperator(t.image);
    label_65:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[89] = jj_gen;
        break label_65;
      }
      W();
    }
    label_66:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        jj_la1[90] = jj_gen;
        break label_66;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        CaseLabel();
        break;
      case _DEFAULT:
        CaseDefaultLabel();
        break;
      default:
        jj_la1[91] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    t = jj_consume_token(RBRACE);
                         m_handler.handleOperator(t.image);
    label_67:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[92] = jj_gen;
        break label_67;
      }
      W();
    }
  }

  final public void CaseLabel() throws ParseException {
    Token t;
    t = jj_consume_token(CASE);
                         m_handler.handleKeyword(t.image);
    label_68:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[93] = jj_gen;
        break label_68;
      }
      W();
    }
    Expression();
    t = jj_consume_token(COLON);
                         m_handler.handleOperator(t.image);
    label_69:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[94] = jj_gen;
        break label_69;
      }
      W();
    }
    label_70:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case CONTINUE:
      case DELETE:
      case DO:
      case FOR:
      case FUNCTION:
      case IF:
      case NEW:
      case RETURN:
      case SWITCH:
      case THIS:
      case THROW:
      case TRY:
      case TYPEOF:
      case VAR:
      case VOID:
      case WHILE:
      case WITH:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case CF_VARIABLE:
      case REGEXP_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case MINUS:
        ;
        break;
      default:
        jj_la1[95] = jj_gen;
        break label_70;
      }
      Statement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
      label_71:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[96] = jj_gen;
          break label_71;
        }
        W();
      }
      break;
    default:
      jj_la1[97] = jj_gen;
      ;
    }
  }

  final public void CaseDefaultLabel() throws ParseException {
    Token t;
    t = jj_consume_token(_DEFAULT);
                         m_handler.handleKeyword(t.image);
    label_72:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[98] = jj_gen;
        break label_72;
      }
      W();
    }
    t = jj_consume_token(COLON);
                         m_handler.handleOperator(t.image);
    label_73:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[99] = jj_gen;
        break label_73;
      }
      W();
    }
    label_74:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case CONTINUE:
      case DELETE:
      case DO:
      case FOR:
      case FUNCTION:
      case IF:
      case NEW:
      case RETURN:
      case SWITCH:
      case THIS:
      case THROW:
      case TRY:
      case TYPEOF:
      case VAR:
      case VOID:
      case WHILE:
      case WITH:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case CF_VARIABLE:
      case REGEXP_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case MINUS:
        ;
        break;
      default:
        jj_la1[100] = jj_gen;
        break label_74;
      }
      Statement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
      label_75:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[101] = jj_gen;
          break label_75;
        }
        W();
      }
      break;
    default:
      jj_la1[102] = jj_gen;
      ;
    }
  }

  final public void Condition() throws ParseException {
    Token t;
    t = jj_consume_token(LPAREN);
                         m_handler.handleOperator(t.image);
    label_76:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[103] = jj_gen;
        break label_76;
      }
      W();
    }
    Expression();
    t = jj_consume_token(RPAREN);
                         m_handler.handleOperator(t.image);
    label_77:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[104] = jj_gen;
        break label_77;
      }
      W();
    }
  }

// ### Check up on the semantics of this - not sure whether it should
// be statement or expression
  final public void VariablesOrExpression() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      t = jj_consume_token(VAR);
                         m_handler.handleKeyword(t.image);
      label_78:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[105] = jj_gen;
          break label_78;
        }
        W();
      }
      Variables();
      break;
    case DELETE:
    case FUNCTION:
    case NEW:
    case THIS:
    case TYPEOF:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case BOOLEAN_LITERAL:
    case NULL_LITERAL:
    case CF_VARIABLE:
    case REGEXP_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case MINUS:
      Expression();
      break;
    default:
      jj_la1[106] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Variables() throws ParseException {
    Token t;
    Variable();
    label_79:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[107] = jj_gen;
        break label_79;
      }
      W();
    }
    label_80:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[108] = jj_gen;
        break label_80;
      }
      t = jj_consume_token(COMMA);
                         m_handler.handleOperator(t.image);
      label_81:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[109] = jj_gen;
          break label_81;
        }
        W();
      }
      Variable();
    }
  }

  final public void Variable() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
                         m_handler.handleLiteral(t.image);
    label_82:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[110] = jj_gen;
        break label_82;
      }
      W();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      t = jj_consume_token(ASSIGN);
                         m_handler.handleOperator(t.image);
      label_83:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[111] = jj_gen;
          break label_83;
        }
        W();
      }
      AssignmentExpression();
      break;
    default:
      jj_la1[112] = jj_gen;
      ;
    }
  }

  final public void Expression() throws ParseException {
    Token t;
    AssignmentExpression();
    label_84:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[113] = jj_gen;
        break label_84;
      }
      W();
    }
    label_85:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[114] = jj_gen;
        break label_85;
      }
      t = jj_consume_token(COMMA);
                         m_handler.handleOperator(t.image);
      label_86:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[115] = jj_gen;
          break label_86;
        }
        W();
      }
      AssignmentExpression();
    }
  }

  final public void AssignmentExpression() throws ParseException {
    Token t;
    ConditionalExpression();
    label_87:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case SC_ORASSIGN:
      case SC_ANDASSIGN:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case BIT_ANDASSIGN:
      case BIT_ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case LSHIFTASSIGN:
      case RSIGNEDSHIFTASSIGN:
      case RUNSIGNEDSHIFTASSIGN:
        ;
        break;
      default:
        jj_la1[116] = jj_gen;
        break label_87;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        t = jj_consume_token(ASSIGN);
        break;
      case SC_ANDASSIGN:
        t = jj_consume_token(SC_ANDASSIGN);
        break;
      case SC_ORASSIGN:
        t = jj_consume_token(SC_ORASSIGN);
        break;
      case PLUSASSIGN:
        t = jj_consume_token(PLUSASSIGN);
        break;
      case MINUSASSIGN:
        t = jj_consume_token(MINUSASSIGN);
        break;
      case STARASSIGN:
        t = jj_consume_token(STARASSIGN);
        break;
      case SLASHASSIGN:
        t = jj_consume_token(SLASHASSIGN);
        break;
      case BIT_ANDASSIGN:
        t = jj_consume_token(BIT_ANDASSIGN);
        break;
      case BIT_ORASSIGN:
        t = jj_consume_token(BIT_ORASSIGN);
        break;
      case XORASSIGN:
        t = jj_consume_token(XORASSIGN);
        break;
      case REMASSIGN:
        t = jj_consume_token(REMASSIGN);
        break;
      case LSHIFTASSIGN:
        t = jj_consume_token(LSHIFTASSIGN);
        break;
      case RSIGNEDSHIFTASSIGN:
        t = jj_consume_token(RSIGNEDSHIFTASSIGN);
        break;
      case RUNSIGNEDSHIFTASSIGN:
        t = jj_consume_token(RUNSIGNEDSHIFTASSIGN);
        break;
      default:
        jj_la1[117] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        m_handler.handleOperator(t.image);
      label_88:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[118] = jj_gen;
          break label_88;
        }
        W();
      }
      ConditionalExpression();
    }
  }

  final public void ConditionalExpression() throws ParseException {
    Token t;
    OrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      t = jj_consume_token(HOOK);
                         m_handler.handleOperator(t.image);
      label_89:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[119] = jj_gen;
          break label_89;
        }
        W();
      }
      AssignmentExpression();
      t = jj_consume_token(COLON);
                         m_handler.handleOperator(t.image);
      label_90:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[120] = jj_gen;
          break label_90;
        }
        W();
      }
      AssignmentExpression();
      break;
    default:
      jj_la1[121] = jj_gen;
      ;
    }
  }

  final public void OrExpression() throws ParseException {
    Token t;
    AndExpression();
    label_91:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[122] = jj_gen;
        break label_91;
      }
      t = jj_consume_token(SC_OR);
                         m_handler.handleOperator(t.image);
      label_92:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[123] = jj_gen;
          break label_92;
        }
        W();
      }
      AndExpression();
    }
  }

  final public void AndExpression() throws ParseException {
    Token t;
    BitwiseOrExpression();
    label_93:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[124] = jj_gen;
        break label_93;
      }
      t = jj_consume_token(SC_AND);
                         m_handler.handleOperator(t.image);
      label_94:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[125] = jj_gen;
          break label_94;
        }
        W();
      }
      BitwiseOrExpression();
    }
  }

  final public void BitwiseOrExpression() throws ParseException {
    Token t;
    BitwiseXorExpression();
    label_95:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[126] = jj_gen;
        break label_95;
      }
      t = jj_consume_token(BIT_OR);
                         m_handler.handleOperator(t.image);
      label_96:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[127] = jj_gen;
          break label_96;
        }
        W();
      }
      BitwiseXorExpression();
    }
  }

  final public void BitwiseXorExpression() throws ParseException {
    Token t;
    BitwiseAndExpression();
    label_97:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[128] = jj_gen;
        break label_97;
      }
      t = jj_consume_token(XOR);
                         m_handler.handleOperator(t.image);
      label_98:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[129] = jj_gen;
          break label_98;
        }
        W();
      }
      BitwiseAndExpression();
    }
  }

  final public void BitwiseAndExpression() throws ParseException {
    Token t;
    EqualityExpression();
    label_99:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[130] = jj_gen;
        break label_99;
      }
      t = jj_consume_token(BIT_AND);
                         m_handler.handleOperator(t.image);
      label_100:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[131] = jj_gen;
          break label_100;
        }
        W();
      }
      EqualityExpression();
    }
  }

  final public void EqualityExpression() throws ParseException {
    Token t;
    InstanceOfExpression();
    label_101:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
      case EQ:
      case NE:
      case IDENTITY:
      case NONIDENTITY:
        ;
        break;
      default:
        jj_la1[132] = jj_gen;
        break label_101;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
      case IDENTITY:
      case NONIDENTITY:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          t = jj_consume_token(EQ);
          break;
        case NE:
          t = jj_consume_token(NE);
          break;
        case IDENTITY:
          t = jj_consume_token(IDENTITY);
          break;
        case NONIDENTITY:
          t = jj_consume_token(NONIDENTITY);
          break;
        default:
          jj_la1[133] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          m_handler.handleOperator(t.image);
        break;
      case IN:
        t = jj_consume_token(IN);
          m_handler.handleKeyword(t.image);
        break;
      default:
        jj_la1[134] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_102:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[135] = jj_gen;
          break label_102;
        }
        W();
      }
      InstanceOfExpression();
    }
  }

// this routine is mirrored after the Java1.1 grammar.
  final public void InstanceOfExpression() throws ParseException {
    Token t;
    RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      t = jj_consume_token(INSTANCEOF);
        m_handler.handleKeyword(t.image);
      label_103:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[136] = jj_gen;
          break label_103;
        }
        W();
      }
      MemberExpression();
      break;
    default:
      jj_la1[137] = jj_gen;
      ;
    }
  }

  final public void RelationalExpression() throws ParseException {
    Token t;
    ShiftExpression();
    label_104:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[138] = jj_gen;
        break label_104;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        t = jj_consume_token(LT);
        break;
      case GT:
        t = jj_consume_token(GT);
        break;
      case LE:
        t = jj_consume_token(LE);
        break;
      case GE:
        t = jj_consume_token(GE);
        break;
      default:
        jj_la1[139] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        m_handler.handleOperator(t.image);
      label_105:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[140] = jj_gen;
          break label_105;
        }
        W();
      }
      ShiftExpression();
    }
  }

  final public void ShiftExpression() throws ParseException {
    Token t;
    AdditiveExpression();
    label_106:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
      case RSIGNEDSHIFT:
      case RUNSIGNEDSHIFT:
        ;
        break;
      default:
        jj_la1[141] = jj_gen;
        break label_106;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        t = jj_consume_token(LSHIFT);
        break;
      case RSIGNEDSHIFT:
        t = jj_consume_token(RSIGNEDSHIFT);
        break;
      case RUNSIGNEDSHIFT:
        t = jj_consume_token(RUNSIGNEDSHIFT);
        break;
      default:
        jj_la1[142] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        m_handler.handleOperator(t.image);
      label_107:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[143] = jj_gen;
          break label_107;
        }
        W();
      }
      AdditiveExpression();
    }
  }

  final public void AdditiveExpression() throws ParseException {
    Token t;
    MultiplicativeExpression();
    label_108:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[144] = jj_gen;
        break label_108;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[145] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        m_handler.handleOperator(t.image);
      label_109:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[146] = jj_gen;
          break label_109;
        }
        W();
      }
      MultiplicativeExpression();
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    Token t;
    UnaryExpression();
    label_110:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        jj_la1[147] = jj_gen;
        break label_110;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        t = jj_consume_token(STAR);
        break;
      case SLASH:
        t = jj_consume_token(SLASH);
        break;
      case REM:
        t = jj_consume_token(REM);
        break;
      default:
        jj_la1[148] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        m_handler.handleOperator(t.image);
      label_111:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[149] = jj_gen;
          break label_111;
        }
        W();
      }
      UnaryExpression();
    }
  }

  final public void UnaryExpression() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
        t = jj_consume_token(BANG);
        break;
      case TILDE:
        t = jj_consume_token(TILDE);
        break;
      default:
        jj_la1[150] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                            m_handler.handleOperator(t.image);
      label_112:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[151] = jj_gen;
          break label_112;
        }
        W();
      }
      UnaryExpression();
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
                            m_handler.handleOperator(t.image);
      label_113:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[152] = jj_gen;
          break label_113;
        }
        W();
      }
      UnaryExpression();
      break;
    case INCR:
    case DECR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        t = jj_consume_token(INCR);
        break;
      case DECR:
        t = jj_consume_token(DECR);
        break;
      default:
        jj_la1[153] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                            m_handler.handleOperator(t.image);
      label_114:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[154] = jj_gen;
          break label_114;
        }
        W();
      }
      MemberExpression();
      break;
    case FUNCTION:
    case NEW:
    case THIS:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case BOOLEAN_LITERAL:
    case NULL_LITERAL:
    case CF_VARIABLE:
    case REGEXP_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case LBRACKET:
      MemberExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
      case DECR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          t = jj_consume_token(INCR);
          break;
        case DECR:
          t = jj_consume_token(DECR);
          break;
        default:
          jj_la1[155] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                              m_handler.handleOperator(t.image);
        label_115:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
          case JAVA_CODE:
            ;
            break;
          default:
            jj_la1[156] = jj_gen;
            break label_115;
          }
          W();
        }
        break;
      default:
        jj_la1[157] = jj_gen;
        ;
      }
      break;
    case DELETE:
      /* NEW is not really a unary expression
            t=<NEW>               { m_handler.handleKeyword(t.image); } ( W() )*
            Constructor() 
          |
            */
            t = jj_consume_token(DELETE);
                              m_handler.handleKeyword(t.image);
      label_116:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[158] = jj_gen;
          break label_116;
        }
        W();
      }
      MemberExpression();
      break;
    case VOID:
      t = jj_consume_token(VOID);
                              m_handler.handleKeyword(t.image);
      label_117:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[159] = jj_gen;
          break label_117;
        }
        W();
      }
      UnaryExpression();
      break;
    case TYPEOF:
      t = jj_consume_token(TYPEOF);
                              m_handler.handleKeyword(t.image);
      label_118:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[160] = jj_gen;
          break label_118;
        }
        W();
      }
      MemberExpression();
      break;
    default:
      jj_la1[161] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Constructor() throws ParseException {
    ConstructorCall();
  }

  final public void ConstructorCall() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
                         m_handler.handleLiteral(t.image);
    label_119:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[162] = jj_gen;
        break label_119;
      }
      W();
    }
    label_120:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[163] = jj_gen;
        break label_120;
      }
      t = jj_consume_token(DOT);
                         m_handler.handleOperator(t.image);
      label_121:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[164] = jj_gen;
          break label_121;
        }
        W();
      }
      t = jj_consume_token(IDENTIFIER);
                         m_handler.handleLiteral(t.image);
      label_122:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[165] = jj_gen;
          break label_122;
        }
        W();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      t = jj_consume_token(LPAREN);
                         m_handler.handleOperator(t.image);
      label_123:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[166] = jj_gen;
          break label_123;
        }
        W();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELETE:
      case FUNCTION:
      case NEW:
      case THIS:
      case TYPEOF:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case CF_VARIABLE:
      case REGEXP_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case MINUS:
        ArgumentList();
        break;
      default:
        jj_la1[167] = jj_gen;
        ;
      }
      t = jj_consume_token(RPAREN);
                         m_handler.handleOperator(t.image);
      label_124:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[168] = jj_gen;
          break label_124;
        }
        W();
      }
      break;
    default:
      jj_la1[169] = jj_gen;
      ;
    }
  }

// Departs from the grammar in the standard, since this works in all browsers
  final public void MemberExpression() throws ParseException {
    Token t;
    PrimaryExpression();
    label_125:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACKET:
      case DOT:
      case PLUS:
        ;
        break;
      default:
        jj_la1[170] = jj_gen;
        break label_125;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        t = jj_consume_token(DOT);
                         m_handler.handleOperator(t.image);
        label_126:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
          case JAVA_CODE:
            ;
            break;
          default:
            jj_la1[171] = jj_gen;
            break label_126;
          }
          W();
        }
        PrimaryExpression();
        break;
      case PLUS:
        t = jj_consume_token(PLUS);
                         m_handler.handleOperator(t.image);
        label_127:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
          case JAVA_CODE:
            ;
            break;
          default:
            jj_la1[172] = jj_gen;
            break label_127;
          }
          W();
        }
        PrimaryExpression();
        break;
      case LBRACKET:
        t = jj_consume_token(LBRACKET);
                         m_handler.handleOperator(t.image);
        label_128:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
          case JAVA_CODE:
            ;
            break;
          default:
            jj_la1[173] = jj_gen;
            break label_128;
          }
          W();
        }
        Expression();
        t = jj_consume_token(RBRACKET);
                         m_handler.handleOperator(t.image);
        label_129:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
          case JAVA_CODE:
            ;
            break;
          default:
            jj_la1[174] = jj_gen;
            break label_129;
          }
          W();
        }
        break;
      case LPAREN:
        t = jj_consume_token(LPAREN);
                         m_handler.handleOperator(t.image); m_handler.handleFunctionStart(t.image);
        label_130:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
          case JAVA_CODE:
            ;
            break;
          default:
            jj_la1[175] = jj_gen;
            break label_130;
          }
          W();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELETE:
        case FUNCTION:
        case NEW:
        case THIS:
        case TYPEOF:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case BOOLEAN_LITERAL:
        case NULL_LITERAL:
        case CF_VARIABLE:
        case REGEXP_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case MINUS:
          ArgumentList();
          break;
        default:
          jj_la1[176] = jj_gen;
          ;
        }
        t = jj_consume_token(RPAREN);
                         m_handler.handleOperator(t.image); m_handler.handleFunctionEnd(t.image);
        label_131:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
          case JAVA_CODE:
            ;
            break;
          default:
            jj_la1[177] = jj_gen;
            break label_131;
          }
          W();
        }
        break;
      default:
        jj_la1[178] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

// Vector of JSExpressions
  final public void ArgumentList() throws ParseException {
    Token t;
    AssignmentExpression();
    label_132:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[179] = jj_gen;
        break label_132;
      }
      t = jj_consume_token(COMMA);
                         m_handler.handleOperator(t.image);
      label_133:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[180] = jj_gen;
          break label_133;
        }
        W();
      }
      AssignmentExpression();
    }
  }

  final public void PrimaryExpression() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      t = jj_consume_token(LPAREN);
           m_handler.handleOperator(t.image);
      label_134:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[181] = jj_gen;
          break label_134;
        }
        W();
      }
      Expression();
      t = jj_consume_token(RPAREN);
           m_handler.handleOperator(t.image);
      label_135:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[182] = jj_gen;
          break label_135;
        }
        W();
      }
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                    m_handler.handleLiteral(t.image); m_handler.handlerFunctionName(t.image);
      label_136:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[183] = jj_gen;
          break label_136;
        }
        W();
      }
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                         m_handler.handleLiteral(t.image);
      label_137:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[184] = jj_gen;
          break label_137;
        }
        W();
      }
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
               m_handler.handleLiteral(t.image);
      label_138:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[185] = jj_gen;
          break label_138;
        }
        W();
      }
      t = jj_consume_token(INTEGER_LITERAL);
                         m_handler.handleLiteral(t.image);
      label_139:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[186] = jj_gen;
          break label_139;
        }
        W();
      }
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
                                m_handler.handleLiteral(t.image);
      label_140:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[187] = jj_gen;
          break label_140;
        }
        W();
      }
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                        m_handler.handleString(t.image);
      label_141:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[188] = jj_gen;
          break label_141;
        }
        W();
      }
      break;
    case REGEXP_LITERAL:
      t = jj_consume_token(REGEXP_LITERAL);
                        m_handler.handleLiteral(t.image);
      label_142:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[189] = jj_gen;
          break label_142;
        }
        W();
      }
      break;
    case BOOLEAN_LITERAL:
      t = jj_consume_token(BOOLEAN_LITERAL);
                         m_handler.handleLiteral(t.image);
      label_143:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[190] = jj_gen;
          break label_143;
        }
        W();
      }
      break;
    case NULL_LITERAL:
      t = jj_consume_token(NULL_LITERAL);
                      m_handler.handleLiteral(t.image);
      label_144:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[191] = jj_gen;
          break label_144;
        }
        W();
      }
      break;
    case CF_VARIABLE:
      // Fri Nov 15 00:53:43 2002 CF Hack: allow #var# inside Javascript.
          t = jj_consume_token(CF_VARIABLE);
                     m_handler.handleLiteral(t.image);
      label_145:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[192] = jj_gen;
          break label_145;
        }
        W();
      }
      break;
    case THIS:
      t = jj_consume_token(THIS);
              m_handler.handleLiteral(t.image);
      label_146:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[193] = jj_gen;
          break label_146;
        }
        W();
      }
      break;
    case NEW:
      t = jj_consume_token(NEW);
               m_handler.handleKeyword(t.image);
      label_147:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[194] = jj_gen;
          break label_147;
        }
        W();
      }
      Constructor();
      break;
    case LBRACKET:
      ArrayLiteral();
      break;
    case LBRACE:
      ObjectLiteral();
      break;
    case FUNCTION:
      Function();
      break;
    default:
      jj_la1[195] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// myHonda = {color:"red",wheels:4,engine:{cylinders:4,size:2.2}};
// CvdL: not used yet - creates ambiguities and must be placed
// only in an assignment context
  final public void ObjectLiteral() throws ParseException {
    Token t;
    t = jj_consume_token(LBRACE);
                          m_handler.handleOperator(t.image);
    label_148:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[196] = jj_gen;
        break label_148;
      }
      W();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
    case IDENTIFIER:
      ObjectLiteralItem();
      label_149:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[197] = jj_gen;
          break label_149;
        }
        t = jj_consume_token(COMMA);
                           m_handler.handleOperator(t.image);
        label_150:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
          case JAVA_CODE:
            ;
            break;
          default:
            jj_la1[198] = jj_gen;
            break label_150;
          }
          W();
        }
        ObjectLiteralItem();
      }
      break;
    default:
      jj_la1[199] = jj_gen;
      ;
    }
    t = jj_consume_token(RBRACE);
                           m_handler.handleOperator(t.image);
    label_151:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[200] = jj_gen;
        break label_151;
      }
      W();
    }
  }

  final public void ObjectLiteralItem() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                            m_handler.handleLiteral(t.image);
      label_152:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[201] = jj_gen;
          break label_152;
        }
        W();
      }
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                          m_handler.handleString(t.image);
      label_153:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[202] = jj_gen;
          break label_153;
        }
        W();
      }
      break;
    default:
      jj_la1[203] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(COLON);
                          m_handler.handleOperator(t.image);
    label_154:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[204] = jj_gen;
        break label_154;
      }
      W();
    }
    MemberExpression();
  }

// var aArray = [ ,, , "1", 2, new X(), ];
  final public void ArrayLiteral() throws ParseException {
    Token t;
    t = jj_consume_token(LBRACKET);
        m_handler.handleOperator(t.image);
    label_155:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[205] = jj_gen;
        break label_155;
      }
      W();
    }
    label_156:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELETE:
      case FUNCTION:
      case NEW:
      case THIS:
      case TYPEOF:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case CF_VARIABLE:
      case REGEXP_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case COMMA:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case MINUS:
        ;
        break;
      default:
        jj_la1[206] = jj_gen;
        break label_156;
      }
      label_157:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[207] = jj_gen;
          break label_157;
        }
        t = jj_consume_token(COMMA);
        m_handler.handleOperator(t.image);
        label_158:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
          case JAVA_CODE:
            ;
            break;
          default:
            jj_la1[208] = jj_gen;
            break label_158;
          }
          W();
        }
      }
      AssignmentExpression();
      label_159:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
        case JAVA_CODE:
          ;
          break;
        default:
          jj_la1[209] = jj_gen;
          break label_159;
        }
        W();
      }
      label_160:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[210] = jj_gen;
          break label_160;
        }
        t = jj_consume_token(COMMA);
        m_handler.handleOperator(t.image);
        label_161:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
          case JAVA_CODE:
            ;
            break;
          default:
            jj_la1[211] = jj_gen;
            break label_161;
          }
          W();
        }
      }
    }
    t = jj_consume_token(RBRACKET);
        m_handler.handleOperator(t.image);
    label_162:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
      case JAVA_CODE:
        ;
        break;
      default:
        jj_la1[212] = jj_gen;
        break label_162;
      }
      W();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_196() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_scan_token(SC_OR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_206()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_200()) return true;
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_3R_200()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_201()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_scan_token(HOOK)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_202()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_187()) return true;
    if (jj_scan_token(COLON)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_203()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_187()) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_3R_197()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_198()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_199()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_193()) return true;
    return false;
  }

  private boolean jj_3R_421() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_3R_193()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_194()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_420() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_195()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_187()) return true;
    return false;
  }

  private boolean jj_3R_451() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_3R_187()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_188()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_189()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_447() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_446() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_196()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_187()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_190()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_191()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_450() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_443() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_442() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_192()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_184()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_185()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_186()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_436() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_434() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_scan_token(VAR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_181()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3R_433() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_432() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_168() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) return true;
    }
    return false;
  }

  private boolean jj_3R_431() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_437() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_373() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_420()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_183()) return true;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_421()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_430() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_449() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_451()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_415() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_448() {
    if (jj_3R_351()) return true;
    return false;
  }

  private boolean jj_3R_429() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_441() {
    if (jj_scan_token(_DEFAULT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_446()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COLON)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_447()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_448()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_449()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_428() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_412() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_427() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_445() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_450()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_426() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_409() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_444() {
    if (jj_3R_351()) return true;
    return false;
  }

  private boolean jj_3R_425() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_440() {
    if (jj_scan_token(CASE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_442()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_183()) return true;
    if (jj_scan_token(COLON)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_443()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_444()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_445()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_407() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_424() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_405() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_439() {
    if (jj_3R_441()) return true;
    return false;
  }

  private boolean jj_3R_404() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_435() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_438()) {
    jj_scanpos = xsp;
    if (jj_3R_439()) return true;
    }
    return false;
  }

  private boolean jj_3R_438() {
    if (jj_3R_440()) return true;
    return false;
  }

  private boolean jj_3R_403() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_402() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_401() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_400() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_418() {
    if (jj_scan_token(SWITCH)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_431()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_432()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_183()) return true;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_433()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LBRACE)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_434()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_435()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_436()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_399() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_398() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_397() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_396() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_419() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_437()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_395() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_368() {
    if (jj_3R_168()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_419()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_423() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_367() {
    if (jj_3R_303()) return true;
    return false;
  }

  private boolean jj_3R_393() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_392() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_366() {
    if (jj_3R_418()) return true;
    return false;
  }

  private boolean jj_3R_417() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_430()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_391() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_416() {
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_389() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_365() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_415()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_416()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_417()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_387() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_414() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_429()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_386() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_385() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_413() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_428()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_364() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_412()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_413()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_414()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_384() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_411() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_427()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_382() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_380() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_410() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_426()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_379() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_378() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_scan_token(VAR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_176()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_363() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_409()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_410()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_411()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_408() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_425()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_377() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_376() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_362() {
    if (jj_scan_token(THROW)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_407()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_183()) return true;
    xsp = jj_scanpos;
    if (jj_3R_408()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_406() {
    if (jj_scan_token(FINALLY)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_424()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_303()) return true;
    return false;
  }

  private boolean jj_3R_375() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_422() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_372() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_361() {
    if (jj_scan_token(TRY)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_401()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_303()) return true;
    if (jj_scan_token(CATCH)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_402()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_403()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_404()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_405()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_303()) return true;
    xsp = jj_scanpos;
    if (jj_3R_406()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_371() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_370() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_360() {
    if (jj_scan_token(WITH)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_398()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_399()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_183()) return true;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_400()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_351()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(FOR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_169()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_170()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_171()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_172()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3R_369() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_394() {
    if (jj_scan_token(VAR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_423()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(FOR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_166()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_167()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_168()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_325() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_359() {
    if (jj_scan_token(FOR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_392()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_393()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_394()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_395()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_396()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_183()) return true;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_397()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_351()) return true;
    return false;
  }

  private boolean jj_3R_390() {
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_323() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_388() {
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(FOR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_164()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_165()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_358() {
    if (jj_scan_token(FOR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_385()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_386()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_168()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_387()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_388()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_389()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_390()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_391()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_351()) return true;
    return false;
  }

  private boolean jj_3R_348() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_347() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_383() {
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_341() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_381() {
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_357() {
    if (jj_scan_token(FOR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_378()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_379()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_380()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_381()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_382()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_383()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_384()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_351()) return true;
    return false;
  }

  private boolean jj_3R_340() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_302() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_339() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_300() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_356() {
    if (jj_scan_token(DO)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_376()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_351()) return true;
    if (jj_scan_token(WHILE)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_377()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_373()) return true;
    return false;
  }

  private boolean jj_3R_320() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_355() {
    if (jj_scan_token(WHILE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_375()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_373()) return true;
    if (jj_3R_351()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_163()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_374() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_422()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_351()) return true;
    return false;
  }

  private boolean jj_3R_298() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_354() {
    if (jj_scan_token(IF)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_372()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_373()) return true;
    if (jj_3R_351()) return true;
    xsp = jj_scanpos;
    if (jj_3R_374()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_353() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_370()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COLON)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_371()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_351()) return true;
    return false;
  }

  private boolean jj_3R_352() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_369()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_351() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_352()) {
    jj_scanpos = xsp;
    if (jj_3R_353()) {
    jj_scanpos = xsp;
    if (jj_3R_354()) {
    jj_scanpos = xsp;
    if (jj_3R_355()) {
    jj_scanpos = xsp;
    if (jj_3R_356()) {
    jj_scanpos = xsp;
    if (jj_3R_357()) {
    jj_scanpos = xsp;
    if (jj_3R_358()) {
    jj_scanpos = xsp;
    if (jj_3R_359()) {
    jj_scanpos = xsp;
    if (jj_3R_360()) {
    jj_scanpos = xsp;
    if (jj_3R_361()) {
    jj_scanpos = xsp;
    if (jj_3R_362()) {
    jj_scanpos = xsp;
    if (jj_3R_363()) {
    jj_scanpos = xsp;
    if (jj_3R_364()) {
    jj_scanpos = xsp;
    if (jj_3R_365()) {
    jj_scanpos = xsp;
    if (jj_3R_366()) {
    jj_scanpos = xsp;
    if (jj_3R_367()) {
    jj_scanpos = xsp;
    if (jj_3R_368()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_324() {
    if (jj_3R_343()) return true;
    return false;
  }

  private boolean jj_3R_303() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_323()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_324()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_325()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_342() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_347()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_348()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_322() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_341()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_342()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_321() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_339()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_340()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_301() {
    if (jj_3R_322()) return true;
    return false;
  }

  private boolean jj_3R_299() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_320()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_321()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_350() {
    if (jj_3R_351()) return true;
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_scan_token(FUNCTION)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_298()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_299()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_300()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_301()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_302()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_303()) return true;
    return false;
  }

  private boolean jj_3R_349() {
    if (jj_3R_275()) return true;
    return false;
  }

  private boolean jj_3R_343() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_349()) {
    jj_scanpos = xsp;
    if (jj_3R_350()) return true;
    }
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_scan_token(MULTI_LINE_COMMENT)) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_scan_token(SINGLE_LINE_COMMENT)) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(L)) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_scan_token(S)) return true;
    return false;
  }

  private boolean jj_3R_173() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_337() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_346() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_345() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_294() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_338() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_295() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_334() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_317() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_334()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_316() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_333() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_315() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_333()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_293() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_315()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_187()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_316()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_317()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_292()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_293()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_294()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_336() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_346()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_335() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_345()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_318() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_335()) {
    jj_scanpos = xsp;
    if (jj_3R_336()) return true;
    }
    if (jj_scan_token(COLON)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_337()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_227()) return true;
    return false;
  }

  private boolean jj_3R_280() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_319() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_338()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_318()) return true;
    return false;
  }

  private boolean jj_3R_296() {
    if (jj_3R_318()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_319()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_295()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_296()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_297()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_344() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_3R_275()) return true;
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_3R_274()) return true;
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_3R_273()) return true;
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_scan_token(NEW)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_271()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_272()) return true;
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_scan_token(THIS)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_270()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_scan_token(CF_VARIABLE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_269()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_scan_token(NULL_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_268()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_277() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_scan_token(BOOLEAN_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_267()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_276() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_scan_token(REGEXP_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_266()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_265()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_263() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_264()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_scan_token(MINUS)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_262()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_263()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_261()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_260()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_328() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_258()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_183()) return true;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_259()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_231() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_236()) {
    jj_scanpos = xsp;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) {
    jj_scanpos = xsp;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) {
    jj_scanpos = xsp;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_326() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_344()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_187()) return true;
    return false;
  }

  private boolean jj_3R_304() {
    if (jj_3R_187()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_326()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_311() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_310() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_282() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_281() {
    if (jj_3R_304()) return true;
    return false;
  }

  private boolean jj_3R_309() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_280()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_281()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_282()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_278()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_183()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_279()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_scan_token(PLUS)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_277()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_231()) return true;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_276()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_231()) return true;
    return false;
  }

  private boolean jj_3R_232() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) {
    jj_scanpos = xsp;
    if (jj_3R_252()) {
    jj_scanpos = xsp;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_307() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_3R_231()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_232()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_306() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_305() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_332() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_331() {
    if (jj_3R_304()) return true;
    return false;
  }

  private boolean jj_3R_330() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_314() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_330()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_331()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_332()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_329() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_313() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_328()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_329()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_312() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_291() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_312()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_313()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_314()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_3R_291()) return true;
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_scan_token(TYPEOF)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_311()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_227()) return true;
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_scan_token(VOID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_310()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_255()) return true;
    return false;
  }

  private boolean jj_3R_287() {
    if (jj_scan_token(DELETE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_309()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_227()) return true;
    return false;
  }

  private boolean jj_3R_327() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_308() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_327()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_286() {
    if (jj_3R_227()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_308()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_285() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_307()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_227()) return true;
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_scan_token(MINUS)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_306()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_255()) return true;
    return false;
  }

  private boolean jj_3R_283() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_305()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_255()) return true;
    return false;
  }

  private boolean jj_3R_255() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_283()) {
    jj_scanpos = xsp;
    if (jj_3R_284()) {
    jj_scanpos = xsp;
    if (jj_3R_285()) {
    jj_scanpos = xsp;
    if (jj_3R_286()) {
    jj_scanpos = xsp;
    if (jj_3R_287()) {
    jj_scanpos = xsp;
    if (jj_3R_288()) {
    jj_scanpos = xsp;
    if (jj_3R_289()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_290() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_256() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_290()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_255()) return true;
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_3R_255()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_256()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_234() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_257()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_233()) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_3R_233()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_234()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_229() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_235()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_228()) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_3R_228()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_229()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_225() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) return true;
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_230()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_224()) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_3R_224()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_225()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(INSTANCEOF)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_226()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_227()) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_3R_219()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_220()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_221() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_217() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_223()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_216()) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_3R_216()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_217()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_scan_token(BIT_AND)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_218()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_3R_213()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_214()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_scan_token(XOR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_215()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_210()) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_3R_210()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_211()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_scan_token(BIT_OR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_212()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_207()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_3R_207()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_208()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_scan_token(SC_AND)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_209()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_204()) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_3R_204()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_205()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[213];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8,0x346,0x60681000,0x346,0xa0,0xa0,0x346,0x60681000,0x346,0x346,0x0,0x346,0x346,0x0,0x346,0x0,0x346,0x346,0x0,0x346,0x346,0x346,0x60681000,0x346,0x346,0x346,0x346,0x346,0x346,0x1000000,0x346,0x346,0x346,0x346,0x346,0x346,0x40200000,0x346,0x40200000,0x346,0x346,0x346,0x346,0x40200000,0x346,0x40200000,0x346,0x346,0x346,0x346,0x0,0x346,0x346,0x346,0x346,0x346,0x346,0x346,0x346,0x346,0x346,0x346,0x346,0x8000000,0x346,0x346,0x0,0x346,0x346,0x0,0x346,0x0,0x346,0x346,0x0,0x346,0x0,0x346,0x40200000,0x346,0x0,0x346,0x0,0x0,0x400000,0x40281000,0x346,0x346,0x346,0x346,0x104000,0x104000,0x346,0x346,0x346,0x60681000,0x346,0x0,0x346,0x346,0x60681000,0x346,0x0,0x346,0x346,0x346,0x40200000,0x346,0x0,0x346,0x346,0x346,0x0,0x346,0x0,0x346,0x0,0x0,0x346,0x346,0x346,0x0,0x0,0x346,0x0,0x346,0x0,0x346,0x0,0x346,0x0,0x346,0x0,0x0,0x0,0x346,0x346,0x0,0x0,0x0,0x346,0x0,0x0,0x346,0x0,0x0,0x346,0x0,0x0,0x346,0x0,0x346,0x346,0x0,0x346,0x0,0x346,0x0,0x346,0x346,0x346,0x40200000,0x346,0x0,0x346,0x346,0x346,0x40200000,0x346,0x0,0x0,0x346,0x346,0x346,0x346,0x346,0x40200000,0x346,0x0,0x0,0x346,0x346,0x346,0x346,0x346,0x346,0x346,0x346,0x346,0x346,0x346,0x346,0x346,0x346,0x346,0x40000000,0x346,0x0,0x346,0x0,0x346,0x346,0x346,0x0,0x346,0x346,0x40200000,0x0,0x346,0x346,0x0,0x346,0x346,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0xef344201,0x0,0x0,0x0,0x0,0xef344201,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xef344201,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8a100200,0x0,0x8a100200,0x0,0x0,0x0,0x0,0x8a100200,0x0,0x8a100200,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8a100200,0x0,0x0,0x0,0x0,0x0,0x20000001,0xcf344200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xef344201,0x0,0x0,0x0,0x0,0xef344201,0x0,0x0,0x0,0x0,0x0,0x8e100200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x8,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8a100200,0x0,0x0,0x0,0x0,0x0,0x8a100200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8a100200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80100200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8a100200,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0xc2a9ba8,0x0,0x0,0x0,0x0,0xc2a9ba8,0x0,0x0,0x40000000,0x0,0x0,0x1000,0x0,0x1000,0x0,0x0,0x400000,0x0,0x0,0x0,0xc2a9ba8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0a9ba8,0x0,0xc0a9ba8,0x0,0x0,0x0,0x0,0xc0a9ba8,0x0,0xc0a9ba8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x1000,0x0,0x200000,0x0,0x0,0x1000,0x0,0x200000,0x0,0xc0a9ba8,0x0,0x200000,0x0,0x200000,0x200000,0x0,0xc0a9ba8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc2a9ba8,0x0,0x200000,0x0,0x0,0xc2a9ba8,0x0,0x200000,0x0,0x0,0x0,0xc0a9ba8,0x0,0x400000,0x0,0x0,0x0,0x800000,0x0,0x400000,0x0,0x800000,0x800000,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x80000000,0x0,0x0,0x0,0x3000000,0x3000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0a9ba8,0x0,0x40000000,0x0,0x0,0x0,0xc0a9ba8,0x0,0x8000,0x40088000,0x0,0x0,0x0,0x0,0x0,0xc0a9ba8,0x0,0x40088000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa9ba8,0x0,0x400000,0x0,0x1020,0x0,0x0,0x0,0x1020,0x0,0x0,0xc4a9ba8,0x400000,0x0,0x0,0x400000,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x580,0x0,0x0,0x0,0x0,0x580,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x580,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x580,0x0,0x580,0x0,0x0,0x0,0x0,0x580,0x0,0x580,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x580,0x0,0x0,0x0,0x0,0x0,0x0,0x580,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x580,0x0,0x0,0x0,0x0,0x580,0x0,0x0,0x0,0x0,0x0,0x580,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfff00000,0xfff00000,0x0,0x0,0x0,0x0,0x20,0x0,0x40,0x0,0x4000,0x0,0x8000,0x0,0x2000,0x0,0x1c,0x1c,0x1c,0x0,0x0,0x0,0x3,0x3,0x0,0xe0000,0xe0000,0x0,0x600,0x600,0x0,0x11800,0x11800,0x0,0x0,0x0,0x0,0x180,0x0,0x180,0x0,0x180,0x0,0x0,0x0,0x580,0x0,0x0,0x0,0x0,0x0,0x580,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x580,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x580,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 213; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 213; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 213; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 213; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 213; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 213; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[129];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 213; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 129; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    token.next.beginColumn = jj_input_stream.column;     token.next.beginLine = jj_input_stream.line;     return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
