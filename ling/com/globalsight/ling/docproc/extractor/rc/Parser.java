/* Generated By:JavaCC: Do not edit this line. Parser.java */
package com.globalsight.ling.docproc.extractor.rc;
/**
 * A CSS Parser automatically generated by JavaCC.  Fires {@link
 * com.globalsight.ling.docproc.extractor.css.IParseEvents
 * IParseEvents}.
 */
public class Parser implements ParserConstants {
  private IParseEvents m_handler = null;
  public void setHandler(IParseEvents handler)
  {
    m_handler = handler;
  }

  final public void Parse() throws ParseException {
  Token t;
    m_handler.handleStart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNICODE_BOM:
      jj_consume_token(UNICODE_BOM);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case C:
      case STRINGTABLE:
      case BEGIN:
      case END:
      case CAPTION:
      case AUTO3STATE:
      case AUTOCHECKBOX:
      case PUSHBOX:
      case STATE3:
      case CHECKBOX:
      case CONTROL:
      case CTEXT:
      case DEFPUSHBUTTON:
      case GROUPBOX:
      case LTEXT:
      case PUSHBUTTON:
      case RADIOBUTTON:
      case RTEXT:
      case MENUITEM:
      case POPUP:
      case IDENTIFIER:
      case STRING_LITERAL:
      case NUMBER:
      case DELIM:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRINGTABLE:
        stringTable();
        break;
      default:
        jj_la1[2] = jj_gen;
        if (jj_2_1(2)) {
          caption();
        } else if (jj_2_2(2)) {
          auto3state();
        } else if (jj_2_3(2)) {
          autoCheckBox();
        } else if (jj_2_4(2)) {
          pushBox();
        } else if (jj_2_5(2)) {
          state3();
        } else if (jj_2_6(2)) {
          checkBox();
        } else if (jj_2_7(2)) {
          control();
        } else if (jj_2_8(2)) {
          ctext();
        } else if (jj_2_9(2)) {
          defPushButton();
        } else if (jj_2_10(2)) {
          groupBox();
        } else if (jj_2_11(2)) {
          lText();
        } else if (jj_2_12(2)) {
          pushButton();
        } else if (jj_2_13(2)) {
          radioButton();
        } else if (jj_2_14(2)) {
          rText();
        } else if (jj_2_15(2)) {
          menuItem();
        } else if (jj_2_16(2)) {
          popup();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
            W();
            break;
          case C:
          case BEGIN:
          case END:
          case CONTROL:
          case IDENTIFIER:
          case STRING_LITERAL:
          case NUMBER:
          case DELIM:
            others();
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    jj_consume_token(0);
    m_handler.handleFinish();
  }

  final public void stringTable() throws ParseException {
  Token t;
    t = jj_consume_token(STRINGTABLE);
    m_handler.addSkeleton(t.image);
    W();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      m_handler.addSkeleton(t.image);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      W();
    }
    t = jj_consume_token(BEGIN);
    m_handler.addSkeleton(t.image);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case IDENTIFIER:
      case NUMBER:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case NUMBER:
        oneString();
        break;
      case S:
      case L:
        W();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    t = jj_consume_token(END);
    m_handler.addSkeleton(t.image);
  }

  final public void caption() throws ParseException {
  Token t;
    t = jj_consume_token(CAPTION);
    m_handler.addSkeleton(t.image);
    W();
    label_4:
    while (true) {
      t = jj_consume_token(STRING_LITERAL);
      m_handler.addCaption(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
    }
  }

  final public void autoCheckBox() throws ParseException {
  Token t;
    t = jj_consume_token(AUTOCHECKBOX);
    m_handler.addSkeleton(t.image);
    W();
    label_5:
    while (true) {
      t = jj_consume_token(STRING_LITERAL);
      m_handler.addAuto3stateText(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
    }
  }

  final public void auto3state() throws ParseException {
  Token t;
    t = jj_consume_token(AUTO3STATE);
    m_handler.addSkeleton(t.image);
    W();
    label_6:
    while (true) {
      t = jj_consume_token(STRING_LITERAL);
      m_handler.addAuto3stateText(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
    }
  }

  final public void pushBox() throws ParseException {
  Token t;
    t = jj_consume_token(PUSHBOX);
    m_handler.addSkeleton(t.image);
    W();
    t = jj_consume_token(STRING_LITERAL);
    m_handler.addPushBox(t.image);
  }

  final public void state3() throws ParseException {
  Token t;
    t = jj_consume_token(STATE3);
    m_handler.addSkeleton(t.image);
    W();
    t = jj_consume_token(STRING_LITERAL);
    m_handler.addState3Text(t.image);
  }

  final public void checkBox() throws ParseException {
  Token t;
    t = jj_consume_token(CHECKBOX);
    m_handler.addSkeleton(t.image);
    W();
    t = jj_consume_token(STRING_LITERAL);
    m_handler.addCheckBoxText(t.image);
  }

  final public void control() throws ParseException {
  Token t;
    t = jj_consume_token(CONTROL);
    m_handler.addSkeleton(t.image);
    W();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
      m_handler.addControlText(t.image);
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
      m_handler.addSkeleton(t.image);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ctext() throws ParseException {
  Token t;
    t = jj_consume_token(CTEXT);
    m_handler.addSkeleton(t.image);
    W();
    t = jj_consume_token(STRING_LITERAL);
    m_handler.addctext(t.image);
  }

  final public void defPushButton() throws ParseException {
  Token t;
    t = jj_consume_token(DEFPUSHBUTTON);
    m_handler.addSkeleton(t.image);
    W();
    t = jj_consume_token(STRING_LITERAL);
    m_handler.addDefPushButton(t.image);
  }

  final public void groupBox() throws ParseException {
  Token t;
    t = jj_consume_token(GROUPBOX);
    m_handler.addSkeleton(t.image);
    W();
    t = jj_consume_token(STRING_LITERAL);
    m_handler.addGroupBoxText(t.image);
  }

  final public void lText() throws ParseException {
  Token t;
    t = jj_consume_token(LTEXT);
    m_handler.addSkeleton(t.image);
    W();
    t = jj_consume_token(STRING_LITERAL);
    m_handler.addLtext(t.image);
  }

  final public void rText() throws ParseException {
  Token t;
    t = jj_consume_token(RTEXT);
    m_handler.addSkeleton(t.image);
    W();
    t = jj_consume_token(STRING_LITERAL);
    m_handler.addRtext(t.image);
  }

  final public void menuItem() throws ParseException {
  Token t;
    t = jj_consume_token(MENUITEM);
    m_handler.addSkeleton(t.image);
    W();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
      m_handler.addMenuItemText(t.image);
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      m_handler.addSkeleton(t.image);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void popup() throws ParseException {
  Token t;
    t = jj_consume_token(POPUP);
    m_handler.addSkeleton(t.image);
    W();
    t = jj_consume_token(STRING_LITERAL);
      m_handler.addPopupText(t.image);
  }

  final public void pushButton() throws ParseException {
  Token t;
    t = jj_consume_token(PUSHBUTTON);
    m_handler.addSkeleton(t.image);
    W();
    t = jj_consume_token(STRING_LITERAL);
    m_handler.addPushButtonText(t.image);
  }

  final public void radioButton() throws ParseException {
  Token t;
    t = jj_consume_token(RADIOBUTTON);
    m_handler.addSkeleton(t.image);
    W();
    t = jj_consume_token(STRING_LITERAL);
    m_handler.addRadioButtonText(t.image);
  }

  final public void others() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DELIM:
      t = jj_consume_token(DELIM);
      m_handler.addSkeleton(t.image);
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      m_handler.addSkeleton(t.image);
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
      m_handler.addSkeleton(t.image);
      break;
    case BEGIN:
      t = jj_consume_token(BEGIN);
      m_handler.addSkeleton(t.image);
      break;
    case END:
      t = jj_consume_token(END);
      m_handler.addSkeleton(t.image);
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
      m_handler.addSkeleton(t.image);
      break;
    case CONTROL:
      t = jj_consume_token(CONTROL);
      m_handler.addSkeleton(t.image);
      break;
    case C:
      t = jj_consume_token(C);
      m_handler.addSkeleton(t.image);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void oneString() throws ParseException {
  Token t1, t2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t1 = jj_consume_token(IDENTIFIER);
      m_handler.addSkeleton(t1.image);
      break;
    case NUMBER:
      t1 = jj_consume_token(NUMBER);
      m_handler.addSkeleton(t1.image);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
      W();
    }
    label_8:
    while (true) {
      t2 = jj_consume_token(STRING_LITERAL);
      m_handler.addStringTableValue(t2.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_8;
      }
    }
  }

  final public void W() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S:
      t = jj_consume_token(S);
    m_handler.addSkeleton(t.image);
      break;
    case L:
      t = jj_consume_token(L);
    m_handler.addSkeleton(t.image);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(PUSHBOX)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(RADIOBUTTON)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(GROUPBOX)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(CAPTION)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(CONTROL)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(MENUITEM)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(L)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(PUSHBUTTON)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(DEFPUSHBUTTON)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(AUTO3STATE)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(S)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(CHECKBOX)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(RTEXT)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(CTEXT)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(STATE3)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(POPUP)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(AUTOCHECKBOX)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(LTEXT)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8,0x39fffff6,0x20,0x390040d6,0x1000000,0x6,0x11000006,0x11000006,0x8000000,0x8000000,0x8000000,0x18000000,0x9000000,0x390040d0,0x11000000,0x6,0x8000000,0x6,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[16];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[30];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    token.next.beginColumn = jj_input_stream.column;     token.next.beginLine = jj_input_stream.line;     return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 16; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
