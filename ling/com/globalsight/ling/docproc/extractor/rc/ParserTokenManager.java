/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package com.globalsight.ling.docproc.extractor.rc;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffe0L) != 0L)
         {
            jjmatchedKind = 24;
            return 6;
         }
         return -1;
      case 1:
         if ((active0 & 0xffffe0L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 1;
            return 6;
         }
         return -1;
      case 2:
         if ((active0 & 0x80L) != 0L)
            return 6;
         if ((active0 & 0xffff60L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 2;
            return 6;
         }
         return -1;
      case 3:
         if ((active0 & 0xffff60L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 3;
            return 6;
         }
         return -1;
      case 4:
         if ((active0 & 0xa48040L) != 0L)
            return 6;
         if ((active0 & 0x5b7f20L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 4;
            return 6;
         }
         return -1;
      case 5:
         if ((active0 & 0x1000L) != 0L)
            return 6;
         if ((active0 & 0x5b6f20L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 5;
            return 6;
         }
         return -1;
      case 6:
         if ((active0 & 0x4900L) != 0L)
            return 6;
         if ((active0 & 0x5b2620L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 6;
            return 6;
         }
         return -1;
      case 7:
         if ((active0 & 0x422000L) != 0L)
            return 6;
         if ((active0 & 0x190620L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 7;
            return 6;
         }
         return -1;
      case 8:
         if ((active0 & 0x190620L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 8;
            return 6;
         }
         return -1;
      case 9:
         if ((active0 & 0x80200L) != 0L)
            return 6;
         if ((active0 & 0x110420L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 9;
            return 6;
         }
         return -1;
      case 10:
         if ((active0 & 0x100020L) != 0L)
            return 6;
         if ((active0 & 0x10400L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 10;
            return 6;
         }
         return -1;
      case 11:
         if ((active0 & 0x400L) != 0L)
            return 6;
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 11;
            return 6;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x600L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xe100L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x880800L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x300000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1020L);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x100100L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x410040L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x804000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x249020L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x80e00L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 68:
      case 100:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x24a000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x404000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x800100L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80800L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x600L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x80800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100060L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x600L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x5100L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0xc20000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0x248000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x80800L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400100L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 78:
      case 110:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 6, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x20L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 80:
      case 112:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 84:
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 6);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 6);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 6);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 51:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 6);
         break;
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x122000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x4900L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x10200L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x400400L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 76:
      case 108:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 6);
         break;
      case 78:
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 6);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x22000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x80220L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 88:
      case 120:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x220L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      case 77:
      case 109:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 22, 6);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x180000L);
      case 88:
      case 120:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 13, 6);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x20L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x100200L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L);
      case 69:
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(9, 9, 6);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x20L);
      case 78:
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 19, 6);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(10, 5, 6);
         break;
      case 78:
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(10, 20, 6);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000L);
      case 88:
      case 120:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(11, 10, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(12, 16, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x0L, 0x8000000000000000L
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x0L, 0x4000000000000000L
};
static final long[] jjbitVec2 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x3fffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec10 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec11 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec12 = {
   0x1600L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec13 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec14 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec15 = {
   0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L
};
static final long[] jjbitVec16 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec17 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec18 = {
   0x0L, 0x3ffL, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 38;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x104001200L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAddTwoStates(1, 3);
                  }
                  else if (curChar == 47)
                     jjAddStates(3, 4);
                  else if (curChar == 46)
                     jjCheckNAdd(22);
                  else if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  else if (curChar == 36)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAdd(6);
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0x104001200L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddTwoStates(1, 3);
                  break;
               case 2:
                  if (curChar != 10)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddTwoStates(1, 3);
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if (curChar != 36)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  break;
               case 8:
                  if (curChar == 34 && kind > 27)
                     kind = 27;
                  break;
               case 9:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(8, 12);
                  break;
               case 10:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(13, 17);
                  break;
               case 13:
                  if (curChar == 10)
                     jjCheckNAddStates(13, 17);
                  break;
               case 14:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 21);
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 19:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 21:
                  if (curChar == 46)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(0, 2);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 21);
                  break;
               case 26:
                  if (curChar == 47)
                     jjAddStates(3, 4);
                  break;
               case 27:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 28:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar == 42)
                     jjCheckNAddStates(22, 24);
                  break;
               case 30:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(31, 29);
                  break;
               case 31:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(31, 29);
                  break;
               case 32:
                  if (curChar == 47 && kind > 4)
                     kind = 4;
                  break;
               case 33:
                  if (curChar == 47)
                     jjCheckNAddStates(25, 27);
                  break;
               case 34:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 35:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddTwoStates(35, 37);
                  break;
               case 36:
                  if (curChar != 10)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddTwoStates(35, 37);
                  break;
               case 37:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(6);
                  break;
               case 9:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(8, 12);
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(12, 14);
                  break;
               case 15:
                  if (curChar == 92)
                     jjCheckNAddStates(28, 32);
                  break;
               case 16:
                  if ((0x114404411144044L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 28:
                  jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
               case 31:
                  jjCheckNAddTwoStates(31, 29);
                  break;
               case 34:
                  jjAddStates(25, 27);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 3)
                        kind = 3;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAdd(6);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 28)
                        kind = 28;
                     jjCheckNAddStates(0, 2);
                  }
                  break;
               case 5:
               case 6:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(6);
                  break;
               case 9:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(8, 12);
                  break;
               case 10:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 22:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 23:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(0, 2);
                  break;
               case 24:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(25, 21);
                  break;
               case 28:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
               case 31:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(31, 29);
                  break;
               case 34:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(25, 27);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 38 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   24, 25, 21, 27, 33, 8, 9, 15, 10, 11, 8, 9, 15, 12, 14, 8, 
   9, 15, 18, 8, 9, 15, 29, 30, 32, 34, 35, 37, 16, 17, 19, 12, 
   14, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 254:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec1[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec2[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec11[i2] & l2) != 0L);
      default :
         if ((jjbitVec10[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec18[i2] & l2) != 0L);
      default :
         if ((jjbitVec12[i1] & l1) != 0L)
            if ((jjbitVec13[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[38];
private final int[] jjstateSet = new int[76];
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 38; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 29)
   {
      jjmatchedKind = 29;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
