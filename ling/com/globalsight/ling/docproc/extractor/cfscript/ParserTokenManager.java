/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package com.globalsight.ling.docproc.extractor.cfscript;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3e000000L) != 0L)
         {
            jjmatchedKind = 115;
            return 39;
         }
         if ((active0 & 0x3f80000000L) != 0L || (active1 & 0x40000080000L) != 0L)
         {
            jjmatchedKind = 115;
            return 41;
         }
         if ((active1 & 0x40000L) != 0L)
            return 19;
         if ((active0 & 0x1f8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            return 35;
         }
         if ((active0 & 0x3e07fe000187fe00L) != 0L || (active1 & 0x202e002300000L) != 0L)
         {
            jjmatchedKind = 115;
            return 85;
         }
         if ((active0 & 0x18000000000L) != 0L || (active1 & 0x10001000080L) != 0L)
         {
            jjmatchedKind = 115;
            return 60;
         }
         if ((active0 & 0x4000000000L) != 0L || (active1 & 0x1840000000L) != 0L)
         {
            jjmatchedKind = 115;
            return 182;
         }
         if ((active1 & 0x2000000000000000L) != 0L)
            return 9;
         if ((active1 & 0x100000000000L) != 0L || (active2 & 0x1L) != 0L)
            return 14;
         if ((active0 & 0x40000000L) != 0L || (active1 & 0x310000000L) != 0L)
         {
            jjmatchedKind = 115;
            return 135;
         }
         if ((active1 & 0x400000000000L) != 0L)
            return 102;
         if ((active0 & 0x780000L) != 0L)
         {
            jjmatchedKind = 115;
            return 82;
         }
         return -1;
      case 1:
         if ((active0 & 0x3c80000000L) != 0L || (active1 & 0x22b50300000L) != 0L)
            return 85;
         if ((active0 & 0x600000L) != 0L)
            return 81;
         if ((active1 & 0x80000L) != 0L)
            return 215;
         if ((active1 & 0x1000000000L) != 0L)
            return 181;
         if ((active2 & 0x1L) != 0L)
            return 11;
         if ((active0 & 0xc0000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 115;
               jjmatchedPos = 1;
            }
            return 34;
         }
         if ((active0 & 0x3f3fffc37f9ffe00L) != 0L || (active1 & 0x204c003000080L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 115;
               jjmatchedPos = 1;
            }
            return 85;
         }
         if ((active1 & 0x10000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 115;
               jjmatchedPos = 1;
            }
            return 50;
         }
         return -1;
      case 2:
         if ((active1 & 0x10000000000L) != 0L)
            return 216;
         if ((active0 & 0x3d7ffecb6fdffe00L) != 0L || (active1 & 0x2200080L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 115;
               jjmatchedPos = 2;
            }
            return 85;
         }
         if ((active0 & 0x280013010000000L) != 0L || (active1 & 0x206c901000000L) != 0L)
            return 85;
         return -1;
      case 3:
         if ((active0 & 0x240800404080b000L) != 0L || (active1 & 0x80L) != 0L)
            return 85;
         if ((active0 & 0x1977feab2f5f4e00L) != 0L || (active1 & 0x2200000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 3;
            return 85;
         }
         return -1;
      case 4:
         if ((active0 & 0x103140000e034800L) != 0L || (active1 & 0x200000L) != 0L)
            return 85;
         if ((active0 & 0x946beab215c0600L) != 0L || (active1 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 115;
               jjmatchedPos = 4;
            }
            return 85;
         }
         return -1;
      case 5:
         if ((active0 & 0x122b08200500000L) != 0L)
            return 85;
         if ((active0 & 0x8440e29250c0600L) != 0L || (active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 5;
            return 85;
         }
         return -1;
      case 6:
         if ((active0 & 0x60005080400L) != 0L)
            return 85;
         if ((active0 & 0x844082920040200L) != 0L || (active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 6;
            return 85;
         }
         return -1;
      case 7:
         if ((active0 & 0x800000020040200L) != 0L || (active1 & 0x2000000L) != 0L)
            return 85;
         if ((active0 & 0x44082900000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 7;
            return 85;
         }
         return -1;
      case 8:
         if ((active0 & 0x40082000000000L) != 0L)
            return 85;
         if ((active0 & 0x4000900000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 8;
            return 85;
         }
         return -1;
      case 9:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 9;
            return 85;
         }
         if ((active0 & 0x900000000L) != 0L)
            return 85;
         return -1;
      case 10:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 10;
            return 85;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1400000000000000L, 0x0L);
      case 35:
         return jjStopAtPos(0, 80);
      case 38:
         return jjStopAtPos(0, 111);
      case 40:
         return jjStopAtPos(0, 72);
      case 41:
         return jjStopAtPos(0, 73);
      case 42:
         return jjStopAtPos(0, 109);
      case 43:
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 79);
      case 45:
         jjmatchedKind = 108;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1L);
      case 46:
         return jjStartNfaWithStates_0(0, 82, 19);
      case 47:
         return jjStartNfaWithStates_0(0, 110, 102);
      case 58:
         return jjStopAtPos(0, 118);
      case 59:
         return jjStopAtPos(0, 78);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa00000000000000L, 0x0L);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 119);
      case 91:
         return jjStopAtPos(0, 76);
      case 92:
         return jjStopAtPos(0, 114);
      case 93:
         return jjStopAtPos(0, 77);
      case 94:
         return jjStopAtPos(0, 112);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x8000000000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1c00L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7e000L, 0x2000000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x780000L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1800000L, 0x20000300000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3e000000L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x310000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3f80000000L, 0x40000080000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x1840000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x18000000000L, 0x10001000080L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1e0000000000L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x7c00000000000L, 0x0L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1f8000000000000L, 0x0L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0xe00000000000000L, 0x0L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x3000000000000000L, 0x0L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 74);
      case 124:
         return jjStopAtPos(0, 120);
      case 125:
         return jjStopAtPos(0, 75);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 43:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 127);
         break;
      case 45:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(1, 128, 11);
         break;
      case 60:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 125);
         break;
      case 61:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1800000000000000L, active2, 0L);
      case 62:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200028000006000L, active1, 0L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(1, 97, 85);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 100, 181);
         return jjMoveStringLiteralDfa2_0(active0, 0x210000180000L, active1, 0x1000000L, active2, 0L);
      case 70:
      case 102:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 85);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1038400000008000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000006000000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8810000L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000L, active1, 0x40000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x3800000000L, active1, 0x8000000000L, active2, 0L);
      case 79:
      case 111:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc00004050460400L, active1, 0x2014002000000L, active2, 0L);
      case 81:
      case 113:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000200000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 101, 85);
         return jjMoveStringLiteralDfa2_0(active0, 0xc00c0000000800L, active1, 0L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 83, 215);
         break;
      case 84:
      case 116:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0x900000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1100020000000L, active1, 0x80L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x104000000001000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(2, 123);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(2, 124);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40800000018000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 68:
      case 100:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 103, 85);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 113, 85);
         break;
      case 69:
      case 101:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 96, 85);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 99, 85);
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x140a040000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000100000L, active1, 0x80L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4004026060000L, active1, 0x2000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x480008000400L, active1, 0L);
      case 80:
      case 112:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x101000300000000L, active1, 0L);
      case 81:
      case 113:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 88, 85);
         break;
      case 82:
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 85);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 57, 85);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 102, 85);
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800802200L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 104, 216);
         return jjMoveStringLiteralDfa3_0(active0, 0x200020a041005000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0x200000L);
      case 86:
      case 118:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 105, 85);
         break;
      case 87:
      case 119:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 85);
         break;
      case 89:
      case 121:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 55, 85);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000e080800L, active1, 0x200000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000020004000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 85);
         break;
      case 69:
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 85);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 85);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 85);
         return jjMoveStringLiteralDfa4_0(active0, 0x101002001100000L, active1, 0L);
      case 71:
      case 103:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 85);
         break;
      case 72:
      case 104:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 85);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 85);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000100100000400L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 85);
         return jjMoveStringLiteralDfa4_0(active0, 0x30000200000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 85);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 85);
         return jjMoveStringLiteralDfa4_0(active0, 0x30000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x2880800040200L, active1, 0x2000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x60800000000L, active1, 0x2000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 85);
         return jjMoveStringLiteralDfa5_0(active0, 0x80100000400L, active1, 0L);
      case 72:
      case 104:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 85);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x900000040000L, active1, 0L);
      case 75:
      case 107:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 85);
         break;
      case 76:
      case 108:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 85);
         return jjMoveStringLiteralDfa5_0(active0, 0x4400000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 85);
         return jjMoveStringLiteralDfa5_0(active0, 0x202200000200L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 85);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 85);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 85);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 85);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000020100000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L);
      case 87:
      case 119:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x600L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 85);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 85);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 85);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 85);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 85);
         break;
      case 70:
      case 102:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 85);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L);
      case 72:
      case 104:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 85);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x840000020000000L, active1, 0x2000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x4080000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 85);
         return jjMoveStringLiteralDfa6_0(active0, 0x800040000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 85);
         break;
      case 84:
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 85);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000200L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 85);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 85);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000100000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 85);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000020000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 85);
         break;
      case 84:
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 85);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 85);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 85);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 85);
         return jjMoveStringLiteralDfa8_0(active0, 0x80800000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 85);
         return jjMoveStringLiteralDfa8_0(active0, 0x44000100000000L, active1, 0L);
      case 83:
      case 115:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 89, 85);
         break;
      case 84:
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 9, 85);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 43, 85);
         break;
      case 69:
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 37, 85);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L);
      case 84:
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 54, 85);
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 70:
      case 102:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 35, 85);
         break;
      case 83:
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(9, 32, 85);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 50, 85);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x100000000L, 0x0L
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x0L, 0x8000000000000000L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0x4000000000000000L
};
static final long[] jjbitVec3 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 215;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 182:
               case 85:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 34:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 216:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAdd(85);
                  }
                  else if ((0x104001200L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 135:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 39:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 41:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 50:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 215:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAdd(85);
                  }
                  else if ((0x104001200L & l) != 0L)
                     jjCheckNAddStates(4, 7);
                  else if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(4, 7);
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 82:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAddStates(8, 11);
                  }
                  else if ((0x104001200L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAddTwoStates(1, 3);
                  }
                  else if (curChar == 47)
                     jjAddStates(12, 14);
                  else if (curChar == 36)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAdd(85);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(29, 30);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(24, 25);
                  else if (curChar == 46)
                     jjCheckNAdd(19);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 9;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(17);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAddTwoStates(98, 100);
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 60:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 102:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(116, 117);
                  else if (curChar == 47)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAddTwoStates(108, 114);
                  }
                  if (curChar == 47)
                     jjCheckNAddStates(15, 17);
                  break;
               case 181:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 35:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 81:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 0:
                  if ((0x104001200L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddTwoStates(1, 3);
                  break;
               case 2:
                  if (curChar != 10)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddTwoStates(1, 3);
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
               case 6:
                  if (curChar != 45)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
               case 12:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 13:
                  if (curChar == 62 && kind > 8)
                     kind = 8;
                  break;
               case 14:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 15:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(17);
                  break;
               case 18:
                  if (curChar == 46)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 24:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if (curChar != 34)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(27, 25);
                  break;
               case 27:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 28:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 29:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if (curChar != 39)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(32, 30);
                  break;
               case 32:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 42:
                  if ((0x104001200L & l) != 0L)
                     jjCheckNAddStates(4, 7);
                  break;
               case 43:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(4, 7);
                  break;
               case 44:
                  if (curChar == 10)
                     jjCheckNAddStates(4, 7);
                  break;
               case 45:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 51:
                  if ((0x104001200L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 52:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 53:
                  if (curChar == 10)
                     jjCheckNAddStates(0, 3);
                  break;
               case 54:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 63:
                  if ((0x104001200L & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 64:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 65:
                  if (curChar == 10)
                     jjCheckNAddStates(24, 27);
                  break;
               case 66:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 68:
                  if ((0x104001200L & l) != 0L)
                     jjCheckNAddStates(28, 31);
                  break;
               case 69:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(28, 31);
                  break;
               case 70:
                  if (curChar == 10)
                     jjCheckNAddStates(28, 31);
                  break;
               case 71:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 84:
                  if (curChar != 36)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddStates(8, 11);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(87, 88);
                  break;
               case 88:
                  if (curChar != 46)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddTwoStates(89, 90);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddTwoStates(89, 90);
                  break;
               case 91:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(92);
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(92);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddTwoStates(93, 94);
                  break;
               case 95:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(96);
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(96);
                  break;
               case 97:
                  if (curChar != 48)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddTwoStates(98, 100);
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 100:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(100);
                  break;
               case 101:
                  if (curChar == 47)
                     jjAddStates(12, 14);
                  break;
               case 103:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 104:
                  if ((0x2400L & l) != 0L && kind > 4)
                     kind = 4;
                  break;
               case 105:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 106:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar != 47)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddTwoStates(108, 114);
                  break;
               case 108:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddTwoStates(108, 114);
                  break;
               case 109:
               case 110:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(110, 111);
                  break;
               case 111:
                  if (curChar != 62)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(112);
                  break;
               case 112:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(112);
                  break;
               case 113:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 114:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(116, 117);
                  break;
               case 116:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(116, 117);
                  break;
               case 117:
                  if (curChar == 42)
                     jjCheckNAddStates(32, 34);
                  break;
               case 118:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(119, 117);
                  break;
               case 119:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(119, 117);
                  break;
               case 120:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 123:
                  if ((0x104001200L & l) != 0L)
                     jjCheckNAddStates(35, 38);
                  break;
               case 124:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(35, 38);
                  break;
               case 125:
                  if (curChar == 10)
                     jjCheckNAddStates(35, 38);
                  break;
               case 126:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 137:
                  if ((0x104001200L & l) != 0L)
                     jjCheckNAddStates(39, 42);
                  break;
               case 138:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(39, 42);
                  break;
               case 139:
                  if (curChar == 10)
                     jjCheckNAddStates(39, 42);
                  break;
               case 140:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 142:
                  if ((0x104001200L & l) != 0L)
                     jjCheckNAddStates(43, 46);
                  break;
               case 143:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(43, 46);
                  break;
               case 144:
                  if (curChar == 10)
                     jjCheckNAddStates(43, 46);
                  break;
               case 145:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 147:
                  if ((0x104001200L & l) != 0L)
                     jjCheckNAddStates(47, 50);
                  break;
               case 148:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(47, 50);
                  break;
               case 149:
                  if (curChar == 10)
                     jjCheckNAddStates(47, 50);
                  break;
               case 150:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 152:
                  if ((0x104001200L & l) != 0L)
                     jjCheckNAddStates(51, 54);
                  break;
               case 153:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(51, 54);
                  break;
               case 154:
                  if (curChar == 10)
                     jjCheckNAddStates(51, 54);
                  break;
               case 155:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 173:
                  if ((0x104001200L & l) != 0L)
                     jjCheckNAddStates(55, 58);
                  break;
               case 174:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(55, 58);
                  break;
               case 175:
                  if (curChar == 10)
                     jjCheckNAddStates(55, 58);
                  break;
               case 176:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 184:
                  if ((0x104001200L & l) != 0L)
                     jjCheckNAddStates(59, 62);
                  break;
               case 185:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(59, 62);
                  break;
               case 186:
                  if (curChar == 10)
                     jjCheckNAddStates(59, 62);
                  break;
               case 187:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 189:
                  if ((0x104001200L & l) != 0L)
                     jjCheckNAddStates(63, 66);
                  break;
               case 190:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(63, 66);
                  break;
               case 191:
                  if (curChar == 10)
                     jjCheckNAddStates(63, 66);
                  break;
               case 192:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 194:
                  if ((0x104001200L & l) != 0L)
                     jjCheckNAddStates(67, 70);
                  break;
               case 195:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(67, 70);
                  break;
               case 196:
                  if (curChar == 10)
                     jjCheckNAddStates(67, 70);
                  break;
               case 197:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 199:
                  if ((0x104001200L & l) != 0L)
                     jjCheckNAddStates(71, 74);
                  break;
               case 200:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(71, 74);
                  break;
               case 201:
                  if (curChar == 10)
                     jjCheckNAddStates(71, 74);
                  break;
               case 202:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 182:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAdd(85);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 213;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAdd(85);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 216:
               case 85:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 135:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAdd(85);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 169;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAdd(85);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAdd(85);
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(75, 77);
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAdd(85);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjAddStates(78, 80);
                  break;
               case 215:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 82:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAdd(85);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAdd(85);
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjAddStates(81, 82);
                  else if ((0x8000000080L & l) != 0L)
                     jjAddStates(83, 84);
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 60:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAdd(85);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 181:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAdd(85);
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 183;
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAdd(85);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 81:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAdd(85);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 20:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(85, 86);
                  break;
               case 24:
                  jjCheckNAddTwoStates(24, 25);
                  break;
               case 27:
                  jjCheckNAddStates(18, 20);
                  break;
               case 29:
                  jjCheckNAddTwoStates(29, 30);
                  break;
               case 32:
                  jjCheckNAddStates(21, 23);
                  break;
               case 33:
                  if ((0x2000000020L & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 36:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 38:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 40:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 46:
                  if ((0x10000000100000L & l) != 0L && kind > 86)
                     kind = 86;
                  break;
               case 47:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 55:
                  if ((0x100000001000L & l) != 0L && kind > 87)
                     kind = 87;
                  break;
               case 56:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 61:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(87, 89);
                  break;
               case 67:
                  if ((0x10000000100000L & l) != 0L)
                     jjAddStates(90, 92);
                  break;
               case 72:
                  if ((0x400000004000L & l) != 0L && kind > 90)
                     kind = 90;
                  break;
               case 73:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 80:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 83:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 90:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(93, 94);
                  break;
               case 94:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(95, 96);
                  break;
               case 98:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(99);
                  break;
               case 99:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(99);
                  break;
               case 103:
                  jjAddStates(15, 17);
                  break;
               case 108:
                  if (kind > 5)
                     kind = 5;
                  jjAddStates(97, 98);
                  break;
               case 112:
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 116:
                  jjCheckNAddTwoStates(116, 117);
                  break;
               case 118:
               case 119:
                  jjCheckNAddTwoStates(119, 117);
                  break;
               case 121:
                  if ((0x8000000080L & l) != 0L)
                     jjAddStates(83, 84);
                  break;
               case 122:
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(99, 101);
                  break;
               case 127:
                  if ((0x400000004000L & l) != 0L && kind > 91)
                     kind = 91;
                  break;
               case 128:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 132:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 136:
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(102, 104);
                  break;
               case 141:
                  if ((0x400000004000L & l) != 0L)
                     jjAddStates(105, 107);
                  break;
               case 146:
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(108, 110);
                  break;
               case 151:
                  if ((0x100000001000L & l) != 0L)
                     jjAddStates(111, 113);
                  break;
               case 156:
                  if ((0x800000008000L & l) != 0L && kind > 95)
                     kind = 95;
                  break;
               case 157:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 159:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 163:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 164:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 167:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if ((0x100000001000L & l) != 0L)
                     jjAddStates(81, 82);
                  break;
               case 172:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(114, 116);
                  break;
               case 177:
                  if ((0x400000004000L & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 178:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 183:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(117, 119);
                  break;
               case 188:
                  if ((0x400000004000L & l) != 0L)
                     jjAddStates(120, 122);
                  break;
               case 193:
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(123, 125);
                  break;
               case 198:
                  if ((0x100000001000L & l) != 0L)
                     jjAddStates(126, 128);
                  break;
               case 203:
                  if ((0x800000008000L & l) != 0L && kind > 98)
                     kind = 98;
                  break;
               case 204:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 205:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 206:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 210:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 211:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 212:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 213:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 214:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 182:
               case 85:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 34:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 216:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 3);
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAdd(85);
                  }
                  break;
               case 135:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 39:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 41:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 50:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 215:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(4, 7);
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAdd(85);
                  }
                  break;
               case 82:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 3)
                        kind = 3;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAdd(85);
                  }
                  break;
               case 60:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 181:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 35:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 81:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 24:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 27:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(18, 20);
                  break;
               case 29:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 32:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(21, 23);
                  break;
               case 42:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(4, 7);
                  break;
               case 51:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 3);
                  break;
               case 63:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(24, 27);
                  break;
               case 68:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(28, 31);
                  break;
               case 84:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(85);
                  break;
               case 103:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(15, 17);
                  break;
               case 108:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjAddStates(97, 98);
                  break;
               case 112:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 116:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(116, 117);
                  break;
               case 118:
               case 119:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(119, 117);
                  break;
               case 123:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(35, 38);
                  break;
               case 137:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(39, 42);
                  break;
               case 142:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(43, 46);
                  break;
               case 147:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(47, 50);
                  break;
               case 152:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(51, 54);
                  break;
               case 173:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(55, 58);
                  break;
               case 184:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(59, 62);
                  break;
               case 189:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(63, 66);
                  break;
               case 194:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(67, 70);
                  break;
               case 199:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(71, 74);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 215 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   51, 52, 54, 59, 42, 43, 45, 48, 87, 88, 93, 94, 102, 107, 115, 103, 
   104, 106, 24, 27, 25, 29, 32, 30, 63, 64, 66, 80, 68, 69, 71, 78, 
   117, 118, 120, 123, 124, 126, 130, 137, 138, 140, 165, 142, 143, 145, 162, 147, 
   148, 150, 161, 152, 153, 155, 157, 173, 174, 176, 180, 184, 185, 187, 212, 189, 
   190, 192, 209, 194, 195, 197, 208, 199, 200, 202, 204, 42, 43, 45, 51, 52, 
   54, 182, 214, 135, 170, 21, 22, 63, 64, 66, 68, 69, 71, 91, 92, 95, 
   96, 108, 114, 123, 124, 126, 137, 138, 140, 142, 143, 145, 147, 148, 150, 152, 
   153, 155, 173, 174, 176, 184, 185, 187, 189, 190, 192, 194, 195, 197, 199, 200, 
   202, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 254:
         return ((jjbitVec1[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec5[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec6[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\43", 
"\75", "\56", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, "\53", 
"\55", "\52", "\57", "\46", "\136", null, "\134", null, null, null, "\72", "\77", 
"\174", "\75\75", "\41\75", "\75\75\75", "\41\75\75", "\74\74", "\76\76", "\53\53", 
"\55\55", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[215];
private final int[] jjstateSet = new int[430];
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 215; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
