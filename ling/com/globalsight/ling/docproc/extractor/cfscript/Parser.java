/* Generated By:JavaCC: Do not edit this line. Parser.java */
package com.globalsight.ling.docproc.extractor.cfscript;

/**
 * A CFScript Parser automatically generated by JavaCC.  Fires {@link
 * com.globalsight.ling.docproc.extractor.cfscript.IParseEvents
 * IParseEvents}.
 */
public class Parser implements ParserConstants {
    private IParseEvents m_handler = null;

    public void setHandler(IParseEvents handler)
    {
        m_handler = handler;
    }

    private void appendToken(Token t1, String s, Token t2)
    {
        t1.image = t1.image + ((s != null) ? s : "") + t2.image;
        t1.endLine = t2.endLine;
        t1.endColumn = t2.endColumn;
        t1.next = t2.next;
    }

/*********************************************
 * THE CFSCRIPT LANGUAGE GRAMMAR STARTS HERE *
 *********************************************/

/**
 * Main entry point of the parser.  This rule parses an entire
 * CFScript program.
 */
  final public void parse() throws ParseException {
    Token t;
                         m_handler.handleStart();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      W();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNICODE_BOM:
      jj_consume_token(UNICODE_BOM);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CDO:
      t = jj_consume_token(CDO);
                         m_handler.handleCDO(t.image);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        W();
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case CONTINUE:
      case DELETE:
      case DO:
      case FOR:
      case FUNCTION:
      case IF:
      case NEW:
      case RETURN:
      case SWITCH:
      case THIS:
      case THROW:
      case TRY:
      case TYPEOF:
      case VAR:
      case WHILE:
      case WITH:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case HASH:
      case NOT:
      case MINUS:
      case IDENTIFIER:
      case 127:
      case 128:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      Element();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CRIPPLED_SINGLE_LINE_COMMENT:
    case CDC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CDC:
        t = jj_consume_token(CDC);
                         m_handler.handleCDC(t.image);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_4;
          }
          W();
        }
        break;
      case CRIPPLED_SINGLE_LINE_COMMENT:
        t = jj_consume_token(CRIPPLED_SINGLE_LINE_COMMENT);
                         m_handler.handleComment(t.image,
                          m_handler.CRIPPLED_SINGLE_LINE_COMMENT);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(0);
                         m_handler.handleFinish();
  }

  final public void W() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S:
      t = jj_consume_token(S);
                         m_handler.handleWhite    (t.image);
      break;
    case L:
      t = jj_consume_token(L);
                         m_handler.handleEndOfLine(t.image);
      break;
    case SINGLE_LINE_COMMENT:
      t = jj_consume_token(SINGLE_LINE_COMMENT);
                         m_handler.handleComment(t.image,
                          m_handler.SINGLE_LINE_COMMENT);
      break;
    case MULTI_LINE_COMMENT:
      t = jj_consume_token(MULTI_LINE_COMMENT);
                         m_handler.handleComment(t.image,
                          m_handler.MULTI_LINE_COMMENT);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Element() throws ParseException {
    Token t, t1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
      t = jj_consume_token(FUNCTION);
                         m_handler.handleKeyword(t.image);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_5;
        }
        W();
      }
      t = jj_consume_token(IDENTIFIER);
                         m_handler.handleLiteral(t.image);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_6;
        }
        W();
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_7;
        }
        t = jj_consume_token(DOT);
                         m_handler.handleOperator(t.image);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_8;
          }
          W();
        }
        t = jj_consume_token(IDENTIFIER);
                         m_handler.handleLiteral(t.image);
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_9;
          }
          W();
        }
      }
      t = jj_consume_token(LPAREN);
                         m_handler.handleOperator(t.image);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_10;
        }
        W();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ParameterList();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      t = jj_consume_token(RPAREN);
                         m_handler.handleOperator(t.image);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_11;
        }
        W();
      }
      CompoundStatement();
      break;
    case BREAK:
    case CONTINUE:
    case DELETE:
    case DO:
    case FOR:
    case IF:
    case NEW:
    case RETURN:
    case SWITCH:
    case THIS:
    case THROW:
    case TRY:
    case TYPEOF:
    case VAR:
    case WHILE:
    case WITH:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case BOOLEAN_LITERAL:
    case NULL_LITERAL:
    case LPAREN:
    case LBRACE:
    case SEMICOLON:
    case HASH:
    case NOT:
    case MINUS:
    case IDENTIFIER:
    case 127:
    case 128:
      Statement();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Returns a Vector of strings, one for each identifier.
  final public void ParameterList() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
                         m_handler.handleLiteral(t.image);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_12;
      }
      W();
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_13;
      }
      t = jj_consume_token(COMMA);
                         m_handler.handleOperator(t.image);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_14;
        }
        W();
      }
      t = jj_consume_token(IDENTIFIER);
                         m_handler.handleLiteral(t.image);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_15;
        }
        W();
      }
    }
  }

  final public void CompoundStatement() throws ParseException {
    Token t;
    t = jj_consume_token(LBRACE);
                         m_handler.handleOperator(t.image);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_16;
      }
      W();
    }
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case CONTINUE:
      case DELETE:
      case DO:
      case FOR:
      case IF:
      case NEW:
      case RETURN:
      case SWITCH:
      case THIS:
      case THROW:
      case TRY:
      case TYPEOF:
      case VAR:
      case WHILE:
      case WITH:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case HASH:
      case NOT:
      case MINUS:
      case IDENTIFIER:
      case 127:
      case 128:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_17;
      }
      Statement();
    }
    t = jj_consume_token(RBRACE);
                         m_handler.handleOperator(t.image);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_18;
      }
      W();
    }
  }

  final public void Statement() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      /* empty statement */
            t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_19;
        }
        W();
      }
      break;
    default:
      jj_la1[76] = jj_gen;
      if (jj_2_1(2)) {
        t = jj_consume_token(IDENTIFIER);
                         m_handler.handleLiteral (t.image);
        /* NO WHITESPACE HERE */
              t = jj_consume_token(118);
                         m_handler.handleOperator(t.image);
        label_20:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
            ;
            break;
          default:
            jj_la1[26] = jj_gen;
            break label_20;
          }
          W();
        }
        Statement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          t = jj_consume_token(IF);
                         m_handler.handleKeyword(t.image);
          label_21:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case S:
            case L:
            case SINGLE_LINE_COMMENT:
            case MULTI_LINE_COMMENT:
              ;
              break;
            default:
              jj_la1[27] = jj_gen;
              break label_21;
            }
            W();
          }
          Condition();
          Statement();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ELSE:
            t = jj_consume_token(ELSE);
                         m_handler.handleKeyword(t.image);
            label_22:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
                ;
                break;
              default:
                jj_la1[28] = jj_gen;
                break label_22;
              }
              W();
            }
            Statement();
            break;
          default:
            jj_la1[29] = jj_gen;
            ;
          }
          break;
        case WHILE:
          t = jj_consume_token(WHILE);
                         m_handler.handleKeyword(t.image);
          label_23:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case S:
            case L:
            case SINGLE_LINE_COMMENT:
            case MULTI_LINE_COMMENT:
              ;
              break;
            default:
              jj_la1[30] = jj_gen;
              break label_23;
            }
            W();
          }
          Condition();
          Statement();
          break;
        case DO:
          t = jj_consume_token(DO);
                         m_handler.handleKeyword(t.image);
          label_24:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case S:
            case L:
            case SINGLE_LINE_COMMENT:
            case MULTI_LINE_COMMENT:
              ;
              break;
            default:
              jj_la1[31] = jj_gen;
              break label_24;
            }
            W();
          }
          Statement();
          t = jj_consume_token(WHILE);
                         m_handler.handleKeyword(t.image);
          label_25:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case S:
            case L:
            case SINGLE_LINE_COMMENT:
            case MULTI_LINE_COMMENT:
              ;
              break;
            default:
              jj_la1[32] = jj_gen;
              break label_25;
            }
            W();
          }
          Condition();
          break;
        default:
          jj_la1[77] = jj_gen;
          if (jj_2_2(2147483647)) {
            t = jj_consume_token(FOR);
                         m_handler.handleKeyword(t.image);
            label_26:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
                ;
                break;
              default:
                jj_la1[33] = jj_gen;
                break label_26;
              }
              W();
            }
            t = jj_consume_token(LPAREN);
                         m_handler.handleOperator(t.image);
            label_27:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
                ;
                break;
              default:
                jj_la1[34] = jj_gen;
                break label_27;
              }
              W();
            }
            t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
            label_28:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
                ;
                break;
              default:
                jj_la1[35] = jj_gen;
                break label_28;
              }
              W();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DELETE:
            case NEW:
            case THIS:
            case TYPEOF:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case STRING_LITERAL:
            case BOOLEAN_LITERAL:
            case NULL_LITERAL:
            case LPAREN:
            case HASH:
            case NOT:
            case MINUS:
            case IDENTIFIER:
            case 127:
            case 128:
              Expression();
              break;
            default:
              jj_la1[36] = jj_gen;
              ;
            }
            t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
            label_29:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
                ;
                break;
              default:
                jj_la1[37] = jj_gen;
                break label_29;
              }
              W();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DELETE:
            case NEW:
            case THIS:
            case TYPEOF:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case STRING_LITERAL:
            case BOOLEAN_LITERAL:
            case NULL_LITERAL:
            case LPAREN:
            case HASH:
            case NOT:
            case MINUS:
            case IDENTIFIER:
            case 127:
            case 128:
              Expression();
              break;
            default:
              jj_la1[38] = jj_gen;
              ;
            }
            t = jj_consume_token(RPAREN);
                         m_handler.handleOperator(t.image);
            label_30:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
                ;
                break;
              default:
                jj_la1[39] = jj_gen;
                break label_30;
              }
              W();
            }
            Statement();
          } else if (jj_2_3(2147483647)) {
            t = jj_consume_token(FOR);
                         m_handler.handleKeyword(t.image);
            label_31:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
                ;
                break;
              default:
                jj_la1[40] = jj_gen;
                break label_31;
              }
              W();
            }
            t = jj_consume_token(LPAREN);
                         m_handler.handleOperator(t.image);
            label_32:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
                ;
                break;
              default:
                jj_la1[41] = jj_gen;
                break label_32;
              }
              W();
            }
            VariablesOrExpression();
            t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
            label_33:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
                ;
                break;
              default:
                jj_la1[42] = jj_gen;
                break label_33;
              }
              W();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DELETE:
            case NEW:
            case THIS:
            case TYPEOF:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case STRING_LITERAL:
            case BOOLEAN_LITERAL:
            case NULL_LITERAL:
            case LPAREN:
            case HASH:
            case NOT:
            case MINUS:
            case IDENTIFIER:
            case 127:
            case 128:
              Expression();
              break;
            default:
              jj_la1[43] = jj_gen;
              ;
            }
            t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
            label_34:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
                ;
                break;
              default:
                jj_la1[44] = jj_gen;
                break label_34;
              }
              W();
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DELETE:
            case NEW:
            case THIS:
            case TYPEOF:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case STRING_LITERAL:
            case BOOLEAN_LITERAL:
            case NULL_LITERAL:
            case LPAREN:
            case HASH:
            case NOT:
            case MINUS:
            case IDENTIFIER:
            case 127:
            case 128:
              Expression();
              break;
            default:
              jj_la1[45] = jj_gen;
              ;
            }
            t = jj_consume_token(RPAREN);
                         m_handler.handleOperator(t.image);
            label_35:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
                ;
                break;
              default:
                jj_la1[46] = jj_gen;
                break label_35;
              }
              W();
            }
            Statement();
          } else if (jj_2_4(2147483647)) {
            t = jj_consume_token(FOR);
                         m_handler.handleKeyword(t.image);
            label_36:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
                ;
                break;
              default:
                jj_la1[47] = jj_gen;
                break label_36;
              }
              W();
            }
            t = jj_consume_token(LPAREN);
                         m_handler.handleOperator(t.image);
            label_37:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
                ;
                break;
              default:
                jj_la1[48] = jj_gen;
                break label_37;
              }
              W();
            }
            t = jj_consume_token(IDENTIFIER);
                         m_handler.handleLiteral(t.image);
            label_38:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
                ;
                break;
              default:
                jj_la1[49] = jj_gen;
                break label_38;
              }
              W();
            }
            t = jj_consume_token(IN);
                         m_handler.handleKeyword(t.image);
            label_39:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
                ;
                break;
              default:
                jj_la1[50] = jj_gen;
                break label_39;
              }
              W();
            }
            Expression();
            t = jj_consume_token(RPAREN);
                         m_handler.handleOperator(t.image);
            label_40:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S:
              case L:
              case SINGLE_LINE_COMMENT:
              case MULTI_LINE_COMMENT:
                ;
                break;
              default:
                jj_la1[51] = jj_gen;
                break label_40;
              }
              W();
            }
            Statement();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case WITH:
              t = jj_consume_token(WITH);
                         m_handler.handleKeyword(t.image);
              label_41:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                  ;
                  break;
                default:
                  jj_la1[52] = jj_gen;
                  break label_41;
                }
                W();
              }
              t = jj_consume_token(LPAREN);
                         m_handler.handleOperator(t.image);
              label_42:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                  ;
                  break;
                default:
                  jj_la1[53] = jj_gen;
                  break label_42;
                }
                W();
              }
              Expression();
              t = jj_consume_token(RPAREN);
                         m_handler.handleOperator(t.image);
              label_43:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                  ;
                  break;
                default:
                  jj_la1[54] = jj_gen;
                  break label_43;
                }
                W();
              }
              Statement();
              break;
            case TRY:
              t = jj_consume_token(TRY);
                         m_handler.handleKeyword(t.image);
              label_44:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                  ;
                  break;
                default:
                  jj_la1[55] = jj_gen;
                  break label_44;
                }
                W();
              }
              Statement();
              t = jj_consume_token(CATCH);
                         m_handler.handleKeyword(t.image);
              label_45:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                  ;
                  break;
                default:
                  jj_la1[56] = jj_gen;
                  break label_45;
                }
                W();
              }
              t = jj_consume_token(LPAREN);
                         m_handler.handleOperator(t.image);
              label_46:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                  ;
                  break;
                default:
                  jj_la1[57] = jj_gen;
                  break label_46;
                }
                W();
              }
              t = jj_consume_token(IDENTIFIER);
                         m_handler.handleLiteral(t.image);
              label_47:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                  ;
                  break;
                default:
                  jj_la1[58] = jj_gen;
                  break label_47;
                }
                W();
              }
              t = jj_consume_token(RPAREN);
                         m_handler.handleOperator(t.image);
              label_48:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                  ;
                  break;
                default:
                  jj_la1[59] = jj_gen;
                  break label_48;
                }
                W();
              }
              Statement();
              break;
            case THROW:
              t = jj_consume_token(THROW);
                         m_handler.handleOperator(t.image);
              label_49:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                  ;
                  break;
                default:
                  jj_la1[60] = jj_gen;
                  break label_49;
                }
                W();
              }
              Expression();
              t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
              label_50:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                  ;
                  break;
                default:
                  jj_la1[61] = jj_gen;
                  break label_50;
                }
                W();
              }
              break;
            case BREAK:
              t = jj_consume_token(BREAK);
                         m_handler.handleKeyword(t.image);
              label_51:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                  ;
                  break;
                default:
                  jj_la1[62] = jj_gen;
                  break label_51;
                }
                W();
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case IDENTIFIER:
                t = jj_consume_token(IDENTIFIER);
                         m_handler.handleLiteral(t.image);
                label_52:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case S:
                  case L:
                  case SINGLE_LINE_COMMENT:
                  case MULTI_LINE_COMMENT:
                    ;
                    break;
                  default:
                    jj_la1[63] = jj_gen;
                    break label_52;
                  }
                  W();
                }
                break;
              default:
                jj_la1[64] = jj_gen;
                ;
              }
              t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
              label_53:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                  ;
                  break;
                default:
                  jj_la1[65] = jj_gen;
                  break label_53;
                }
                W();
              }
              break;
            case CONTINUE:
              t = jj_consume_token(CONTINUE);
                         m_handler.handleKeyword(t.image);
              label_54:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                  ;
                  break;
                default:
                  jj_la1[66] = jj_gen;
                  break label_54;
                }
                W();
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case IDENTIFIER:
                t = jj_consume_token(IDENTIFIER);
                         m_handler.handleLiteral(t.image);
                label_55:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case S:
                  case L:
                  case SINGLE_LINE_COMMENT:
                  case MULTI_LINE_COMMENT:
                    ;
                    break;
                  default:
                    jj_la1[67] = jj_gen;
                    break label_55;
                  }
                  W();
                }
                break;
              default:
                jj_la1[68] = jj_gen;
                ;
              }
              t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
              label_56:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                  ;
                  break;
                default:
                  jj_la1[69] = jj_gen;
                  break label_56;
                }
                W();
              }
              break;
            case RETURN:
              t = jj_consume_token(RETURN);
                         m_handler.handleKeyword(t.image);
              label_57:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case S:
                case L:
                case SINGLE_LINE_COMMENT:
                case MULTI_LINE_COMMENT:
                  ;
                  break;
                default:
                  jj_la1[70] = jj_gen;
                  break label_57;
                }
                W();
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case DELETE:
              case NEW:
              case THIS:
              case TYPEOF:
              case INTEGER_LITERAL:
              case FLOATING_POINT_LITERAL:
              case STRING_LITERAL:
              case BOOLEAN_LITERAL:
              case NULL_LITERAL:
              case LPAREN:
              case HASH:
              case NOT:
              case MINUS:
              case IDENTIFIER:
              case 127:
              case 128:
                Expression();
                break;
              default:
                jj_la1[71] = jj_gen;
                ;
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
                t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
                label_58:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case S:
                  case L:
                  case SINGLE_LINE_COMMENT:
                  case MULTI_LINE_COMMENT:
                    ;
                    break;
                  default:
                    jj_la1[72] = jj_gen;
                    break label_58;
                  }
                  W();
                }
                break;
              default:
                jj_la1[73] = jj_gen;
                ;
              }
              break;
            case SWITCH:
              SwitchStatement();
              break;
            case LBRACE:
              CompoundStatement();
              break;
            case DELETE:
            case NEW:
            case THIS:
            case TYPEOF:
            case VAR:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case STRING_LITERAL:
            case BOOLEAN_LITERAL:
            case NULL_LITERAL:
            case LPAREN:
            case HASH:
            case NOT:
            case MINUS:
            case IDENTIFIER:
            case 127:
            case 128:
              VariablesOrExpression();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case SEMICOLON:
                t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
                label_59:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case S:
                  case L:
                  case SINGLE_LINE_COMMENT:
                  case MULTI_LINE_COMMENT:
                    ;
                    break;
                  default:
                    jj_la1[74] = jj_gen;
                    break label_59;
                  }
                  W();
                }
                break;
              default:
                jj_la1[75] = jj_gen;
                ;
              }
              break;
            default:
              jj_la1[78] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
  }

  final public void SwitchStatement() throws ParseException {
    Token t;
    t = jj_consume_token(SWITCH);
                         m_handler.handleKeyword(t.image);
    label_60:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
        ;
        break;
      default:
        jj_la1[79] = jj_gen;
        break label_60;
      }
      W();
    }
    t = jj_consume_token(LPAREN);
                         m_handler.handleOperator(t.image);
    label_61:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
        ;
        break;
      default:
        jj_la1[80] = jj_gen;
        break label_61;
      }
      W();
    }
    Expression();
    t = jj_consume_token(RPAREN);
                         m_handler.handleOperator(t.image);
    label_62:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
        ;
        break;
      default:
        jj_la1[81] = jj_gen;
        break label_62;
      }
      W();
    }
    t = jj_consume_token(LBRACE);
                         m_handler.handleOperator(t.image);
    label_63:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
        ;
        break;
      default:
        jj_la1[82] = jj_gen;
        break label_63;
      }
      W();
    }
    label_64:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_64;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        CaseLabel();
        break;
      case _DEFAULT:
        CaseDefaultLabel();
        break;
      default:
        jj_la1[84] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    t = jj_consume_token(RBRACE);
                         m_handler.handleOperator(t.image);
    label_65:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
        ;
        break;
      default:
        jj_la1[85] = jj_gen;
        break label_65;
      }
      W();
    }
  }

  final public void CaseLabel() throws ParseException {
    Token t;
    t = jj_consume_token(CASE);
                         m_handler.handleKeyword(t.image);
    label_66:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
        ;
        break;
      default:
        jj_la1[86] = jj_gen;
        break label_66;
      }
      W();
    }
    Expression();
    t = jj_consume_token(118);
                         m_handler.handleOperator(t.image);
    label_67:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
        ;
        break;
      default:
        jj_la1[87] = jj_gen;
        break label_67;
      }
      W();
    }
    label_68:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case CONTINUE:
      case DELETE:
      case DO:
      case FOR:
      case IF:
      case NEW:
      case RETURN:
      case SWITCH:
      case THIS:
      case THROW:
      case TRY:
      case TYPEOF:
      case VAR:
      case WHILE:
      case WITH:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case HASH:
      case NOT:
      case MINUS:
      case IDENTIFIER:
      case 127:
      case 128:
        ;
        break;
      default:
        jj_la1[88] = jj_gen;
        break label_68;
      }
      Statement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
      label_69:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[89] = jj_gen;
          break label_69;
        }
        W();
      }
      break;
    default:
      jj_la1[90] = jj_gen;
      ;
    }
  }

  final public void CaseDefaultLabel() throws ParseException {
    Token t;
    t = jj_consume_token(_DEFAULT);
                         m_handler.handleKeyword(t.image);
    label_70:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
        ;
        break;
      default:
        jj_la1[91] = jj_gen;
        break label_70;
      }
      W();
    }
    t = jj_consume_token(118);
                         m_handler.handleOperator(t.image);
    label_71:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
        ;
        break;
      default:
        jj_la1[92] = jj_gen;
        break label_71;
      }
      W();
    }
    label_72:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case CONTINUE:
      case DELETE:
      case DO:
      case FOR:
      case IF:
      case NEW:
      case RETURN:
      case SWITCH:
      case THIS:
      case THROW:
      case TRY:
      case TYPEOF:
      case VAR:
      case WHILE:
      case WITH:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case HASH:
      case NOT:
      case MINUS:
      case IDENTIFIER:
      case 127:
      case 128:
        ;
        break;
      default:
        jj_la1[93] = jj_gen;
        break label_72;
      }
      Statement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      t = jj_consume_token(SEMICOLON);
                         m_handler.handleOperator(t.image);
      label_73:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[94] = jj_gen;
          break label_73;
        }
        W();
      }
      break;
    default:
      jj_la1[95] = jj_gen;
      ;
    }
  }

  final public void Condition() throws ParseException {
    Token t;
    t = jj_consume_token(LPAREN);
                         m_handler.handleOperator(t.image);
    label_74:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
        ;
        break;
      default:
        jj_la1[96] = jj_gen;
        break label_74;
      }
      W();
    }
    Expression();
    t = jj_consume_token(RPAREN);
                         m_handler.handleOperator(t.image);
    label_75:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
        ;
        break;
      default:
        jj_la1[97] = jj_gen;
        break label_75;
      }
      W();
    }
  }

// ### Check up on the semantics of this - not sure whether it should
// be statement or expression
  final public void VariablesOrExpression() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      t = jj_consume_token(VAR);
                         m_handler.handleKeyword(t.image);
      label_76:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[98] = jj_gen;
          break label_76;
        }
        W();
      }
      Variables();
      break;
    case DELETE:
    case NEW:
    case THIS:
    case TYPEOF:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case BOOLEAN_LITERAL:
    case NULL_LITERAL:
    case LPAREN:
    case HASH:
    case NOT:
    case MINUS:
    case IDENTIFIER:
    case 127:
    case 128:
      Expression();
      break;
    default:
      jj_la1[99] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Vector of JSVarDecl's
  final public void Variables() throws ParseException {
    Token t;
    Variable();
    label_77:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
        ;
        break;
      default:
        jj_la1[100] = jj_gen;
        break label_77;
      }
      W();
    }
    label_78:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[101] = jj_gen;
        break label_78;
      }
      t = jj_consume_token(COMMA);
                         m_handler.handleOperator(t.image);
      label_79:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[102] = jj_gen;
          break label_79;
        }
        W();
      }
      Variable();
    }
  }

  final public void Variable() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
                         m_handler.handleLiteral(t.image);
    label_80:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
        ;
        break;
      default:
        jj_la1[103] = jj_gen;
        break label_80;
      }
      W();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      t = jj_consume_token(ASSIGN);
                         m_handler.handleOperator(t.image);
      label_81:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[104] = jj_gen;
          break label_81;
        }
        W();
      }
      AssignmentExpression();
      break;
    default:
      jj_la1[105] = jj_gen;
      ;
    }
  }

  final public void Expression() throws ParseException {
    Token t;
    AssignmentExpression();
    label_82:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
        ;
        break;
      default:
        jj_la1[106] = jj_gen;
        break label_82;
      }
      W();
    }
    label_83:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[107] = jj_gen;
        break label_83;
      }
      t = jj_consume_token(COMMA);
                         m_handler.handleOperator(t.image);
      label_84:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[108] = jj_gen;
          break label_84;
        }
        W();
      }
      AssignmentExpression();
    }
  }

  final public void AssignmentExpression() throws ParseException {
    Token t;
    ConditionalExpression();
    label_85:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        ;
        break;
      default:
        jj_la1[109] = jj_gen;
        break label_85;
      }
      t = jj_consume_token(ASSIGN);
        m_handler.handleOperator(t.image);
      label_86:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[110] = jj_gen;
          break label_86;
        }
        W();
      }
      ConditionalExpression();
    }
  }

  final public void ConditionalExpression() throws ParseException {
    Token t;
    OrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 119:
      t = jj_consume_token(119);
                         m_handler.handleOperator(t.image);
      label_87:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[111] = jj_gen;
          break label_87;
        }
        W();
      }
      AssignmentExpression();
      t = jj_consume_token(118);
                         m_handler.handleOperator(t.image);
      label_88:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[112] = jj_gen;
          break label_88;
        }
        W();
      }
      AssignmentExpression();
      break;
    default:
      jj_la1[113] = jj_gen;
      ;
    }
  }

  final public void OrExpression() throws ParseException {
    Token t;
    AndExpression();
    label_89:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[114] = jj_gen;
        break label_89;
      }
      t = jj_consume_token(OR);
                         m_handler.handleOperator(t.image);
      label_90:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[115] = jj_gen;
          break label_90;
        }
        W();
      }
      AndExpression();
    }
  }

  final public void AndExpression() throws ParseException {
    Token t;
    BitwiseOrExpression();
    label_91:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[116] = jj_gen;
        break label_91;
      }
      t = jj_consume_token(AND);
                          m_handler.handleOperator(t.image);
      label_92:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[117] = jj_gen;
          break label_92;
        }
        W();
      }
      BitwiseOrExpression();
    }
  }

  final public void BitwiseOrExpression() throws ParseException {
    Token t;
    BitwiseXorExpression();
    label_93:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 120:
        ;
        break;
      default:
        jj_la1[118] = jj_gen;
        break label_93;
      }
      t = jj_consume_token(120);
                         m_handler.handleOperator(t.image);
      label_94:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[119] = jj_gen;
          break label_94;
        }
        W();
      }
      BitwiseXorExpression();
    }
  }

  final public void BitwiseXorExpression() throws ParseException {
    Token t;
    BitwiseAndExpression();
    label_95:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POWER:
        ;
        break;
      default:
        jj_la1[120] = jj_gen;
        break label_95;
      }
      t = jj_consume_token(POWER);
                         m_handler.handleOperator(t.image);
      label_96:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[121] = jj_gen;
          break label_96;
        }
        W();
      }
      BitwiseAndExpression();
    }
  }

  final public void BitwiseAndExpression() throws ParseException {
    Token t;
    EqualityExpression();
    label_97:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCAT:
        ;
        break;
      default:
        jj_la1[122] = jj_gen;
        break label_97;
      }
      t = jj_consume_token(CONCAT);
                         m_handler.handleOperator(t.image);
      label_98:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[123] = jj_gen;
          break label_98;
        }
        W();
      }
      EqualityExpression();
    }
  }

  final public void EqualityExpression() throws ParseException {
    Token t;
    InstanceOfExpression();
    label_99:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
      case 121:
      case 122:
      case 123:
      case 124:
        ;
        break;
      default:
        jj_la1[124] = jj_gen;
        break label_99;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 121:
      case 122:
      case 123:
      case 124:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 121:
          t = jj_consume_token(121);
          break;
        case 122:
          t = jj_consume_token(122);
          break;
        case 123:
          t = jj_consume_token(123);
          break;
        case 124:
          t = jj_consume_token(124);
          break;
        default:
          jj_la1[125] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          m_handler.handleOperator(t.image);
        break;
      case IN:
        t = jj_consume_token(IN);
          m_handler.handleKeyword(t.image);
        break;
      default:
        jj_la1[126] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_100:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[127] = jj_gen;
          break label_100;
        }
        W();
      }
      InstanceOfExpression();
    }
  }

// this routine is mirrored after the Java1.1 grammar.
  final public void InstanceOfExpression() throws ParseException {
    Token t;
    RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      t = jj_consume_token(INSTANCEOF);
        m_handler.handleKeyword(t.image);
      label_101:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[128] = jj_gen;
          break label_101;
        }
        W();
      }
      MemberExpression();
      break;
    default:
      jj_la1[129] = jj_gen;
      ;
    }
  }

  final public void RelationalExpression() throws ParseException {
    Token t;
    ShiftExpression();
    label_102:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IS:
      case EQ:
      case IS_NOT:
      case NOT_EQUAL:
      case NEQ:
      case CONTAINS:
      case DOES_NOT_CONTAIN:
      case GREATER_THAN:
      case GT:
      case LESS_THAN:
      case LT:
      case GREATER_THAN_OR_EQ_TO:
      case GTE:
      case GE:
      case LESS_THAN_OR_EQ_TO:
      case LTE:
      case LE:
        ;
        break;
      default:
        jj_la1[130] = jj_gen;
        break label_102;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IS:
        t = jj_consume_token(IS);
        break;
      case EQ:
        t = jj_consume_token(EQ);
        break;
      case IS_NOT:
        t = jj_consume_token(IS_NOT);
        break;
      case NOT_EQUAL:
        t = jj_consume_token(NOT_EQUAL);
        break;
      case NEQ:
        t = jj_consume_token(NEQ);
        break;
      case CONTAINS:
        t = jj_consume_token(CONTAINS);
        break;
      case DOES_NOT_CONTAIN:
        t = jj_consume_token(DOES_NOT_CONTAIN);
        break;
      case GREATER_THAN:
        t = jj_consume_token(GREATER_THAN);
        break;
      case GT:
        t = jj_consume_token(GT);
        break;
      case LESS_THAN:
        t = jj_consume_token(LESS_THAN);
        break;
      case LT:
        t = jj_consume_token(LT);
        break;
      case GREATER_THAN_OR_EQ_TO:
        t = jj_consume_token(GREATER_THAN_OR_EQ_TO);
        break;
      case GTE:
        t = jj_consume_token(GTE);
        break;
      case GE:
        t = jj_consume_token(GE);
        break;
      case LESS_THAN_OR_EQ_TO:
        t = jj_consume_token(LESS_THAN_OR_EQ_TO);
        break;
      case LTE:
        t = jj_consume_token(LTE);
        break;
      case LE:
        t = jj_consume_token(LE);
        break;
      default:
        jj_la1[131] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        m_handler.handleOperator(t.image);
      label_103:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[132] = jj_gen;
          break label_103;
        }
        W();
      }
      ShiftExpression();
    }
  }

  final public void ShiftExpression() throws ParseException {
    Token t;
    AdditiveExpression();
    label_104:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 125:
      case 126:
        ;
        break;
      default:
        jj_la1[133] = jj_gen;
        break label_104;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 125:
        t = jj_consume_token(125);
        break;
      case 126:
        t = jj_consume_token(126);
        break;
      default:
        jj_la1[134] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        m_handler.handleOperator(t.image);
      label_105:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[135] = jj_gen;
          break label_105;
        }
        W();
      }
      AdditiveExpression();
    }
  }

  final public void AdditiveExpression() throws ParseException {
    Token t;
    MultiplicativeExpression();
    label_106:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[136] = jj_gen;
        break label_106;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[137] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        m_handler.handleOperator(t.image);
      label_107:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[138] = jj_gen;
          break label_107;
        }
        W();
      }
      MultiplicativeExpression();
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    Token t;
    UnaryExpression();
    label_108:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
      case DIV:
        ;
        break;
      default:
        jj_la1[139] = jj_gen;
        break label_108;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        t = jj_consume_token(STAR);
        break;
      case SLASH:
        t = jj_consume_token(SLASH);
        break;
      case REM:
        t = jj_consume_token(REM);
        break;
      case DIV:
        t = jj_consume_token(DIV);
        break;
      default:
        jj_la1[140] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        m_handler.handleOperator(t.image);
      label_109:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[141] = jj_gen;
          break label_109;
        }
        W();
      }
      UnaryExpression();
    }
  }

  final public void UnaryExpression() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      t = jj_consume_token(NOT);
                            m_handler.handleOperator(t.image);
      label_110:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[142] = jj_gen;
          break label_110;
        }
        W();
      }
      UnaryExpression();
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
                            m_handler.handleOperator(t.image);
      label_111:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[143] = jj_gen;
          break label_111;
        }
        W();
      }
      UnaryExpression();
      break;
    case 127:
    case 128:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 127:
        t = jj_consume_token(127);
        break;
      case 128:
        t = jj_consume_token(128);
        break;
      default:
        jj_la1[144] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                            m_handler.handleOperator(t.image);
      label_112:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[145] = jj_gen;
          break label_112;
        }
        W();
      }
      MemberExpression();
      break;
    case NEW:
    case THIS:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case BOOLEAN_LITERAL:
    case NULL_LITERAL:
    case LPAREN:
    case HASH:
    case IDENTIFIER:
      MemberExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 127:
      case 128:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 127:
          t = jj_consume_token(127);
          break;
        case 128:
          t = jj_consume_token(128);
          break;
        default:
          jj_la1[146] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                              m_handler.handleOperator(t.image);
        label_113:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
            ;
            break;
          default:
            jj_la1[147] = jj_gen;
            break label_113;
          }
          W();
        }
        break;
      default:
        jj_la1[148] = jj_gen;
        ;
      }
      break;
    case DELETE:
      /* NEW is not really a unary expression
            t=<NEW>               { m_handler.handleKeyword(t.image); } ( W() )*
            Constructor()
          |
            */
            t = jj_consume_token(DELETE);
                              m_handler.handleKeyword(t.image);
      label_114:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[149] = jj_gen;
          break label_114;
        }
        W();
      }
      MemberExpression();
      break;
    case TYPEOF:
      t = jj_consume_token(TYPEOF);
                              m_handler.handleKeyword(t.image);
      label_115:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[150] = jj_gen;
          break label_115;
        }
        W();
      }
      MemberExpression();
      break;
    default:
      jj_la1[151] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Constructor() throws ParseException {
    ConstructorCall();
  }

  final public void ConstructorCall() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
                         m_handler.handleLiteral(t.image);
    label_116:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
      case L:
      case SINGLE_LINE_COMMENT:
      case MULTI_LINE_COMMENT:
        ;
        break;
      default:
        jj_la1[152] = jj_gen;
        break label_116;
      }
      W();
    }
    label_117:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[153] = jj_gen;
        break label_117;
      }
      t = jj_consume_token(DOT);
                         m_handler.handleOperator(t.image);
      label_118:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[154] = jj_gen;
          break label_118;
        }
        W();
      }
      t = jj_consume_token(IDENTIFIER);
                         m_handler.handleLiteral(t.image);
      label_119:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[155] = jj_gen;
          break label_119;
        }
        W();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      t = jj_consume_token(LPAREN);
                         m_handler.handleOperator(t.image);
      label_120:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[156] = jj_gen;
          break label_120;
        }
        W();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DELETE:
      case NEW:
      case THIS:
      case TYPEOF:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case BOOLEAN_LITERAL:
      case NULL_LITERAL:
      case LPAREN:
      case HASH:
      case NOT:
      case MINUS:
      case IDENTIFIER:
      case 127:
      case 128:
        ArgumentList();
        break;
      default:
        jj_la1[157] = jj_gen;
        ;
      }
      t = jj_consume_token(RPAREN);
                         m_handler.handleOperator(t.image);
      label_121:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[158] = jj_gen;
          break label_121;
        }
        W();
      }
      break;
    default:
      jj_la1[159] = jj_gen;
      ;
    }
  }

// Departs from the grammar in the standard, since this works in all browsers
  final public void MemberExpression() throws ParseException {
    Token t;
    PrimaryExpression();
    label_122:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACKET:
      case DOT:
        ;
        break;
      default:
        jj_la1[160] = jj_gen;
        break label_122;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        t = jj_consume_token(DOT);
                         m_handler.handleOperator(t.image);
        label_123:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
            ;
            break;
          default:
            jj_la1[161] = jj_gen;
            break label_123;
          }
          W();
        }
        PrimaryExpression();
        break;
      case LBRACKET:
        t = jj_consume_token(LBRACKET);
                         m_handler.handleOperator(t.image);
        label_124:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
            ;
            break;
          default:
            jj_la1[162] = jj_gen;
            break label_124;
          }
          W();
        }
        Expression();
        t = jj_consume_token(RBRACKET);
                         m_handler.handleOperator(t.image);
        label_125:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
            ;
            break;
          default:
            jj_la1[163] = jj_gen;
            break label_125;
          }
          W();
        }
        break;
      case LPAREN:
        t = jj_consume_token(LPAREN);
                         m_handler.handleOperator(t.image);
        label_126:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
            ;
            break;
          default:
            jj_la1[164] = jj_gen;
            break label_126;
          }
          W();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DELETE:
        case NEW:
        case THIS:
        case TYPEOF:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case BOOLEAN_LITERAL:
        case NULL_LITERAL:
        case LPAREN:
        case HASH:
        case NOT:
        case MINUS:
        case IDENTIFIER:
        case 127:
        case 128:
          ArgumentList();
          break;
        default:
          jj_la1[165] = jj_gen;
          ;
        }
        t = jj_consume_token(RPAREN);
                         m_handler.handleOperator(t.image);
        label_127:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S:
          case L:
          case SINGLE_LINE_COMMENT:
          case MULTI_LINE_COMMENT:
            ;
            break;
          default:
            jj_la1[166] = jj_gen;
            break label_127;
          }
          W();
        }
        break;
      default:
        jj_la1[167] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

// Vector of JSExpressions
  final public void ArgumentList() throws ParseException {
    Token t;
    AssignmentExpression();
    label_128:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[168] = jj_gen;
        break label_128;
      }
      t = jj_consume_token(COMMA);
                         m_handler.handleOperator(t.image);
      label_129:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[169] = jj_gen;
          break label_129;
        }
        W();
      }
      AssignmentExpression();
    }
  }

  final public void PrimaryExpression() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      t = jj_consume_token(LPAREN);
        m_handler.handleOperator(t.image);
      label_130:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[170] = jj_gen;
          break label_130;
        }
        W();
      }
      Expression();
      t = jj_consume_token(RPAREN);
        m_handler.handleOperator(t.image);
      label_131:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[171] = jj_gen;
          break label_131;
        }
        W();
      }
      break;
    case HASH:
      t = jj_consume_token(HASH);
        m_handler.handleOperator(t.image);
      label_132:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[172] = jj_gen;
          break label_132;
        }
        W();
      }
      Expression();
      t = jj_consume_token(HASH);
        m_handler.handleOperator(t.image);
      label_133:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[173] = jj_gen;
          break label_133;
        }
        W();
      }
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
          m_handler.handleLiteral(t.image);
      label_134:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[174] = jj_gen;
          break label_134;
        }
        W();
      }
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
          m_handler.handleLiteral(t.image);
      label_135:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[175] = jj_gen;
          break label_135;
        }
        W();
      }
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
          m_handler.handleLiteral(t.image);
      label_136:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[176] = jj_gen;
          break label_136;
        }
        W();
      }
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
          m_handler.handleString(t.image);
      label_137:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[177] = jj_gen;
          break label_137;
        }
        W();
      }
      break;
    case BOOLEAN_LITERAL:
      t = jj_consume_token(BOOLEAN_LITERAL);
          m_handler.handleLiteral(t.image);
      label_138:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[178] = jj_gen;
          break label_138;
        }
        W();
      }
      break;
    case NULL_LITERAL:
      t = jj_consume_token(NULL_LITERAL);
          m_handler.handleLiteral(t.image);
      label_139:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[179] = jj_gen;
          break label_139;
        }
        W();
      }
      break;
    case THIS:
      t = jj_consume_token(THIS);
          m_handler.handleLiteral(t.image);
      label_140:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[180] = jj_gen;
          break label_140;
        }
        W();
      }
      break;
    case NEW:
      t = jj_consume_token(NEW);
          m_handler.handleKeyword(t.image);
      label_141:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S:
        case L:
        case SINGLE_LINE_COMMENT:
        case MULTI_LINE_COMMENT:
          ;
          break;
        default:
          jj_la1[181] = jj_gen;
          break label_141;
        }
        W();
      }
      Constructor();
      break;
    default:
      jj_la1[182] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_191() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_scan_token(HASH)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_230()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_159()) return true;
    if (jj_scan_token(HASH)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_231()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_scan_token(INSTANCEOF)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_202()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_203()) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_3R_195()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_228()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_159()) return true;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_229()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3R_207() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_scan_token(MULTI_LINE_COMMENT)) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(SINGLE_LINE_COMMENT)) return true;
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_272()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(L)) return true;
    return false;
  }

  private boolean jj_3R_150() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(S)) return true;
    return false;
  }

  private boolean jj_3R_197() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_3R_163()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_265()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_193() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_199()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_192()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_193()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_3R_255()) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_244()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_245()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_246()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_scan_token(CONCAT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_194()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_189()) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_242()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_159()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_243()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_3R_189()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_190()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_241()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_207()) return true;
    return false;
  }

  private boolean jj_3R_208() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_3R_207()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_208()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_scan_token(POWER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_191()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_3R_186()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_187()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_3R_255()) return true;
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_269()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_270()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_271()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_scan_token(120)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_188()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_263() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_267()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_268()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_3R_183()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_184()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_262()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_263()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_264()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_scan_token(AND)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_185()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_3R_254()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_3R_180()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_181()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_scan_token(TYPEOF)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_261()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_203()) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_scan_token(OR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_182()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_176()) return true;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_scan_token(DELETE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_260()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_203()) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_3R_176()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_177()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(FOR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_147()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_148()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_149()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_259() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_266()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_3R_203()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_259()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(FOR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_144()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_145()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_146()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_scan_token(119)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_178()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_163()) return true;
    if (jj_scan_token(118)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_179()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3R_249() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_258()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_203()) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_scan_token(MINUS)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_257()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_225()) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_3R_173()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_scan_token(NOT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_256()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_225()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(FOR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_142()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPAREN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_143()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_225() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) {
    jj_scanpos = xsp;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) {
    jj_scanpos = xsp;
    if (jj_3R_251()) {
    jj_scanpos = xsp;
    if (jj_3R_252()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_175()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_226() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) return true;
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_253()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_225()) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_3R_169()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_170()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_3R_225()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_226()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_171()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_scan_token(NEW)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_239()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_240()) return true;
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_3R_163()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_164()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_165()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_210() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_227()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_209()) return true;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(THIS)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_238()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_172()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_3R_209()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_210()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(118)) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_166()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_167()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_scan_token(NULL_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_237()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_scan_token(BOOLEAN_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_236()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_205() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_211()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_204()) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_168()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_3R_204()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_205()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_235()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_3R_160()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_161()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_162()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_234()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(VAR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_157()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_158()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_233()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) return true;
    }
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_206()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_200()) return true;
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_232()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_3R_200()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_201()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[183];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x56,0x8,0x56,0x80,0xb0340800,0x56,0x120,0x120,0x56,0x56,0x56,0x0,0x56,0x56,0x56,0x0,0x56,0xb0340800,0x56,0x0,0x56,0x56,0x56,0x90340800,0x56,0x56,0x56,0x56,0x56,0x800000,0x56,0x56,0x56,0x56,0x56,0x56,0x100000,0x56,0x100000,0x56,0x56,0x56,0x56,0x100000,0x56,0x100000,0x56,0x56,0x56,0x56,0x56,0x56,0x56,0x56,0x56,0x56,0x56,0x56,0x56,0x56,0x56,0x56,0x56,0x56,0x0,0x56,0x56,0x56,0x0,0x56,0x56,0x100000,0x56,0x0,0x56,0x0,0x0,0x80200000,0x140800,0x56,0x56,0x56,0x56,0x82000,0x82000,0x56,0x56,0x56,0x90340800,0x56,0x0,0x56,0x56,0x90340800,0x56,0x0,0x56,0x56,0x56,0x100000,0x56,0x0,0x56,0x56,0x56,0x0,0x56,0x0,0x56,0x0,0x56,0x56,0x56,0x0,0x0,0x56,0x0,0x56,0x0,0x56,0x0,0x56,0x0,0x56,0x0,0x0,0x0,0x56,0x56,0x0,0x0,0x0,0x56,0x0,0x0,0x56,0x0,0x0,0x56,0x0,0x0,0x56,0x56,0x56,0x0,0x56,0x0,0x56,0x0,0x56,0x56,0x100000,0x56,0x0,0x56,0x56,0x56,0x100000,0x56,0x0,0x0,0x56,0x56,0x56,0x56,0x100000,0x56,0x0,0x0,0x56,0x56,0x56,0x56,0x56,0x56,0x56,0x56,0x56,0x56,0x56,0x56,0x56,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x739a2100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x739a2100,0x0,0x0,0x0,0x0,0x0,0x739a2100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x41080100,0x0,0x41080100,0x0,0x0,0x0,0x0,0x41080100,0x0,0x41080100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x41080100,0x0,0x0,0x0,0x0,0x0,0x10000000,0x639a2100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x739a2100,0x0,0x0,0x0,0x0,0x739a2100,0x0,0x0,0x0,0x0,0x0,0x43080100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x4,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x41080100,0x0,0x0,0x0,0x0,0x0,0x41080100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x41080100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40080100,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x145d4,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x145d4,0x0,0x8000,0x0,0x0,0x0,0x145d4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x101d4,0x0,0x101d4,0x0,0x0,0x0,0x0,0x101d4,0x0,0x101d4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x101d4,0x0,0x4000,0x0,0x4000,0x4000,0x0,0x105d4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x145d4,0x0,0x4000,0x0,0x0,0x145d4,0x0,0x4000,0x0,0x0,0x0,0x101d4,0x0,0x8000,0x0,0x0,0x0,0x20000,0x0,0x8000,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffd80000,0xffd80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x101d4,0x0,0x40000,0x0,0x0,0x0,0x101d4,0x0,0x100,0x41100,0x0,0x0,0x0,0x0,0x101d4,0x0,0x41100,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x101d4,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x80081100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x80081100,0x0,0x0,0x0,0x0,0x0,0x80081100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80081100,0x0,0x80081100,0x0,0x0,0x0,0x0,0x80081100,0x0,0x80081100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x80000,0x0,0x0,0x80081100,0x0,0x0,0x0,0x0,0x0,0x0,0x80081100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80081100,0x0,0x0,0x0,0x0,0x80081100,0x0,0x0,0x0,0x0,0x0,0x80081100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x20,0x0,0x80,0x0,0x1000000,0x0,0x10000,0x0,0x8000,0x0,0x1e000000,0x1e000000,0x1e000000,0x0,0x0,0x0,0x1f,0x1f,0x0,0x60000000,0x60000000,0x0,0x1800,0x1800,0x0,0x66000,0x66000,0x0,0x0,0x0,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x0,0x80081100,0x0,0x0,0x0,0x0,0x0,0x80081100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80081100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 183; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 183; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 183; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 183; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 183; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 183; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[129];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 183; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 129; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    token.next.beginColumn = jj_input_stream.column;     token.next.beginLine = jj_input_stream.line;     return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
