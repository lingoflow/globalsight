/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package com.globalsight.ling.docproc.extractor.cfscript;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int S = 1;
  /** RegularExpression Id. */
  int L = 2;
  /** RegularExpression Id. */
  int UNICODE_BOM = 3;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 4;
  /** RegularExpression Id. */
  int CRIPPLED_SINGLE_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int CDO = 7;
  /** RegularExpression Id. */
  int CDC = 8;
  /** RegularExpression Id. */
  int ABSTRACT = 9;
  /** RegularExpression Id. */
  int BOOLEAN = 10;
  /** RegularExpression Id. */
  int BREAK = 11;
  /** RegularExpression Id. */
  int BYTE = 12;
  /** RegularExpression Id. */
  int CASE = 13;
  /** RegularExpression Id. */
  int CATCH = 14;
  /** RegularExpression Id. */
  int CHAR = 15;
  /** RegularExpression Id. */
  int CLASS = 16;
  /** RegularExpression Id. */
  int CONST = 17;
  /** RegularExpression Id. */
  int CONTINUE = 18;
  /** RegularExpression Id. */
  int _DEFAULT = 19;
  /** RegularExpression Id. */
  int DELETE = 20;
  /** RegularExpression Id. */
  int DO = 21;
  /** RegularExpression Id. */
  int DOUBLE = 22;
  /** RegularExpression Id. */
  int ELSE = 23;
  /** RegularExpression Id. */
  int EXTENDS = 24;
  /** RegularExpression Id. */
  int FINAL = 25;
  /** RegularExpression Id. */
  int FINALLY = 26;
  /** RegularExpression Id. */
  int FLOAT = 27;
  /** RegularExpression Id. */
  int FOR = 28;
  /** RegularExpression Id. */
  int FUNCTION = 29;
  /** RegularExpression Id. */
  int GOTO = 30;
  /** RegularExpression Id. */
  int IF = 31;
  /** RegularExpression Id. */
  int IMPLEMENTS = 32;
  /** RegularExpression Id. */
  int IMPORT = 33;
  /** RegularExpression Id. */
  int IN = 34;
  /** RegularExpression Id. */
  int INSTANCEOF = 35;
  /** RegularExpression Id. */
  int INT = 36;
  /** RegularExpression Id. */
  int INTERFACE = 37;
  /** RegularExpression Id. */
  int LONG = 38;
  /** RegularExpression Id. */
  int NATIVE = 39;
  /** RegularExpression Id. */
  int NEW = 40;
  /** RegularExpression Id. */
  int PACKAGE = 41;
  /** RegularExpression Id. */
  int PRIVATE = 42;
  /** RegularExpression Id. */
  int PROTECTED = 43;
  /** RegularExpression Id. */
  int PUBLIC = 44;
  /** RegularExpression Id. */
  int RETURN = 45;
  /** RegularExpression Id. */
  int SHORT = 46;
  /** RegularExpression Id. */
  int STATIC = 47;
  /** RegularExpression Id. */
  int SUPER = 48;
  /** RegularExpression Id. */
  int SWITCH = 49;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 50;
  /** RegularExpression Id. */
  int THIS = 51;
  /** RegularExpression Id. */
  int THROW = 52;
  /** RegularExpression Id. */
  int THROWS = 53;
  /** RegularExpression Id. */
  int TRANSIENT = 54;
  /** RegularExpression Id. */
  int TRY = 55;
  /** RegularExpression Id. */
  int TYPEOF = 56;
  /** RegularExpression Id. */
  int VAR = 57;
  /** RegularExpression Id. */
  int VOID = 58;
  /** RegularExpression Id. */
  int VOLATILE = 59;
  /** RegularExpression Id. */
  int WHILE = 60;
  /** RegularExpression Id. */
  int WITH = 61;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 62;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 63;
  /** RegularExpression Id. */
  int HEX_LITERAL = 64;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 65;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 66;
  /** RegularExpression Id. */
  int EXPONENT = 67;
  /** RegularExpression Id. */
  int STRING_LITERAL = 68;
  /** RegularExpression Id. */
  int ESCAPE_SEQUENCE = 69;
  /** RegularExpression Id. */
  int BOOLEAN_LITERAL = 70;
  /** RegularExpression Id. */
  int NULL_LITERAL = 71;
  /** RegularExpression Id. */
  int LPAREN = 72;
  /** RegularExpression Id. */
  int RPAREN = 73;
  /** RegularExpression Id. */
  int LBRACE = 74;
  /** RegularExpression Id. */
  int RBRACE = 75;
  /** RegularExpression Id. */
  int LBRACKET = 76;
  /** RegularExpression Id. */
  int RBRACKET = 77;
  /** RegularExpression Id. */
  int SEMICOLON = 78;
  /** RegularExpression Id. */
  int COMMA = 79;
  /** RegularExpression Id. */
  int HASH = 80;
  /** RegularExpression Id. */
  int ASSIGN = 81;
  /** RegularExpression Id. */
  int DOT = 82;
  /** RegularExpression Id. */
  int IS = 83;
  /** RegularExpression Id. */
  int EQ = 84;
  /** RegularExpression Id. */
  int EQUAL = 85;
  /** RegularExpression Id. */
  int IS_NOT = 86;
  /** RegularExpression Id. */
  int NOT_EQUAL = 87;
  /** RegularExpression Id. */
  int NEQ = 88;
  /** RegularExpression Id. */
  int CONTAINS = 89;
  /** RegularExpression Id. */
  int DOES_NOT_CONTAIN = 90;
  /** RegularExpression Id. */
  int GREATER_THAN = 91;
  /** RegularExpression Id. */
  int GT = 92;
  /** RegularExpression Id. */
  int LESS_THAN = 93;
  /** RegularExpression Id. */
  int LT = 94;
  /** RegularExpression Id. */
  int GREATER_THAN_OR_EQ_TO = 95;
  /** RegularExpression Id. */
  int GTE = 96;
  /** RegularExpression Id. */
  int GE = 97;
  /** RegularExpression Id. */
  int LESS_THAN_OR_EQ_TO = 98;
  /** RegularExpression Id. */
  int LTE = 99;
  /** RegularExpression Id. */
  int LE = 100;
  /** RegularExpression Id. */
  int OR = 101;
  /** RegularExpression Id. */
  int XOR = 102;
  /** RegularExpression Id. */
  int AND = 103;
  /** RegularExpression Id. */
  int NOT = 104;
  /** RegularExpression Id. */
  int EQV = 105;
  /** RegularExpression Id. */
  int IMP = 106;
  /** RegularExpression Id. */
  int PLUS = 107;
  /** RegularExpression Id. */
  int MINUS = 108;
  /** RegularExpression Id. */
  int STAR = 109;
  /** RegularExpression Id. */
  int SLASH = 110;
  /** RegularExpression Id. */
  int CONCAT = 111;
  /** RegularExpression Id. */
  int POWER = 112;
  /** RegularExpression Id. */
  int REM = 113;
  /** RegularExpression Id. */
  int DIV = 114;
  /** RegularExpression Id. */
  int IDENTIFIER = 115;
  /** RegularExpression Id. */
  int LETTER = 116;
  /** RegularExpression Id. */
  int DIGIT = 117;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<S>",
    "<L>",
    "<UNICODE_BOM>",
    "<SINGLE_LINE_COMMENT>",
    "<CRIPPLED_SINGLE_LINE_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "<CDO>",
    "<CDC>",
    "\"abstract\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"delete\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"extends\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"function\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"in\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"try\"",
    "\"typeof\"",
    "\"var\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "\"with\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<ESCAPE_SEQUENCE>",
    "<BOOLEAN_LITERAL>",
    "\"null\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\"#\"",
    "\"=\"",
    "\".\"",
    "\"IS\"",
    "\"EQ\"",
    "\"EQUAL\"",
    "<IS_NOT>",
    "<NOT_EQUAL>",
    "\"NEQ\"",
    "\"CONTAINS\"",
    "<DOES_NOT_CONTAIN>",
    "<GREATER_THAN>",
    "\"GT\"",
    "<LESS_THAN>",
    "\"LT\"",
    "<GREATER_THAN_OR_EQ_TO>",
    "\"GTE\"",
    "\"GE\"",
    "<LESS_THAN_OR_EQ_TO>",
    "\"LTE\"",
    "\"LE\"",
    "\"OR\"",
    "\"XOR\"",
    "\"AND\"",
    "\"NOT\"",
    "\"EQV\"",
    "\"IMP\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"^\"",
    "\"MOD\"",
    "\"\\\\\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\":\"",
    "\"?\"",
    "\"|\"",
    "\"==\"",
    "\"!=\"",
    "\"===\"",
    "\"!==\"",
    "\"<<\"",
    "\">>\"",
    "\"++\"",
    "\"--\"",
  };

}
