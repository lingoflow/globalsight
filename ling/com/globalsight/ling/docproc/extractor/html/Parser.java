/* Generated By:JavaCC: Do not edit this line. Parser.java */
package com.globalsight.ling.docproc.extractor.html;

import com.globalsight.ling.docproc.extractor.html.HtmlObjects;
import com.globalsight.ling.docproc.extractor.html.IHtmlHandler;

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

/**
 * <p>A HTML Parser automatically generated by JavaCC.  Builds an HTML
 * Object Model and sends events to abstract handler methods in type
 * {@link IHtmlHandler}, which are implemented by class
 * ExtractionHandler.
 *
 * @see HtmlObjects
 * @see IHtmlHandler
 * @see ExtractionHandler
 */
public class Parser
    implements HtmlObjects, ParserConstants {
    IHtmlHandler m_handler = null;
    boolean ignoreInvalidHtmlTags = false;
        String jsFunctionText = null;

    public static void main(String args[])
        throws ParseException
    {
        Parser parser = new Parser (System.in);
        parser.parse();
    }

    public void setHandler(IHtmlHandler p_handler)
    {
        m_handler = p_handler;
    }

    public void setIgnoreInvalidHtmlTags(boolean ignore)
    {
        ignoreInvalidHtmlTags = ignore;
    }

        public void setJsFunctionText(String jsFunctionText)
        {
                this.jsFunctionText = jsFunctionText;
        }
    /**
     * <p>Return the current line number in the input file.  This is a
     * little helper that allows us to offset error positions obtained
     * from embedded extractors.  Embedded extractors receive a fresh
     * input object and start counting lines and columns from 1.</p>
     */
    public int getCurrentLine()
    {
        return jj_input_stream.line;
    }

    /**
     * <p>Return the current column number in the input file.  This is a
     * little helper that allows us to offset error positions obtained
     * from embedded extractors.  Embedded extractors receive a fresh
     * input object and start counting lines and columns from 1.</p>
     */
    public int getCurrentColumn()
    {
        return jj_input_stream.column;
    }

    /**
     * Returns the original text including whitespace that occured
     * between two tokens. Leading whitespace before the first token
     * is *not* returned. The tokens cannot be the same.
     */
    private String getTokenText(Token first, Token last)
    {
        StringBuffer res = new StringBuffer();

        res.append(first.image);

        for (Token t = first.next; t != last.next; t = t.next)
        {
            if (t.specialToken != null)
            {
                Token tt = t.specialToken;

                // walk the list backwards
                while (tt.specialToken != null)
                {
                    tt = tt.specialToken;
                }

                // and forwards again
                for (; tt != null; tt = tt.next)
                {
                    res.append(tt.image);
                }
            }

            res.append(t.image);
        }

        return res.toString();
    }

/*
<InEntity> TOKEN :
{
  <ENTITY_END:   ";" > : DEFAULT
| <NUMERIC_ENTITY:  ("#" ("x")? (["0"-"9", "a"-"f"])+) >
| <CHAR_ENTITY:  (<ALPHA_CHAR>)+ >
}
*/

/* START OF GRAMMAR */
  final public void parse() throws ParseException {
    Token text;
    Tag t1;
    Script t2;
    Style t3;
    Java t4;
    CFTag t5;
    CFScript t6;
    CFQuery t7;
    Xsp t8;
    EndTag t9;
      m_handler.handleStart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNICODE_BOM:
      jj_consume_token(UNICODE_BOM);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CR_NEWLINE:
      case TAG_START:
      case ENDTAG_START:
      case CFCOMMENT_START:
      case COMMENT_START:
      case DECL_START:
      case PI_START:
      case XSP_START:
      case PCDATA:
      case TAG_CLOSE:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      if (jj_2_1(2)) {
        t1 = parseStartTag();
                                          m_handler.handleStartTag(t1);
      } else if (jj_2_2(2)) {
        t2 = parseScript();
                                          m_handler.handleScript(t2);
      } else if (jj_2_3(2)) {
        t3 = parseStyle();
                                          m_handler.handleStyle(t3);
      } else if (jj_2_4(2)) {
        t4 = parseJava();
                                          m_handler.handleJava(t4);
      } else if (jj_2_5(2)) {
        t5 = parseCFStartTag();
                                          m_handler.handleCFStartTag(t5);
      } else if (jj_2_6(2)) {
        t6 = parseCFScript();
                                          m_handler.handleCFScript(t6);
      } else if (jj_2_7(2)) {
        t7 = parseCFQuery();
                                          m_handler.handleCFQuery(t7);
      } else if (jj_2_8(2)) {
        t8 = parseXSP();
                                          m_handler.handleXsp(t8);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ENDTAG_START:
          t9 = parseEndTag();
                          if (t9.tag.toUpperCase().startsWith("CF"))
                          {
                            m_handler.handleCFEndTag(t9);
                          }
                          else
                          {
                            m_handler.handleEndTag(t9);
                          }
          break;
        case CFCOMMENT_START:
          parseCfComment();
          break;
        case COMMENT_START:
          parseComment();
          break;
        case DECL_START:
          parseDeclaration();
          break;
        case PI_START:
          parseProcessingInstruction();
          break;
        case PCDATA:
          parseText();
          break;
        case CR_NEWLINE:
          parseNewline();
          break;
        case TAG_CLOSE:
          parseSpecialChar();
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(0);
      m_handler.handleFinish();
  }

  final public void parseComment() throws ParseException {
    Token t;
    StringBuffer s = new StringBuffer ("");
    jj_consume_token(COMMENT_START);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DASH:
      case COMMENT_WORD:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DASH:
        t = jj_consume_token(DASH);
            s.append(t.image);
        break;
      case COMMENT_WORD:
        t = jj_consume_token(COMMENT_WORD);
            s.append(t.image);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(COMMENT_END);
            m_handler.handleComment(new Comment(s.toString()));
  }

  final public void parseCfComment() throws ParseException {
    Token t;
    StringBuffer s;
    t = jj_consume_token(CFCOMMENT_START);
    s = parseCfCommentRecursive(0);
            m_handler.handleCfComment(new CfComment(s.toString()));
  }

/** Returns only the comment content without start and end tags. */
  final public StringBuffer parseCfCommentRecursive(int level) throws ParseException {
    Token t;
    StringBuffer s = new StringBuffer();
    StringBuffer c;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CFCOMMENT_START1:
      case LESSTHAN:
      case DASH1:
      case COMMENT_WORD1:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CFCOMMENT_START1:
        jj_consume_token(CFCOMMENT_START1);
        c = parseCfCommentRecursive(level + 1);
            s.append("<!---");
            s.append(c);
            s.append("---!>");
        break;
      case LESSTHAN:
        t = jj_consume_token(LESSTHAN);
            s.append(t.image);
        break;
      case DASH1:
        t = jj_consume_token(DASH1);
            s.append(t.image);
        break;
      case COMMENT_WORD1:
        t = jj_consume_token(COMMENT_WORD1);
            s.append(t.image);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(CFCOMMENT_END);
            if (level == 0)
            {
                token_source.SwitchTo(DEFAULT);
            }
            {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public void parseProcessingInstruction() throws ParseException {
    Token t;
    jj_consume_token(PI_START);
    t = jj_consume_token(PI_ANY);
    jj_consume_token(PI_END);
         m_handler.handlePI(new PI(t.image));
  }

  final public void parseDeclaration() throws ParseException {
    Token t;
    jj_consume_token(DECL_START);
    t = jj_consume_token(DECL_ANY);
    jj_consume_token(DECL_END);
         m_handler.handleDeclaration(new Declaration(t.image));
  }

  final public Attribute parseAttribute(int p_state) throws ParseException {
    Token t1, t2 = null;
    t1 = jj_consume_token(ATTR_NAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
      t2 = jj_consume_token(ATTR_VALUE);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
        token_source.SwitchTo(p_state);

        if (t2 == null)
        {
            {if (true) return new Attribute(t1.image);}
        }
        else
        {
            String temp = t2.image;
            char lastChar  = temp.charAt(temp.length() - 1);
            char firstChar = temp.charAt(0);
            if ((lastChar != firstChar) &&
                (lastChar == '"' || lastChar == '\''))
            {
                // Must be one of them sickly quoted attributes.
                // Repair att=val" to att="val"
                temp = lastChar + temp;
            }

            // Handle CDATA: should ignore \n and replace \r\t with space.
            // However, we remove \r\n and leave \t alone.
            int i_at;
            while ((i_at = temp.indexOf('\n')) >= 0)
            {
                temp = temp.substring(0, i_at) + temp.substring(i_at + 1);
            }
            while ((i_at = temp.indexOf('\r')) >= 0)
            {
            temp = temp.substring(0, i_at) + temp.substring(i_at + 1);
            }

            {if (true) return new Attribute(t1.image, temp);}
        }
    throw new Error("Missing return statement in function");
  }

  final public AttributeList parseAttributeList() throws ParseException {
    AttributeList alist = new AttributeList();
    Attribute a;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTR_NAME:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      a = parseAttribute(token_source.curLexState);
            alist.addAttribute(a);
    }
          {if (true) return alist;}
    throw new Error("Missing return statement in function");
  }

  final public ExtendedAttributeList parseExtendedAttributeList() throws ParseException {
    ExtendedAttributeList elist = new ExtendedAttributeList();
    AttributeList alist;
    Attribute a;
    Token t, t1, tag;
    EndTag e;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TAG_START_EMBEDDED:
      case ENDTAG_START_EMBEDDED:
      case XSP_START_EMBEDDED:
      case ATTR_NAME:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TAG_START_EMBEDDED:
        t = jj_consume_token(TAG_START_EMBEDDED);
            // shouldn't have to call SwitchTo() but only this works.
            token_source.SwitchTo(StartEmbeddedTag);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CF_EXPRESSIONTAG_NAME1:
          tag = jj_consume_token(CF_EXPRESSIONTAG_NAME1);
          alist = parseCFExpression();
          break;
        case CF_TAG_NAME1:
          tag = jj_consume_token(CF_TAG_NAME1);
          alist = parseAttributeList();
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CF_TAG_END:
          t1 = jj_consume_token(CF_TAG_END);
              elist.addSimpleTag(new CFTag(tag.image, alist, false,
                  getTokenText(t, t1)));
              token_source.SwitchTo(InTag);
          break;
        case CF_TAG_END_CLOSE:
          t1 = jj_consume_token(CF_TAG_END_CLOSE);
              elist.addSimpleTag(new CFTag(tag.image, alist, true,
                  getTokenText(t, t1)));
              token_source.SwitchTo(InTag);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case XSP_START_EMBEDDED:
        jj_consume_token(XSP_START_EMBEDDED);
            // shouldn't have to call SwitchTo() but only this works.
            token_source.SwitchTo(StartEmbeddedTag);
        tag = jj_consume_token(XSP);
            // shouldn't have to call SwitchTo() but only this works.
            token_source.SwitchTo(InTag);
        jj_consume_token(TAG_END_XSP);
            elist.addSimpleTag(new EmbeddedXspTag(tag.image,
                "<%" + tag.image + "%>"));
        break;
      case ENDTAG_START_EMBEDDED:
        jj_consume_token(ENDTAG_START_EMBEDDED);
            // shouldn't have to call SwitchTo() but only this works.
            token_source.SwitchTo(StartEmbeddedTag);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CF_EXPRESSIONTAG_NAME1:
          tag = jj_consume_token(CF_EXPRESSIONTAG_NAME1);
          break;
        case CF_TAG_NAME1:
          tag = jj_consume_token(CF_TAG_NAME1);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(CF_TAG_END);
              elist.addEndTag(new EndTag(tag.image));

              token_source.SwitchTo(InTag);
        break;
      case ATTR_NAME:
        a = parseAttribute(token_source.curLexState);
            elist.addAttribute(a);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return elist;}
    throw new Error("Missing return statement in function");
  }

  final public Tag parseStartTag() throws ParseException {
    Token t=null, tag=null, t1;
    ExtendedAttributeList elist = null;
    Token firstToken = getToken(1);
    boolean b_closed = false;
    try {
      t = jj_consume_token(TAG_START);
      tag = jj_consume_token(TAG_NAME);
      elist = parseExtendedAttributeList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TAG_END:
        t1 = jj_consume_token(TAG_END);
        break;
      case TAG_END_CLOSE:
        t1 = jj_consume_token(TAG_END_CLOSE);
                                     b_closed = true;
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        token_source.SwitchTo(DEFAULT);

        {if (true) return new Tag(tag.image, elist, b_closed,
            getTokenText(t, t1), t.beginLine, t.beginColumn);}
    } catch (ParseException e) {
        token_source.SwitchTo(DEFAULT);

        if(!ignoreInvalidHtmlTags)
        {
            String s = getTokenText(firstToken, getNextToken());
            {if (true) throw new ParseException("Error parsing STARTTAG:\n" +
                e.getMessage() + "\nin input: " + s);}
        }

        Token t2 = getNextToken();
        while (t2.kind != TAG_CLOSE && !">".equalsIgnoreCase(t2.image))
        {
            t2 = getNextToken();

            if (t2.kind == EOF)
            {
                String s = getTokenText(firstToken, t2);
                {if (true) {if (true) throw new ParseException("Error parsing STARTTAG:\n"
                        + e.getMessage() + "\nin input: " + s);}}
            }
        }

        String content = getTokenText(t, t2);
        b_closed = content.endsWith("/>");
        Tag returnTag = new Tag(tag.image, elist, b_closed,
                content, t.beginLine, t.beginColumn);
        returnTag.setIgnore(true);

        {if (true) return returnTag;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Attribute parseCFToken() throws ParseException {
    Token t = null;
    StringBuffer sb = new StringBuffer();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CF_IDENTIFIER:
      t = jj_consume_token(CF_IDENTIFIER);
      break;
    case CF_STRING:
      t = jj_consume_token(CF_STRING);
      break;
    case CF_NUMBER:
      t = jj_consume_token(CF_NUMBER);
      break;
    case CF_LPAREN:
      t = jj_consume_token(CF_LPAREN);
      break;
    case CF_RPAREN:
      t = jj_consume_token(CF_RPAREN);
      break;
    case CF_OPER:
      t = jj_consume_token(CF_OPER);
      break;
    case CF_EQUAL:
      t = jj_consume_token(CF_EQUAL);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        if (t.specialToken != null)
        {
            Token tt = t.specialToken;
            while (tt.specialToken != null)
            {
                tt = tt.specialToken;
            }

            for (; tt != null; tt = tt.next)
            {
                sb.append(tt.image);
            }
        }

        sb.append(t.image);

        {if (true) return new Attribute(sb.toString());}
    throw new Error("Missing return statement in function");
  }

// For expression-taking tags (CFSET, CFIF, CFELSEIF) we read tokens
// until we hit the closing > tag delimiter.  The tokens are collected
// as Attribute.name fields in an AttributeList which is then
// converted to a single string in a new Attribute.name field.  That
// way it can be submitted to a CFScript parser later.
//
// Note: whitespace in expressions is lost.
  final public AttributeList parseCFExpression() throws ParseException {
    AttributeList alist = new AttributeList();
    Attribute a;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CF_IDENTIFIER:
      case CF_STRING:
      case CF_NUMBER:
      case CF_LPAREN:
      case CF_RPAREN:
      case CF_EQUAL:
      case CF_OPER:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      a = parseCFToken();
            alist.addAttribute(a);
    }
          // Restore the original string and put it into a single attr
          StringBuffer buf = new StringBuffer();

          for (int i = 0; i < alist.size(); ++i)
          {
              a = (Attribute)alist.get(i);
              buf.append(a.name);
          }

          alist.clear();
          alist.addAttribute(new Attribute(buf.toString()));

          {if (true) return alist;}
    throw new Error("Missing return statement in function");
  }

  final public CFTag parseCFStartTag() throws ParseException {
    Token t, t1, tag;
    AttributeList alist;
    Token firstToken = getToken(1);
    boolean b_closed = false;
    try {
      t = jj_consume_token(TAG_START);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CF_EXPRESSIONTAG_NAME:
        tag = jj_consume_token(CF_EXPRESSIONTAG_NAME);
        alist = parseCFExpression();
        break;
      case CF_TAG_NAME:
        tag = jj_consume_token(CF_TAG_NAME);
        alist = parseAttributeList();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CF_TAG_END:
        t1 = jj_consume_token(CF_TAG_END);
                token_source.SwitchTo(DEFAULT);
        break;
      case CF_TAG_END_CLOSE:
        t1 = jj_consume_token(CF_TAG_END_CLOSE);
                token_source.SwitchTo(DEFAULT);
                b_closed = true;
        break;
      case TAG_END:
        t1 = jj_consume_token(TAG_END);
                token_source.SwitchTo(DEFAULT);
        break;
      case TAG_END_CLOSE:
        t1 = jj_consume_token(TAG_END_CLOSE);
                token_source.SwitchTo(DEFAULT);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        {if (true) return new CFTag(tag.image, alist, b_closed,
            getTokenText(t, t1));}
    } catch (ParseException e) {
        token_source.SwitchTo(DEFAULT);
        String s = getTokenText(firstToken, getNextToken());
        {if (true) throw new ParseException("Error parsing CFSTARTTAG:\n" +
            e.getMessage() + "\nin input: " + s);}
    }
    throw new Error("Missing return statement in function");
  }

  final public CFScript parseCFScript() throws ParseException {
    Token t, t1, t2, t3, tag;
    StringBuffer s = new StringBuffer();
    AttributeList alist;
    t = jj_consume_token(TAG_START);
    tag = jj_consume_token(CFSCRIPT);
    alist = parseAttributeList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CF_TAG_END_CLOSE:
      t1 = jj_consume_token(CF_TAG_END_CLOSE);
            token_source.SwitchTo(DEFAULT);

            {if (true) return new CFScript(tag.image, alist, true,
                getTokenText(t, t1), "", t.beginLine, t.beginColumn);}
      break;
    case CF_TAG_END:
      t1 = jj_consume_token(CF_TAG_END);
            token_source.SwitchTo(InCFScript);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CFSCRIPT_TEXT:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_7;
        }
        t2 = jj_consume_token(CFSCRIPT_TEXT);
                               s.append(t2.image);
      }
      t3 = jj_consume_token(CFSCRIPT_END);
            String text = s.toString();

            {if (true) return new CFScript(tag.image, alist, false,
                getTokenText(t, t3), text, t.beginLine, t.beginColumn);}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public CFQuery parseCFQuery() throws ParseException {
    Token t, t1, t2, t3, tag;
    StringBuffer s = new StringBuffer();
    AttributeList alist;
    t = jj_consume_token(TAG_START);
    tag = jj_consume_token(CFQUERY);
    alist = parseAttributeList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CF_TAG_END_CLOSE:
      t1 = jj_consume_token(CF_TAG_END_CLOSE);
            token_source.SwitchTo(DEFAULT);

            {if (true) return new CFQuery(tag.image, alist, true,
                getTokenText(t, t1), "", t.beginLine, t.beginColumn);}
      break;
    case CF_TAG_END:
      t1 = jj_consume_token(CF_TAG_END);
            token_source.SwitchTo(InCFQuery);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CFQUERY_TEXT:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_8;
        }
        t2 = jj_consume_token(CFQUERY_TEXT);
                               s.append(t2.image);
      }
      t3 = jj_consume_token(CFQUERY_END);
            String text = s.toString();

            {if (true) return new CFQuery(tag.image, alist, false,
                getTokenText(t, t3), text, t.beginLine, t.beginColumn);}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Xsp parseXSP() throws ParseException {
    Token t, t1, t2;
    StringBuffer s = new StringBuffer();
    t = jj_consume_token(XSP_START);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XSP_TEXT:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_9;
      }
      t1 = jj_consume_token(XSP_TEXT);
                      s.append(t1.image);
    }
    t2 = jj_consume_token(XSP_END);
            String text = s.toString();

            {if (true) return new Xsp(text, t.beginLine, t.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Script parseScript() throws ParseException {
    Token t, t1, t2, t3, tag;
    StringBuffer b = new StringBuffer();
    ExtendedAttributeList elist;
    t = jj_consume_token(TAG_START);
    tag = jj_consume_token(SCRIPT);
    elist = parseExtendedAttributeList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TAG_END_CLOSE:
      t1 = jj_consume_token(TAG_END_CLOSE);
            {if (true) return new Script(tag.image, elist, true,
                getTokenText(t, t1), "", t.beginLine, t.beginColumn);}
      break;
    case TAG_END:
      t1 = jj_consume_token(TAG_END);
                              token_source.SwitchTo(InScript);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SCRIPT_TEXT:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_10;
        }
        t2 = jj_consume_token(SCRIPT_TEXT);
                              b.append(t2.image);
      }
      t3 = jj_consume_token(SCRIPT_END);
            String text = b.toString();

            {if (true) return new Script(tag.image, elist, false,
                getTokenText(t, t3), text, t.beginLine, t.beginColumn);}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Java parseJava() throws ParseException {
    Token t, t1, t2, t3, tag;
    StringBuffer b = new StringBuffer();
    ExtendedAttributeList elist;
    t = jj_consume_token(TAG_START);
    tag = jj_consume_token(JAVA);
    elist = parseExtendedAttributeList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TAG_END_CLOSE:
      t1 = jj_consume_token(TAG_END_CLOSE);
            {if (true) return new Java(tag.image, elist, true,
                getTokenText(t, t1), "", t.beginLine, t.beginColumn);}
      break;
    case TAG_END:
      t1 = jj_consume_token(TAG_END);
                              token_source.SwitchTo(InJava);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case JAVA_TEXT:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_11;
        }
        t2 = jj_consume_token(JAVA_TEXT);
                              b.append(t2.image);
      }
      t3 = jj_consume_token(JAVA_END);
            String text = b.toString();

            {if (true) return new Java(tag.image, elist, false,
                getTokenText(t, t3), text, t.beginLine, t.beginColumn);}
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Style parseStyle() throws ParseException {
    Token t, t1, t2, t3, tag;
    StringBuffer b = new StringBuffer();
    ExtendedAttributeList elist;
    t = jj_consume_token(TAG_START);
    tag = jj_consume_token(STYLE);
    elist = parseExtendedAttributeList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TAG_END_CLOSE:
      t1 = jj_consume_token(TAG_END_CLOSE);
            {if (true) return new Style(tag.image, elist, true,
                getTokenText(t, t1), "", t.beginLine, t.beginColumn);}
      break;
    case TAG_END:
      t1 = jj_consume_token(TAG_END);
                                    token_source.SwitchTo(InStyle);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STYLE_TEXT:
        case COMMENTED_STYLE_TEXT:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STYLE_TEXT:
          t2 = jj_consume_token(STYLE_TEXT);
                                    b.append(t2.image);
          break;
        case COMMENTED_STYLE_TEXT:
          t2 = jj_consume_token(COMMENTED_STYLE_TEXT);
                                    b.append(t2.image);
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      t3 = jj_consume_token(STYLE_END);
            String text = b.toString();

            {if (true) return new Style(tag.image, elist, false,
                getTokenText(t, t3), text, t.beginLine, t.beginColumn);}
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public EndTag parseEndTag() throws ParseException {
    Token t;
    jj_consume_token(ENDTAG_START);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TAG_NAME:
      t = jj_consume_token(TAG_NAME);
      jj_consume_token(TAG_END);
      break;
    case CF_TAG_NAME:
      t = jj_consume_token(CF_TAG_NAME);
      jj_consume_token(CF_TAG_END);
            token_source.SwitchTo(DEFAULT);
      break;
    case CF_EXPRESSIONTAG_NAME:
      t = jj_consume_token(CF_EXPRESSIONTAG_NAME);
      jj_consume_token(CF_TAG_END);
            token_source.SwitchTo(DEFAULT);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            {if (true) return new EndTag(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public void parseText() throws ParseException {
    Token t;
    t = jj_consume_token(PCDATA);
        m_handler.handleText(new Text(t.image));
  }

  final public void parseSpecialChar() throws ParseException {
    Token t;
    t = jj_consume_token(TAG_CLOSE);
        m_handler.handleSpecialChar(new Text(t.image));
  }

  final public void parseNewline() throws ParseException {
    Token t;
    t = jj_consume_token(CR_NEWLINE);
        m_handler.handleNewline(new Newline(t.image));
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_3_5() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(CF_TAG_NAME)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(TAG_START)) return true;
    if (jj_scan_token(TAG_NAME)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(CF_EXPRESSIONTAG_NAME)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(TAG_START)) return true;
    if (jj_scan_token(CFSCRIPT)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(TAG_START)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(TAG_START)) return true;
    if (jj_scan_token(STYLE)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(TAG_START)) return true;
    if (jj_scan_token(SCRIPT)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(TAG_START)) return true;
    if (jj_scan_token(CFQUERY)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(XSP_TEXT)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(XSP_START)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_23()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(XSP_END)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(TAG_START)) return true;
    if (jj_scan_token(JAVA)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_18()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800,0x3ff000,0x37d000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x38000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x800,0x838,0xc000,0x600,0xc000,0x838,0x140,0xfe0000,0xfe0000,0x0,0x740,0x40000000,0x600,0x0,0x600,0x0,0x4000000,0x140,0x10000000,0x140,0x0,0x0,0x140,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x300,0x300,0x6c00,0x6c00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x100000,0x0,0x0,0x0,0x0,0x24,0x24,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[8];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[85];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 85; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    token.next.beginColumn = jj_input_stream.column;     token.next.beginLine = jj_input_stream.line;     return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
