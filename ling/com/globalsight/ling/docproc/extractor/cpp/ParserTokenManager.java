/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package com.globalsight.ling.docproc.extractor.cpp;
import java.io.* ;
import java.util.* ;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{
    private IParseEvents m_handler = null;

    public void setHandler(IParseEvents handler)
        {
            m_handler = handler;
        }

    private final Integer dummy = new Integer(0);
    private Hashtable keywords = new Hashtable();
    private boolean hashtable_initialized = false;

    private void initializeHashtable()
        {
        keywords.put( "auto" , dummy ) ;
        keywords.put( "bool" , dummy ) ;
        keywords.put( "break" , dummy ) ;
        keywords.put( "case" , dummy ) ;
        keywords.put( "catch" , dummy ) ;
        keywords.put( "char" , dummy ) ;
        keywords.put( "const" , dummy ) ;
        keywords.put( "continue" , dummy ) ;
        keywords.put( "default" , dummy ) ;
        keywords.put( "delete" , dummy ) ;
        keywords.put( "do" , dummy ) ;
        keywords.put( "double" , dummy ) ;
        keywords.put( "else" , dummy ) ;
        keywords.put( "enum" , dummy ) ;
        keywords.put( "extern" , dummy ) ;
        keywords.put( "float" , dummy ) ;
        keywords.put( "for" , dummy ) ;
        keywords.put( "friend" , dummy ) ;
        keywords.put( "goto" , dummy ) ;
        keywords.put( "if" , dummy ) ;
        keywords.put( "inline" , dummy ) ;
        keywords.put( "int" , dummy ) ;
        keywords.put( "long" , dummy ) ;
        keywords.put( "namespace" , dummy ) ;
        keywords.put( "new" , dummy ) ;
        keywords.put( "private" , dummy ) ;
        keywords.put( "protected" , dummy ) ;
        keywords.put( "public" , dummy ) ;
        keywords.put( "redeclared" , dummy ) ;
        keywords.put( "register" , dummy ) ;
        keywords.put( "return" , dummy ) ;
        keywords.put( "short" , dummy ) ;
        keywords.put( "signed" , dummy ) ;
        keywords.put( "sizeof" , dummy ) ;
        keywords.put( "static" , dummy ) ;
        keywords.put( "struct" , dummy ) ;
        keywords.put( "class" , dummy ) ;
        keywords.put( "switch" , dummy ) ;
        keywords.put( "template" , dummy ) ;
        keywords.put( "this" , dummy ) ;
        keywords.put( "try" , dummy ) ;
        keywords.put( "typedef" , dummy ) ;
        keywords.put( "union" , dummy ) ;
        keywords.put( "unsigned" , dummy ) ;
        keywords.put( "using" , dummy ) ;
        keywords.put( "virtual" , dummy ) ;
        keywords.put( "void" , dummy ) ;
        keywords.put( "volatile" , dummy ) ;
        keywords.put( "while" , dummy ) ;
        keywords.put( "operator" , dummy ) ;
        keywords.put( "true" , dummy ) ;
        keywords.put( "false" , dummy ) ;
        keywords.put( "throw" , dummy ) ;
        hashtable_initialized = true ;
        }

    private StringBuffer currentLine = new StringBuffer() ;

    private final int PLAIN = 0;
    private final int KEYWORD = 1;
    private final int LINECOMMENT = 2;
    private final int COMMENT = 3;
    private final int CONSTANT = 4;
    private final int PREPROCESSOR = 5;
    private final int STRING = 6;

    // Used to communicate from lex actions
    private int colourClass = PLAIN;
    private int currentColour = PLAIN;

    public void finish()
        {
            // flush the last token/stringbuffer
            endColour();
        }

    private void startColour()
        {
            currentColour = colourClass;

            switch (currentColour)
            {
            case PLAIN :
            case KEYWORD :
            case LINECOMMENT :
            case COMMENT :
            case CONSTANT :
            case PREPROCESSOR :
            case STRING :
            break;

            default : throw new Error("assert failed") ;
            }
        }

    private void endColour()
        {
            String text = currentLine.toString();

            //System.err.println("code " + currentColour + " text = `" + text + "'");

            switch (currentColour)
            {
            case PLAIN :
            case KEYWORD :
            case CONSTANT :
            {
                m_handler.handleCode(text);
                currentLine.setLength(0);
                currentColour = PLAIN;
            }
            break;

            case PREPROCESSOR :
            {
                m_handler.handleCode(text);
                currentLine.setLength(0);
                currentColour = PLAIN;
            }
            break;

            case LINECOMMENT :
            {
                m_handler.handleComment(text, m_handler.SINGLE_LINE_COMMENT);
                currentLine.setLength(0);
                currentColour = PLAIN;
            }
            break;

            case COMMENT :
            {
                m_handler.handleComment(text, m_handler.MULTI_LINE_COMMENT);
                currentLine.setLength(0);
                currentColour = PLAIN;
            }
            break;

            case STRING :
            {
                m_handler.handleString(text);
                currentLine.setLength(0);
                currentColour = PLAIN;
            }
            break;

            default : throw new Error("assert failed") ;
            }
        }


    private void CommonTokenAction(Token token)
        {
            if (!hashtable_initialized)
            {
                initializeHashtable();
            }

            if (token.kind == ID_OR_KEYWORD && keywords.containsKey(token.image))
            {
                colourClass = KEYWORD;
            }

            if (currentColour != colourClass)
            {
                endColour();
            }
            if (currentColour != colourClass)
            {
                startColour();
            }

            currentLine.append(token.image);

            colourClass = PLAIN;
        }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStopAtPos(0, 1);
      case 35:
         return jjStopAtPos(0, 7);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x60L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 47:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 29;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff400000000000L & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                     jjCheckNAdd(1);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 39)
                     jjAddStates(3, 4);
                  break;
               case 1:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 39)
                     jjAddStates(3, 4);
                  break;
               case 3:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if (curChar == 39 && kind > 15)
                     kind = 15;
                  break;
               case 6:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 7:
                  if (curChar == 48)
                     jjCheckNAddTwoStates(4, 8);
                  break;
               case 8:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 9:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 10:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 4);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(12, 4);
                  break;
               case 13:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 14:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 16:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 17:
                  if (curChar == 34 && kind > 16)
                     kind = 16;
                  break;
               case 18:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if (curChar == 10)
                     jjCheckNAddStates(0, 2);
                  break;
               case 20:
                  if (curChar == 48)
                     jjCheckNAddStates(8, 11);
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 16);
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(17, 20);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(21, 24);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjstateSet[jjnewStateCnt++] = 27;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAdd(27);
                  }
                  if (curChar == 76)
                     jjAddStates(25, 26);
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 92)
                     jjAddStates(27, 29);
                  break;
               case 6:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 11:
                  if ((0x120000001200000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(12, 4);
                  break;
               case 14:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 15:
                  if (curChar == 92)
                     jjAddStates(30, 34);
                  break;
               case 16:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 24:
                  if ((0x120000001200000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(21, 24);
                  break;
               case 26:
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if (curChar == 76)
                     jjAddStates(25, 26);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 14:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 29 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 8);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 12);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   14, 15, 17, 3, 5, 9, 4, 10, 14, 15, 17, 21, 14, 15, 22, 17, 
   23, 14, 15, 22, 17, 14, 15, 25, 17, 2, 13, 6, 7, 11, 16, 18, 
   19, 20, 24, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_LINE_COMMENT",
   "IN_COMMENT",
   "PREPROCESSOR_OUTPUT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 2, 3, 0, -1, 0, -1, 0, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x7c001L, 
};
static final long[] jjtoSkip = {
   0x15feL, 
};
static final long[] jjtoSpecial = {
   0x15feL, 
};
static final long[] jjtoMore = {
   0x2a00L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[29];
private final int[] jjstateSet = new int[58];
private final StringBuffer jjimage = new StringBuffer();
private StringBuffer image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 29; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 18)
         {
            jjmatchedKind = 18;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 13)
         {
            jjmatchedKind = 13;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           CommonTokenAction(matchedToken);
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
         CommonTokenAction( matchedToken ) ;
         break;
      case 2 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
         CommonTokenAction( matchedToken ) ;
         break;
      case 3 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
         CommonTokenAction( matchedToken ) ;
         break;
      case 4 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
         CommonTokenAction( matchedToken ) ;
         break;
      case 5 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        colourClass = PLAIN; CommonTokenAction( matchedToken );
         break;
      case 6 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        colourClass = PLAIN; CommonTokenAction( matchedToken );
         break;
      case 7 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        colourClass = PREPROCESSOR; CommonTokenAction( matchedToken );
         break;
      case 8 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
           colourClass = LINECOMMENT; CommonTokenAction( matchedToken );
         break;
      case 10 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
           colourClass = COMMENT; CommonTokenAction( matchedToken );
         break;
      case 12 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
           colourClass = PREPROCESSOR; CommonTokenAction( matchedToken );
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 14 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        colourClass = CONSTANT ;
         break;
      case 15 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
           colourClass = CONSTANT ;
         break;
      case 16 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            colourClass = STRING ;
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
