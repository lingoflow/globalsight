/* Generated By:JavaCC: Do not edit this line. Parser.java */
package com.globalsight.ling.docproc.extractor.xptag;

import com.globalsight.ling.docproc.extractor.xptag.XPTagObjects;
import com.globalsight.ling.docproc.extractor.xptag.IHandler;

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

/**
 * <p>A XPTAG Parser automatically generated by JavaCC.  Builds an
 * Object Model and sends events to abstract handler methods in type
 * {@link IHandler}, which are implemented by class
 * ExtractionHandler.
 *
 * @see XPTagObjects
 * @see IHandler
 * @see ExtractionHandler
 */
public class Parser
    implements XPTagObjects, ParserConstants {
    IHandler m_handler = null;

    public static void main(String args[])
        throws ParseException
    {
        Parser parser = new Parser (System.in);
        parser.parse();
    }

    public void setHandler(IHandler p_handler)
    {
        m_handler = p_handler;
    }

    /**
     * <p>Return the current line number in the input file.  This is a
     * little helper that allows us to offset error positions obtained
     * from embedded extractors.  Embedded extractors receive a fresh
     * input object and start counting lines and columns from 1.</p>
     */
    public int getCurrentLine()
    {
        return jj_input_stream.line;
    }

    /**
     * <p>Return the current column number in the input file.  This is a
     * little helper that allows us to offset error positions obtained
     * from embedded extractors.  Embedded extractors receive a fresh
     * input object and start counting lines and columns from 1.</p>
     */
    public int getCurrentColumn()
    {
        return jj_input_stream.column;
    }

    /**
     * Returns the original text including whitespace that occured
     * between two tokens. Leading whitespace before the first token
     * is *not* returned. The tokens cannot be the same.
     */
    private String getTokenText(Token first, Token last)
    {
        StringBuffer res = new StringBuffer();

        res.append(first.image);

        for (Token t = first.next; t != last.next; t = t.next)
        {
            if (t.specialToken != null)
            {
                Token tt = t.specialToken;

                // walk the list backwards
                while (tt.specialToken != null)
                {
                    tt = tt.specialToken;
                }

                // and forwards again
                for (; tt != null; tt = tt.next)
                {
                    res.append(tt.image);
                }
            }

            res.append(t.image);
        }

        return res.toString();
    }

/* START OF GRAMMAR */
  final public void parse() throws ParseException {
    Token text;
      m_handler.handleStart();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNICODE_BOM:
      jj_consume_token(UNICODE_BOM);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERSION:
      case CHARSET:
      case AT:
      case LT:
      case BACKSLASH:
      case PARATAG:
      case SPECIALTAG:
      case TAGSTART:
      case STYLE:
      case PCDATA:
      case NEWLINE2:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERSION:
      case CHARSET:
      case PARATAG:
      case SPECIALTAG:
      case TAGSTART:
        parseTag();
        break;
      case STYLE:
        parseStyle();
        break;
      case AT:
      case LT:
      case BACKSLASH:
      case PCDATA:
        parseText();
        break;
      case NEWLINE2:
        parseNewline();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
      m_handler.handleFinish();
  }

  final public void parseTag() throws ParseException {
    Token t, t1, t2;
    StringBuffer sb;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERSION:
      t = jj_consume_token(VERSION);
            m_handler.handleVersion(new Version(t.image));
      break;
    case CHARSET:
      t = jj_consume_token(CHARSET);
            m_handler.handleEncoding(new Encoding(t.image));
      break;
    case PARATAG:
      t = jj_consume_token(PARATAG);
            m_handler.handleParagraphTag(new ParaTag(t.image));
      break;
    case SPECIALTAG:
      t = jj_consume_token(SPECIALTAG);
            m_handler.handleSpecialTag(new SpecialTag(t.image));
      break;
    case TAGSTART:
      t = jj_consume_token(TAGSTART);
            sb = new StringBuffer();
            sb.append(t.image);
      label_2:
      while (true) {
        t1 = jj_consume_token(TAGCHAR);
                             sb.append(t1.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TAGCHAR:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
      }
      t2 = jj_consume_token(TAGEND);
            sb.append(t2.image);
            m_handler.handleCharacterTag(new CharTag(sb.toString()));
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// token_source.SwitchTo(DEFAULT);
  final public void parseStyle() throws ParseException {
    Token t, t1=null, t2, t3, t4, t5, t6, t7, t8, t9;
    StringBuffer sb = new StringBuffer();
    t = jj_consume_token(STYLE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STYLENAME:
      t1 = jj_consume_token(STYLENAME);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      t2 = jj_consume_token(COLON);
        sb.append(t.image);
        if (t1 != null) sb.append(t1.image);
        sb.append(t2.image);

        m_handler.handleStyleSelection(new StyleSelection(sb.toString()));
      break;
    case EQUAL:
      t2 = jj_consume_token(EQUAL);
            sb.append(t.image);
            if (t1 != null) sb.append(t1.image);
            sb.append(t2.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        t3 = jj_consume_token(LBRACKET);
                                    sb.append(t3.image);
        label_3:
        while (true) {
          t4 = jj_consume_token(STYLENAME2);
                                    sb.append(t4.image);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STYLENAME2:
            ;
            break;
          default:
            jj_la1[6] = jj_gen;
            break label_3;
          }
        }
        t5 = jj_consume_token(RBRACKET);
                                    sb.append(t5.image);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      t6 = jj_consume_token(LESSTHAN);
                                    sb.append(t6.image);
      label_4:
      while (true) {
        t7 = jj_consume_token(STYLEDEFINITION);
                                    sb.append(t7.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STYLEDEFINITION:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_4;
        }
      }
      t8 = jj_consume_token(GREATERTHAN);
                                    sb.append(t8.image);
      t9 = jj_consume_token(NEWLINE);
                                    sb.append(t9.image);
        m_handler.handleStyleDefinition(new StyleDefinition(sb.toString()));
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void parseText() throws ParseException {
    Token t;
    StringBuffer sb = new StringBuffer();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PCDATA:
        t = jj_consume_token(PCDATA);
            sb.append(t.image);
        break;
      case AT:
        jj_consume_token(AT);
            sb.append('@');
        break;
      case LT:
        jj_consume_token(LT);
            sb.append('<');
        break;
      case BACKSLASH:
        jj_consume_token(BACKSLASH);
            sb.append('\\');
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
      case LT:
      case BACKSLASH:
      case PCDATA:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
    }
        m_handler.handleText(new Text(sb.toString()));
  }

  final public void parseNewline() throws ParseException {
    Token t;
    t = jj_consume_token(NEWLINE2);
        m_handler.handleNewline(new Newline(t.image));
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4,0x3ff8,0x3ff8,0x8000,0x718,0x40000,0x800000,0x80000,0x2000000,0x30000,0x10e0,0x10e0,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[26];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    token.next.beginColumn = jj_input_stream.column;     token.next.beginLine = jj_input_stream.line;     return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
