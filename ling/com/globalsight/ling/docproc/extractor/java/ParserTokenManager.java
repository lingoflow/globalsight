/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package com.globalsight.ling.docproc.extractor.java;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffffffffffe0L) != 0L)
         {
            jjmatchedKind = 64;
            return 29;
         }
         if ((active1 & 0x20040000000L) != 0L)
            return 50;
         if ((active1 & 0x800L) != 0L)
            return 5;
         return -1;
      case 1:
         if ((active0 & 0xfffffffbfcffe0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 64;
               jjmatchedPos = 1;
            }
            return 29;
         }
         if ((active0 & 0x4030000L) != 0L)
            return 29;
         return -1;
      case 2:
         if ((active0 & 0xf7fffb3afeffe0L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 64;
               jjmatchedPos = 2;
            }
            return 29;
         }
         if ((active0 & 0x80004c1000000L) != 0L)
            return 29;
         return -1;
      case 3:
         if ((active0 & 0x14400902040b00L) != 0L)
            return 29;
         if ((active0 & 0xe3bff2b8faf4e0L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 3;
            return 29;
         }
         return -1;
      case 4:
         if ((active0 & 0xa235f2b80ac060L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 64;
               jjmatchedPos = 4;
            }
            return 29;
         }
         if ((active0 & 0x418a0000f03480L) != 0L)
            return 29;
         return -1;
      case 5:
         if ((active0 & 0xa22070a848c060L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 5;
            return 29;
         }
         if ((active0 & 0x1158210020000L) != 0L)
            return 29;
         return -1;
      case 6:
         if ((active0 & 0x3000488040L) != 0L)
            return 29;
         if ((active0 & 0xa22040a8004020L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 6;
            return 29;
         }
         return -1;
      case 7:
         if ((active0 & 0x22040a8000000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 7;
            return 29;
         }
         if ((active0 & 0xa0000000004020L) != 0L)
            return 29;
         return -1;
      case 8:
         if ((active0 & 0x200028000000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 8;
            return 29;
         }
         if ((active0 & 0x2004080000000L) != 0L)
            return 29;
         return -1;
      case 9:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 9;
            return 29;
         }
         if ((active0 & 0x28000000L) != 0L)
            return 29;
         return -1;
      case 10:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 10;
            return 29;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 37:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L);
      case 38:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40001000000L);
      case 40:
         return jjStopAtPos(0, 67);
      case 41:
         return jjStopAtPos(0, 68);
      case 42:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L);
      case 43:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4002000000L);
      case 44:
         return jjStopAtPos(0, 74);
      case 45:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8004000000L);
      case 46:
         return jjStartNfaWithStates_0(0, 75, 5);
      case 47:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000L);
      case 58:
         return jjStopAtPos(0, 82);
      case 59:
         return jjStopAtPos(0, 73);
      case 60:
         jjmatchedKind = 78;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400800100000L);
      case 61:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 62:
         jjmatchedKind = 77;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1803000200000L);
      case 63:
         return jjStopAtPos(0, 81);
      case 91:
         return jjStopAtPos(0, 71);
      case 93:
         return jjStopAtPos(0, 72);
      case 94:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1c0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7e00L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x38000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xc0000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1f00000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xfc000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0xe00000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0xf000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x803e0000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xfc00000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x30000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 69);
      case 124:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000800000L);
      case 125:
         return jjStopAtPos(0, 70);
      case 126:
         return jjStopAtPos(0, 80);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         break;
      case 43:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         break;
      case 45:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         break;
      case 60:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000L);
      case 61:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 102);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         break;
      case 62:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1802000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1200100600L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10400008000L, active1, 0L);
      case 102:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 29);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x41c20000000800L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x841000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0xe0000000L, active1, 0L);
      case 111:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x30000103026040L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0xe006000000080L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80040000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x88800000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000100L, active1, 0L);
      case 124:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(2, 110);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(2, 111);
         break;
      case 62:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2040000001800L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x50502000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000800100000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x200100606000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x24000800040L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x80018000000L, active1, 0L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 29);
         return jjMoveStringLiteralDfa3_0(active0, 0x81800000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x20040220L, active1, 0L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10282080500L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000020000L, active1, 0L);
      case 119:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 29);
         break;
      case 121:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 51, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(3, 112);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000e08080L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000400L, active1, 0L);
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 29);
         break;
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 29);
         else if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 29);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 29);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x80080080000L, active1, 0L);
      case 103:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000200000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x40008008000040L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x1800010000000L, active1, 0L);
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x103000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x144020004020L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x3020000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x80100000000000L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 29);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x4008000040L);
      case 104:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x48000004000L);
      case 107:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 29);
         break;
      case 108:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x420000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x10090000020L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 29);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 29);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 119:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x60L);
      case 99:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 29);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 29);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 29);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 104:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x22000000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x408000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0x20004000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      case 115:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 29);
         break;
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0x80002000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000020L);
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 29);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 29);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000008000000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L);
      case 110:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 6, 29);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 29);
         break;
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 29);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 121:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 14, 29);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 53, 29);
         return jjMoveStringLiteralDfa8_0(active0, 0x4020000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x2200008000000L);
      case 112:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 55, 29);
         break;
      case 116:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 5, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 29);
         break;
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 31, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
      case 116:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 49, 29);
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(9, 29, 29);
         break;
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 27, 29);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 45, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x0L, 0x8000000000000000L
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x0L, 0x4000000000000000L
};
static final long[] jjbitVec2 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec6 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec7 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec9 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec10 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 63;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if ((0x104003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 47)
                     jjAddStates(7, 9);
                  else if (curChar == 36)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAdd(29);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 39)
                     jjAddStates(13, 14);
                  else if (curChar == 46)
                     jjCheckNAdd(5);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAddTwoStates(2, 3);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAddStates(15, 17);
                  }
                  break;
               case 50:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(58, 59);
                  else if (curChar == 47)
                  {
                     if (kind > 3)
                        kind = 3;
                     jjCheckNAdd(56);
                  }
                  if (curChar == 47)
                     jjCheckNAddStates(18, 20);
                  break;
               case 0:
                  if ((0x104003600L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if (curChar == 46)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddStates(21, 23);
                  break;
               case 7:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
                  if (curChar == 39)
                     jjAddStates(13, 14);
                  break;
               case 11:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if (curChar == 39 && kind > 62)
                     kind = 62;
                  break;
               case 14:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 12);
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 17:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 19:
                  if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  break;
               case 20:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 22:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 23:
                  if (curChar == 34 && kind > 63)
                     kind = 63;
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 26:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 28:
                  if (curChar != 36)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if (curChar != 46)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddStates(28, 30);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddStates(28, 30);
                  break;
               case 35:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(36, 9);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 39:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddTwoStates(40, 9);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 43:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 9);
                  break;
               case 45:
                  if (curChar != 48)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddStates(15, 17);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddTwoStates(47, 3);
                  break;
               case 48:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddTwoStates(48, 3);
                  break;
               case 49:
                  if (curChar == 47)
                     jjAddStates(7, 9);
                  break;
               case 51:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 52:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 53:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 54:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar != 47)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(56);
                  break;
               case 57:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 58:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if (curChar == 42)
                     jjCheckNAddStates(34, 36);
                  break;
               case 60:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 59);
                  break;
               case 61:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(61, 59);
                  break;
               case 62:
                  if (curChar == 47 && kind > 4)
                     kind = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(29);
                  break;
               case 3:
                  if ((0x100000001000L & l) != 0L && kind > 56)
                     kind = 56;
                  break;
               case 6:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(37, 38);
                  break;
               case 9:
                  if ((0x5000000050L & l) != 0L && kind > 60)
                     kind = 60;
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 13:
                  if (curChar == 92)
                     jjAddStates(39, 41);
                  break;
               case 14:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 20:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 21:
                  if (curChar == 92)
                     jjAddStates(42, 44);
                  break;
               case 22:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 34:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(45, 46);
                  break;
               case 38:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(47, 48);
                  break;
               case 42:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(49, 50);
                  break;
               case 46:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddTwoStates(47, 3);
                  break;
               case 51:
                  jjAddStates(18, 20);
                  break;
               case 56:
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  jjCheckNAddTwoStates(58, 59);
                  break;
               case 60:
               case 61:
                  jjCheckNAddTwoStates(61, 59);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAdd(29);
                  }
                  break;
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 11:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 20:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(10, 12);
                  break;
               case 28:
               case 29:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(29);
                  break;
               case 51:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(18, 20);
                  break;
               case 56:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 60:
               case 61:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(61, 59);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 63 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   31, 32, 37, 38, 41, 42, 9, 50, 55, 57, 20, 21, 23, 11, 13, 46, 
   48, 3, 51, 52, 54, 5, 6, 9, 20, 21, 25, 23, 33, 34, 9, 41, 
   42, 9, 59, 60, 62, 7, 8, 14, 15, 17, 22, 24, 26, 35, 36, 39, 
   40, 43, 44, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 254:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec1[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      default :
         if ((jjbitVec2[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec10[i2] & l2) != 0L);
      default :
         if ((jjbitVec5[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\141\142\163\164\162\141\143\164", 
"\142\157\157\154\145\141\156", "\142\162\145\141\153", "\142\171\164\145", "\143\141\163\145", 
"\143\141\164\143\150", "\143\150\141\162", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145", 
"\145\154\163\145", "\145\170\164\145\156\144\163", "\146\141\154\163\145", 
"\146\151\156\141\154", "\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", 
"\147\157\164\157", "\151\146", "\151\155\160\154\145\155\145\156\164\163", 
"\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", "\151\156\164", 
"\151\156\164\145\162\146\141\143\145", "\154\157\156\147", "\156\141\164\151\166\145", "\156\145\167", 
"\156\165\154\154", "\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\164\165\162\156", 
"\163\150\157\162\164", "\163\164\141\164\151\143", "\163\165\160\145\162", 
"\163\167\151\164\143\150", "\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", 
"\164\150\162\157\167", "\164\150\162\157\167\163", "\164\162\141\156\163\151\145\156\164", 
"\164\162\165\145", "\164\162\171", "\166\157\151\144", "\166\157\154\141\164\151\154\145", 
"\167\150\151\154\145", "\163\164\162\151\143\164\146\160", null, null, null, null, null, null, null, 
null, null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", 
"\56", "\75", "\76", "\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", 
"\76\75", "\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", 
"\57", "\46", "\174", "\136", "\45", "\74\74", "\76\76", "\76\76\76", "\53\75", 
"\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", "\45\75", "\74\74\75", 
"\76\76\75", "\76\76\76\75", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[63];
private final int[] jjstateSet = new int[126];
protected char curChar;
/** Constructor. */
public ParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 63; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
